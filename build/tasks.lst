ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvAddCurrentTaskToDelayedList:
  26              	.LFB51:
  27              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 2


  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 3


  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 4


 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 5


 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 6


 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 7


 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 8


 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 9


 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 10


 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 11


 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 12


 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 13


 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 14


 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 15


 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 16


 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 17


 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 18


 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 19


1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 20


1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 21


1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 22


1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 23


1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 24


1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 25


1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 26


1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 27


1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 28


1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 29


1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 30


1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 31


1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 32


1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 33


1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 34


1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 35


1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 36


1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 37


2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 38


2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 39


2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 40


2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 41


2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 42


2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 43


2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 44


2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 45


2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 46


2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 47


2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 48


2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 49


2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 50


2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 51


2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 52


2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 53


2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 54


2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 55


3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 56


3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 57


3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 58


3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 59


3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 60


3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 61


3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 62


3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 63


3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 64


3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 65


3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 66


3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 67


3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 68


3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 69


3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 70


3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 71


3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 72


4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 73


4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 74


4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 75


4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 76


4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 77


4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 78


4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 79


4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 80


4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 81


4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 82


4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 83


4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
  28              		.loc 1 4693 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 3, -24
  37              		.cfi_offset 4, -20
  38              		.cfi_offset 5, -16
  39              		.cfi_offset 6, -12
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 84


  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
  42              		.loc 1 4695 0
  43 0002 1B4B     		ldr	r3, .L15
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  44              		.loc 1 4708 0
  45 0004 1B4E     		ldr	r6, .L15+4
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  46              		.loc 1 4695 0
  47 0006 1C68     		ldr	r4, [r3]
  48              		.loc 1 4708 0
  49 0008 3368     		ldr	r3, [r6]
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
  50              		.loc 1 4693 0
  51 000a 0546     		mov	r5, r0
  52              	.LVL1:
  53              		.loc 1 4708 0
  54 000c 181D     		adds	r0, r3, #4
  55              	.LVL2:
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
  56              		.loc 1 4693 0
  57 000e 0F46     		mov	r7, r1
  58              		.loc 1 4708 0
  59 0010 FFF7FEFF 		bl	uxListRemove
  60              	.LVL3:
  61 0014 40B9     		cbnz	r0, .L2
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  62              		.loc 1 4712 0
  63 0016 3368     		ldr	r3, [r6]
  64 0018 1749     		ldr	r1, .L15+8
  65 001a D86A     		ldr	r0, [r3, #44]
  66 001c 0B68     		ldr	r3, [r1]
  67 001e 0122     		movs	r2, #1
  68 0020 8240     		lsls	r2, r2, r0
  69 0022 23EA0203 		bic	r3, r3, r2
  70 0026 0B60     		str	r3, [r1]
  71              	.L2:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 85


4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  72              		.loc 1 4721 0
  73 0028 6B1C     		adds	r3, r5, #1
  74 002a 17D0     		beq	.L13
  75              	.L3:
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  76              		.loc 1 4736 0
  77 002c 3368     		ldr	r3, [r6]
  78 002e 6419     		adds	r4, r4, r5
  79              	.LVL4:
  80 0030 5C60     		str	r4, [r3, #4]
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
  81              		.loc 1 4738 0
  82 0032 0BD2     		bcs	.L14
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  83              		.loc 1 4748 0
  84 0034 114B     		ldr	r3, .L15+12
  85 0036 1868     		ldr	r0, [r3]
  86 0038 3168     		ldr	r1, [r6]
  87 003a 0431     		adds	r1, r1, #4
  88 003c FFF7FEFF 		bl	vListInsert
  89              	.LVL5:
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
  90              		.loc 1 4753 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 86


  91 0040 0F4B     		ldr	r3, .L15+16
  92 0042 1A68     		ldr	r2, [r3]
  93 0044 A242     		cmp	r2, r4
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
  94              		.loc 1 4755 0
  95 0046 88BF     		it	hi
  96 0048 1C60     		strhi	r4, [r3]
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
  97              		.loc 1 4801 0
  98 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
  99              	.LVL6:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 87


 100              	.L14:
 101              	.LBB154:
 102              	.LBB155:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 103              		.loc 1 4742 0
 104 004c 0D4B     		ldr	r3, .L15+20
 105 004e 1868     		ldr	r0, [r3]
 106 0050 3168     		ldr	r1, [r6]
 107              	.LBE155:
 108              	.LBE154:
 109              		.loc 1 4801 0
 110 0052 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 111              	.LCFI1:
 112              		.cfi_remember_state
 113              		.cfi_restore 14
 114              		.cfi_restore 7
 115              		.cfi_restore 6
 116              		.cfi_restore 5
 117              		.cfi_restore 4
 118              		.cfi_restore 3
 119              		.cfi_def_cfa_offset 0
 120              	.LVL7:
 121              	.LBB157:
 122              	.LBB156:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 123              		.loc 1 4742 0
 124 0056 0431     		adds	r1, r1, #4
 125 0058 FFF7FEBF 		b	vListInsert
 126              	.LVL8:
 127              	.L13:
 128              	.LCFI2:
 129              		.cfi_restore_state
 130              	.LBE156:
 131              	.LBE157:
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 132              		.loc 1 4721 0 discriminator 1
 133 005c 002F     		cmp	r7, #0
 134 005e E5D0     		beq	.L3
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 135              		.loc 1 4726 0
 136 0060 3168     		ldr	r1, [r6]
 137 0062 0948     		ldr	r0, .L15+24
 138 0064 0431     		adds	r1, r1, #4
 139              		.loc 1 4801 0
 140 0066 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 141              	.LCFI3:
 142              		.cfi_restore 14
 143              		.cfi_restore 7
 144              		.cfi_restore 6
 145              		.cfi_restore 5
 146              		.cfi_restore 4
 147              		.cfi_restore 3
 148              		.cfi_def_cfa_offset 0
 149              	.LVL9:
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 150              		.loc 1 4726 0
 151 006a FFF7FEBF 		b	vListInsertEnd
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 88


 152              	.LVL10:
 153              	.L16:
 154 006e 00BF     		.align	2
 155              	.L15:
 156 0070 00000000 		.word	.LANCHOR0
 157 0074 00000000 		.word	.LANCHOR1
 158 0078 00000000 		.word	.LANCHOR2
 159 007c 00000000 		.word	.LANCHOR5
 160 0080 00000000 		.word	.LANCHOR6
 161 0084 00000000 		.word	.LANCHOR4
 162 0088 00000000 		.word	.LANCHOR3
 163              		.cfi_endproc
 164              	.LFE51:
 166              		.section	.text.xTaskCreate,"ax",%progbits
 167              		.align	1
 168              		.p2align 2,,3
 169              		.global	xTaskCreate
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu fpv4-sp-d16
 175              	xTaskCreate:
 176              	.LFB5:
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 177              		.loc 1 682 0
 178              		.cfi_startproc
 179              		@ args = 8, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              	.LVL11:
 182 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 183              	.LCFI4:
 184              		.cfi_def_cfa_offset 40
 185              		.cfi_offset 3, -40
 186              		.cfi_offset 4, -36
 187              		.cfi_offset 5, -32
 188              		.cfi_offset 6, -28
 189              		.cfi_offset 7, -24
 190              		.cfi_offset 8, -20
 191              		.cfi_offset 9, -16
 192              		.cfi_offset 10, -12
 193              		.cfi_offset 11, -8
 194              		.cfi_offset 14, -4
 195              	.LBB166:
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196              		.loc 1 716 0
 197 0004 4FEA820A 		lsl	r10, r2, #2
 198              	.LBE166:
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 199              		.loc 1 682 0
 200 0008 8046     		mov	r8, r0
 201              	.LBB167:
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 202              		.loc 1 716 0
 203 000a 5046     		mov	r0, r10
 204              	.LVL12:
 205              	.LBE167:
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 89


 206              		.loc 1 682 0
 207 000c 0D46     		mov	r5, r1
 208 000e 9946     		mov	r9, r3
 209 0010 0B9F     		ldr	r7, [sp, #44]
 210              	.LBB168:
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211              		.loc 1 716 0
 212 0012 FFF7FEFF 		bl	pvPortMalloc
 213              	.LVL13:
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 214              		.loc 1 718 0
 215 0016 0028     		cmp	r0, #0
 216 0018 00F00281 		beq	.L26
 217 001c 0646     		mov	r6, r0
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 218              		.loc 1 721 0
 219 001e 5420     		movs	r0, #84
 220              	.LVL14:
 221 0020 FFF7FEFF 		bl	pvPortMalloc
 222              	.LVL15:
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 223              		.loc 1 723 0
 224 0024 0446     		mov	r4, r0
 225 0026 0028     		cmp	r0, #0
 226 0028 00F0CE80 		beq	.L19
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 227              		.loc 1 726 0
 228 002c 0663     		str	r6, [r0, #48]
 229              	.LVL16:
 230              	.LBE168:
 231              	.LBB169:
 232              	.LBB170:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233              		.loc 1 829 0
 234 002e 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 235 0030 80F83430 		strb	r3, [r0, #52]
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 236              		.loc 1 807 0
 237 0034 AAF1040A 		sub	r10, r10, #4
 238              	.LVL17:
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 239              		.loc 1 834 0
 240 0038 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 241              		.loc 1 807 0
 242 003a 5644     		add	r6, r6, r10
 243              	.LVL18:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 244              		.loc 1 808 0
 245 003c 26F00706 		bic	r6, r6, #7
 246              	.LVL19:
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 247              		.loc 1 834 0
 248 0040 002B     		cmp	r3, #0
 249 0042 4DD0     		beq	.L20
 250              	.LVL20:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 90


 251              		.loc 1 829 0
 252 0044 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 253 0046 80F83530 		strb	r3, [r0, #53]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 254              		.loc 1 834 0
 255 004a 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 256 004c 002B     		cmp	r3, #0
 257 004e 47D0     		beq	.L20
 258              	.LVL21:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 259              		.loc 1 829 0
 260 0050 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 261 0052 80F83630 		strb	r3, [r0, #54]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 262              		.loc 1 834 0
 263 0056 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 264 0058 002B     		cmp	r3, #0
 265 005a 41D0     		beq	.L20
 266              	.LVL22:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 267              		.loc 1 829 0
 268 005c EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 269 005e 80F83730 		strb	r3, [r0, #55]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 270              		.loc 1 834 0
 271 0062 EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 272 0064 002B     		cmp	r3, #0
 273 0066 3BD0     		beq	.L20
 274              	.LVL23:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 275              		.loc 1 829 0
 276 0068 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 277 006a 80F83830 		strb	r3, [r0, #56]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 278              		.loc 1 834 0
 279 006e 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 280 0070 002B     		cmp	r3, #0
 281 0072 35D0     		beq	.L20
 282              	.LVL24:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283              		.loc 1 829 0
 284 0074 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 285 0076 80F83930 		strb	r3, [r0, #57]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 286              		.loc 1 834 0
 287 007a 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 288 007c 002B     		cmp	r3, #0
 289 007e 2FD0     		beq	.L20
 290              	.LVL25:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291              		.loc 1 829 0
 292 0080 AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 293 0082 80F83A30 		strb	r3, [r0, #58]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 294              		.loc 1 834 0
 295 0086 AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 296 0088 53B3     		cbz	r3, .L20
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 91


 297              	.LVL26:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 298              		.loc 1 829 0
 299 008a EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 300 008c 80F83B30 		strb	r3, [r0, #59]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 301              		.loc 1 834 0
 302 0090 EB79     		ldrb	r3, [r5, #7]	@ zero_extendqisi2
 303 0092 2BB3     		cbz	r3, .L20
 304              	.LVL27:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305              		.loc 1 829 0
 306 0094 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 307 0096 80F83C30 		strb	r3, [r0, #60]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 308              		.loc 1 834 0
 309 009a 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 310 009c 03B3     		cbz	r3, .L20
 311              	.LVL28:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 312              		.loc 1 829 0
 313 009e 6B7A     		ldrb	r3, [r5, #9]	@ zero_extendqisi2
 314 00a0 80F83D30 		strb	r3, [r0, #61]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 315              		.loc 1 834 0
 316 00a4 6B7A     		ldrb	r3, [r5, #9]	@ zero_extendqisi2
 317 00a6 DBB1     		cbz	r3, .L20
 318              	.LVL29:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 319              		.loc 1 829 0
 320 00a8 AB7A     		ldrb	r3, [r5, #10]	@ zero_extendqisi2
 321 00aa 80F83E30 		strb	r3, [r0, #62]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 322              		.loc 1 834 0
 323 00ae AB7A     		ldrb	r3, [r5, #10]	@ zero_extendqisi2
 324 00b0 B3B1     		cbz	r3, .L20
 325              	.LVL30:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 326              		.loc 1 829 0
 327 00b2 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 328 00b4 80F83F30 		strb	r3, [r0, #63]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 329              		.loc 1 834 0
 330 00b8 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 331 00ba 8BB1     		cbz	r3, .L20
 332              	.LVL31:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333              		.loc 1 829 0
 334 00bc 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 335 00be 80F84030 		strb	r3, [r0, #64]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 336              		.loc 1 834 0
 337 00c2 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
 338 00c4 63B1     		cbz	r3, .L20
 339              	.LVL32:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 340              		.loc 1 829 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 92


 341 00c6 6B7B     		ldrb	r3, [r5, #13]	@ zero_extendqisi2
 342 00c8 80F84130 		strb	r3, [r0, #65]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 343              		.loc 1 834 0
 344 00cc 6B7B     		ldrb	r3, [r5, #13]	@ zero_extendqisi2
 345 00ce 3BB1     		cbz	r3, .L20
 346              	.LVL33:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 347              		.loc 1 829 0
 348 00d0 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 349 00d2 80F84230 		strb	r3, [r0, #66]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 350              		.loc 1 834 0
 351 00d6 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 352 00d8 13B1     		cbz	r3, .L20
 353              	.LVL34:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 354              		.loc 1 829 0
 355 00da EB7B     		ldrb	r3, [r5, #15]	@ zero_extendqisi2
 356 00dc 80F84330 		strb	r3, [r0, #67]
 357              	.LVL35:
 358              	.L20:
 359 00e0 0A9D     		ldr	r5, [sp, #40]
 360              	.LVL36:
 361 00e2 062D     		cmp	r5, #6
 362 00e4 28BF     		it	cs
 363 00e6 0625     		movcs	r5, #6
 364              	.LVL37:
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365              		.loc 1 846 0
 366 00e8 4FF0000B 		mov	fp, #0
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 367              		.loc 1 867 0
 368 00ec 04F1040A 		add	r10, r4, #4
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 369              		.loc 1 859 0
 370 00f0 E562     		str	r5, [r4, #44]
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 371              		.loc 1 862 0
 372 00f2 6564     		str	r5, [r4, #68]
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 373              		.loc 1 867 0
 374 00f4 5046     		mov	r0, r10
 375              	.LVL38:
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 376              		.loc 1 846 0
 377 00f6 84F843B0 		strb	fp, [r4, #67]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 378              		.loc 1 863 0
 379 00fa C4F848B0 		str	fp, [r4, #72]
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 380              		.loc 1 867 0
 381 00fe FFF7FEFF 		bl	vListInitialiseItem
 382              	.LVL39:
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 383              		.loc 1 875 0
 384 0102 C5F10705 		rsb	r5, r5, #7
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 93


 385              	.LVL40:
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 386              		.loc 1 868 0
 387 0106 04F11800 		add	r0, r4, #24
 388 010a FFF7FEFF 		bl	vListInitialiseItem
 389              	.LVL41:
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 390              		.loc 1 918 0
 391 010e C4F84CB0 		str	fp, [r4, #76]
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 392              		.loc 1 875 0
 393 0112 A561     		str	r5, [r4, #24]
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 394              		.loc 1 872 0
 395 0114 2461     		str	r4, [r4, #16]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 396              		.loc 1 919 0
 397 0116 84F850B0 		strb	fp, [r4, #80]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398              		.loc 1 876 0
 399 011a 6462     		str	r4, [r4, #36]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 400              		.loc 1 946 0
 401 011c 4A46     		mov	r2, r9
 402 011e 4146     		mov	r1, r8
 403 0120 3046     		mov	r0, r6
 404 0122 FFF7FEFF 		bl	pxPortInitialiseStack
 405              	.LVL42:
 406 0126 2060     		str	r0, [r4]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 407              		.loc 1 950 0
 408 0128 07B1     		cbz	r7, .L21
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 409              		.loc 1 954 0
 410 012a 3C60     		str	r4, [r7]
 411              	.L21:
 412              	.LVL43:
 413              	.LBE170:
 414              	.LBE169:
 415              	.LBB171:
 416              	.LBB172:
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 417              		.loc 1 967 0
 418 012c FFF7FEFF 		bl	vPortEnterCritical
 419              	.LVL44:
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 420              		.loc 1 969 0
 421 0130 3D4A     		ldr	r2, .L84
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 422              		.loc 1 970 0
 423 0132 3E4E     		ldr	r6, .L84+4
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 424              		.loc 1 969 0
 425 0134 1368     		ldr	r3, [r2]
 426 0136 0133     		adds	r3, r3, #1
 427 0138 1360     		str	r3, [r2]
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 94


 428              		.loc 1 970 0
 429 013a 3368     		ldr	r3, [r6]
 430 013c 002B     		cmp	r3, #0
 431 013e 3AD0     		beq	.L83
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 432              		.loc 1 993 0
 433 0140 3B4F     		ldr	r7, .L84+8
 434 0142 E36A     		ldr	r3, [r4, #44]
 435 0144 3A68     		ldr	r2, [r7]
 436 0146 5AB3     		cbz	r2, .L80
 437 0148 DFF80881 		ldr	r8, .L84+44
 438              	.LVL45:
 439              	.L24:
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 440              		.loc 1 1010 0
 441 014c 394A     		ldr	r2, .L84+12
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442              		.loc 1 1020 0
 443 014e DFF808C1 		ldr	ip, .L84+48
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 444              		.loc 1 1010 0
 445 0152 1068     		ldr	r0, [r2]
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 446              		.loc 1 1020 0
 447 0154 DCF800E0 		ldr	lr, [ip]
 448 0158 0125     		movs	r5, #1
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 449              		.loc 1 1010 0
 450 015a 2844     		add	r0, r0, r5
 451 015c 1060     		str	r0, [r2]
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452              		.loc 1 1020 0
 453 015e 05FA03F2 		lsl	r2, r5, r3
 454 0162 03EB8303 		add	r3, r3, r3, lsl #2
 455 0166 42EA0E02 		orr	r2, r2, lr
 456 016a 08EB8300 		add	r0, r8, r3, lsl #2
 457 016e 5146     		mov	r1, r10
 458 0170 CCF80020 		str	r2, [ip]
 459 0174 FFF7FEFF 		bl	vListInsertEnd
 460              	.LVL46:
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461              		.loc 1 1024 0
 462 0178 FFF7FEFF 		bl	vPortExitCritical
 463              	.LVL47:
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 464              		.loc 1 1026 0
 465 017c 3B68     		ldr	r3, [r7]
 466 017e BBB1     		cbz	r3, .L28
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 467              		.loc 1 1030 0
 468 0180 3268     		ldr	r2, [r6]
 469 0182 E36A     		ldr	r3, [r4, #44]
 470 0184 D26A     		ldr	r2, [r2, #44]
 471 0186 9A42     		cmp	r2, r3
 472 0188 12D2     		bcs	.L28
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 473              		.loc 1 1032 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 95


 474 018a 2B4B     		ldr	r3, .L84+16
 475 018c 4FF08052 		mov	r2, #268435456
 476 0190 1A60     		str	r2, [r3]
 477              	.LVL48:
 478              		.syntax unified
 479              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 480 0192 BFF34F8F 		dsb
 481              	@ 0 "" 2
 482              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 483 0196 BFF36F8F 		isb
 484              	@ 0 "" 2
 485              		.thumb
 486              		.syntax unified
 487              	.LBE172:
 488              	.LBE171:
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 489              		.loc 1 754 0
 490 019a 2846     		mov	r0, r5
 491              	.LVL49:
 492              	.L17:
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493              		.loc 1 762 0
 494 019c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 495              	.LVL50:
 496              	.L80:
 497              	.LBB178:
 498              	.LBB175:
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 499              		.loc 1 995 0
 500 01a0 3268     		ldr	r2, [r6]
 501 01a2 DFF8B080 		ldr	r8, .L84+44
 502              	.LVL51:
 503 01a6 D26A     		ldr	r2, [r2, #44]
 504 01a8 9A42     		cmp	r2, r3
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 505              		.loc 1 997 0
 506 01aa 98BF     		it	ls
 507 01ac 3460     		strls	r4, [r6]
 508 01ae CDE7     		b	.L24
 509              	.LVL52:
 510              	.L28:
 511              	.LBE175:
 512              	.LBE178:
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 513              		.loc 1 754 0
 514 01b0 2846     		mov	r0, r5
 515              	.LVL53:
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516              		.loc 1 762 0
 517 01b2 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 518              	.LVL54:
 519              	.L83:
 520              	.LBB179:
 521              	.LBB176:
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 522              		.loc 1 974 0
 523 01b6 3460     		str	r4, [r6]
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 96


 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 524              		.loc 1 976 0
 525 01b8 1368     		ldr	r3, [r2]
 526 01ba 012B     		cmp	r3, #1
 527 01bc 0BD0     		beq	.L23
 528 01be E36A     		ldr	r3, [r4, #44]
 529 01c0 DFF89080 		ldr	r8, .L84+44
 530              	.LVL55:
 531 01c4 1A4F     		ldr	r7, .L84+8
 532 01c6 C1E7     		b	.L24
 533              	.LVL56:
 534              	.L19:
 535              	.LBE176:
 536              	.LBE179:
 537              	.LBB180:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 538              		.loc 1 732 0
 539 01c8 3046     		mov	r0, r6
 540              	.LVL57:
 541 01ca FFF7FEFF 		bl	vPortFree
 542              	.LVL58:
 543              	.LBE180:
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 544              		.loc 1 758 0
 545 01ce 4FF0FF30 		mov	r0, #-1
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 546              		.loc 1 762 0
 547 01d2 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 548              	.LVL59:
 549              	.L23:
 550 01d6 DFF87C80 		ldr	r8, .L84+44
 551              	.LVL60:
 552 01da 4546     		mov	r5, r8
 553 01dc 08F18C07 		add	r7, r8, #140
 554              	.L25:
 555              	.LBB181:
 556              	.LBB177:
 557              	.LBB173:
 558              	.LBB174:
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 559              		.loc 1 3339 0
 560 01e0 2846     		mov	r0, r5
 561 01e2 1435     		adds	r5, r5, #20
 562 01e4 FFF7FEFF 		bl	vListInitialise
 563              	.LVL61:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 564              		.loc 1 3337 0
 565 01e8 BD42     		cmp	r5, r7
 566 01ea F9D1     		bne	.L25
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 567              		.loc 1 3342 0
 568 01ec DFF86C90 		ldr	r9, .L84+52
 569              	.LVL62:
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 570              		.loc 1 3343 0
 571 01f0 124D     		ldr	r5, .L84+20
 572 01f2 0F4F     		ldr	r7, .L84+8
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 97


3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 573              		.loc 1 3342 0
 574 01f4 4846     		mov	r0, r9
 575 01f6 FFF7FEFF 		bl	vListInitialise
 576              	.LVL63:
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 577              		.loc 1 3343 0
 578 01fa 2846     		mov	r0, r5
 579 01fc FFF7FEFF 		bl	vListInitialise
 580              	.LVL64:
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581              		.loc 1 3344 0
 582 0200 0F48     		ldr	r0, .L84+24
 583 0202 FFF7FEFF 		bl	vListInitialise
 584              	.LVL65:
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 585              		.loc 1 3348 0
 586 0206 0F48     		ldr	r0, .L84+28
 587 0208 FFF7FEFF 		bl	vListInitialise
 588              	.LVL66:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 589              		.loc 1 3354 0
 590 020c 0E48     		ldr	r0, .L84+32
 591 020e FFF7FEFF 		bl	vListInitialise
 592              	.LVL67:
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 593              		.loc 1 3361 0
 594 0212 0E4B     		ldr	r3, .L84+36
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 595              		.loc 1 3360 0
 596 0214 0E4A     		ldr	r2, .L84+40
 597 0216 C2F80090 		str	r9, [r2]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 598              		.loc 1 3361 0
 599 021a 1D60     		str	r5, [r3]
 600 021c E36A     		ldr	r3, [r4, #44]
 601 021e 95E7     		b	.L24
 602              	.LVL68:
 603              	.L26:
 604              	.LBE174:
 605              	.LBE173:
 606              	.LBE177:
 607              	.LBE181:
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 608              		.loc 1 758 0
 609 0220 4FF0FF30 		mov	r0, #-1
 610              	.LVL69:
 611 0224 BAE7     		b	.L17
 612              	.L85:
 613 0226 00BF     		.align	2
 614              	.L84:
 615 0228 00000000 		.word	.LANCHOR7
 616 022c 00000000 		.word	.LANCHOR1
 617 0230 00000000 		.word	.LANCHOR13
 618 0234 00000000 		.word	.LANCHOR14
 619 0238 04ED00E0 		.word	-536810236
 620 023c 00000000 		.word	.LANCHOR10
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 98


 621 0240 00000000 		.word	.LANCHOR11
 622 0244 00000000 		.word	.LANCHOR12
 623 0248 00000000 		.word	.LANCHOR3
 624 024c 00000000 		.word	.LANCHOR4
 625 0250 00000000 		.word	.LANCHOR5
 626 0254 00000000 		.word	.LANCHOR8
 627 0258 00000000 		.word	.LANCHOR2
 628 025c 00000000 		.word	.LANCHOR9
 629              		.cfi_endproc
 630              	.LFE5:
 632              		.section	.text.vTaskDelete,"ax",%progbits
 633              		.align	1
 634              		.p2align 2,,3
 635              		.global	vTaskDelete
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 639              		.fpu fpv4-sp-d16
 641              	vTaskDelete:
 642              	.LFB8:
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 643              		.loc 1 1049 0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 0
 646              		@ frame_needed = 0, uses_anonymous_args = 0
 647              	.LVL70:
 648 0000 70B5     		push	{r4, r5, r6, lr}
 649              	.LCFI5:
 650              		.cfi_def_cfa_offset 16
 651              		.cfi_offset 4, -16
 652              		.cfi_offset 5, -12
 653              		.cfi_offset 6, -8
 654              		.cfi_offset 14, -4
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 655              		.loc 1 1049 0
 656 0002 0446     		mov	r4, r0
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 657              		.loc 1 1056 0
 658 0004 344D     		ldr	r5, .L108
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 659              		.loc 1 1052 0
 660 0006 FFF7FEFF 		bl	vPortEnterCritical
 661              	.LVL71:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 662              		.loc 1 1056 0
 663 000a 002C     		cmp	r4, #0
 664 000c 48D0     		beq	.L103
 665              	.LVL72:
 666              	.L87:
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 667              		.loc 1 1059 0 discriminator 4
 668 000e 261D     		adds	r6, r4, #4
 669 0010 3046     		mov	r0, r6
 670 0012 FFF7FEFF 		bl	uxListRemove
 671              	.LVL73:
 672 0016 30B9     		cbnz	r0, .L88
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 99


 673              		.loc 1 1061 0
 674 0018 E16A     		ldr	r1, [r4, #44]
 675 001a 304B     		ldr	r3, .L108+4
 676 001c 01EB8102 		add	r2, r1, r1, lsl #2
 677 0020 53F82230 		ldr	r3, [r3, r2, lsl #2]
 678 0024 43B3     		cbz	r3, .L105
 679              	.L88:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 680              		.loc 1 1069 0
 681 0026 A36A     		ldr	r3, [r4, #40]
 682 0028 1BB1     		cbz	r3, .L89
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 683              		.loc 1 1071 0
 684 002a 04F11800 		add	r0, r4, #24
 685 002e FFF7FEFF 		bl	uxListRemove
 686              	.LVL74:
 687              	.L89:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 688              		.loc 1 1082 0
 689 0032 2B4A     		ldr	r2, .L108+8
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 690              		.loc 1 1084 0
 691 0034 2968     		ldr	r1, [r5]
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 692              		.loc 1 1082 0
 693 0036 1368     		ldr	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 694              		.loc 1 1084 0
 695 0038 A142     		cmp	r1, r4
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696              		.loc 1 1082 0
 697 003a 03F10103 		add	r3, r3, #1
 698 003e 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 699              		.loc 1 1084 0
 700 0040 37D0     		beq	.L106
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 701              		.loc 1 1107 0
 702 0042 284A     		ldr	r2, .L108+12
 703              	.LBB190:
 704              	.LBB191:
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 705              		.loc 1 3600 0
 706 0044 206B     		ldr	r0, [r4, #48]
 707              	.LBE191:
 708              	.LBE190:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 709              		.loc 1 1107 0
 710 0046 1368     		ldr	r3, [r2]
 711 0048 013B     		subs	r3, r3, #1
 712 004a 1360     		str	r3, [r2]
 713              	.LVL75:
 714              	.LBB193:
 715              	.LBB192:
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 716              		.loc 1 3600 0
 717 004c FFF7FEFF 		bl	vPortFree
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 100


 718              	.LVL76:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 719              		.loc 1 3601 0
 720 0050 2046     		mov	r0, r4
 721 0052 FFF7FEFF 		bl	vPortFree
 722              	.LVL77:
 723              	.LBE192:
 724              	.LBE193:
 725              	.LBB194:
 726              	.LBB195:
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 727              		.loc 1 3639 0
 728 0056 244B     		ldr	r3, .L108+16
 729 0058 1A68     		ldr	r2, [r3]
 730 005a 1268     		ldr	r2, [r2]
 731 005c 12BB     		cbnz	r2, .L92
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 732              		.loc 1 3645 0
 733 005e 234B     		ldr	r3, .L108+20
 734 0060 4FF0FF32 		mov	r2, #-1
 735 0064 1A60     		str	r2, [r3]
 736              	.L91:
 737              	.LBE195:
 738              	.LBE194:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 739              		.loc 1 1117 0
 740 0066 FFF7FEFF 		bl	vPortExitCritical
 741              	.LVL78:
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 742              		.loc 1 1121 0
 743 006a 214B     		ldr	r3, .L108+24
 744 006c 1B68     		ldr	r3, [r3]
 745 006e 13B1     		cbz	r3, .L86
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746              		.loc 1 1123 0
 747 0070 2B68     		ldr	r3, [r5]
 748 0072 A342     		cmp	r3, r4
 749 0074 08D0     		beq	.L107
 750              	.L86:
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 751              		.loc 1 1133 0
 752 0076 70BD     		pop	{r4, r5, r6, pc}
 753              	.LVL79:
 754              	.L105:
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 755              		.loc 1 1061 0 discriminator 1
 756 0078 1E48     		ldr	r0, .L108+28
 757 007a 0122     		movs	r2, #1
 758 007c 0368     		ldr	r3, [r0]
 759 007e 8A40     		lsls	r2, r2, r1
 760 0080 23EA0203 		bic	r3, r3, r2
 761 0084 0360     		str	r3, [r0]
 762 0086 CEE7     		b	.L88
 763              	.L107:
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 764              		.loc 1 1125 0
 765 0088 1B4B     		ldr	r3, .L108+32
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 101


 766 008a 1B68     		ldr	r3, [r3]
 767 008c D3B1     		cbz	r3, .L94
 768              	.LBB199:
 769              	.LBB200:
 770              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 102


  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 103


 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 104


 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 105


 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 771              		.loc 2 237 0
 772              		.syntax unified
 773              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 774 008e 4FF05003 			mov r3, #80												
 775 0092 83F31188 		msr basepri, r3											
 776 0096 BFF36F8F 		isb														
 777 009a BFF34F8F 		dsb														
 778              	
 779              	@ 0 "" 2
 780              	.LVL80:
 781              		.thumb
 782              		.syntax unified
 783              	.L95:
 784 009e FEE7     		b	.L95
 785              	.LVL81:
 786              	.L103:
 787              	.LBE200:
 788              	.LBE199:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 789              		.loc 1 1056 0 discriminator 1
 790 00a0 2C68     		ldr	r4, [r5]
 791              	.LVL82:
 792 00a2 B4E7     		b	.L87
 793              	.LVL83:
 794              	.L92:
 795              	.LBB201:
 796              	.LBB198:
 797              	.LBB196:
 798              	.LBB197:
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 799              		.loc 1 3653 0
 800 00a4 1A68     		ldr	r2, [r3]
 801              	.LVL84:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 802              		.loc 1 3654 0
 803 00a6 114B     		ldr	r3, .L108+20
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 804              		.loc 1 3653 0
 805 00a8 D268     		ldr	r2, [r2, #12]
 806              	.LVL85:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 807              		.loc 1 3654 0
 808 00aa D268     		ldr	r2, [r2, #12]
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 106


 809              	.LVL86:
 810 00ac 5268     		ldr	r2, [r2, #4]
 811              	.LVL87:
 812 00ae 1A60     		str	r2, [r3]
 813 00b0 D9E7     		b	.L91
 814              	.L106:
 815              	.LBE197:
 816              	.LBE196:
 817              	.LBE198:
 818              	.LBE201:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 819              		.loc 1 1091 0
 820 00b2 3146     		mov	r1, r6
 821 00b4 1148     		ldr	r0, .L108+36
 822 00b6 FFF7FEFF 		bl	vListInsertEnd
 823              	.LVL88:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824              		.loc 1 1096 0
 825 00ba 114A     		ldr	r2, .L108+40
 826 00bc 1368     		ldr	r3, [r2]
 827 00be 0133     		adds	r3, r3, #1
 828 00c0 1360     		str	r3, [r2]
 829 00c2 D0E7     		b	.L91
 830              	.L94:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 831              		.loc 1 1126 0
 832 00c4 0F4B     		ldr	r3, .L108+44
 833 00c6 4FF08052 		mov	r2, #268435456
 834 00ca 1A60     		str	r2, [r3]
 835              		.syntax unified
 836              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 837 00cc BFF34F8F 		dsb
 838              	@ 0 "" 2
 839              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 840 00d0 BFF36F8F 		isb
 841              	@ 0 "" 2
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 842              		.loc 1 1133 0
 843              		.thumb
 844              		.syntax unified
 845 00d4 70BD     		pop	{r4, r5, r6, pc}
 846              	.LVL89:
 847              	.L109:
 848 00d6 00BF     		.align	2
 849              	.L108:
 850 00d8 00000000 		.word	.LANCHOR1
 851 00dc 00000000 		.word	.LANCHOR8
 852 00e0 00000000 		.word	.LANCHOR14
 853 00e4 00000000 		.word	.LANCHOR7
 854 00e8 00000000 		.word	.LANCHOR5
 855 00ec 00000000 		.word	.LANCHOR6
 856 00f0 00000000 		.word	.LANCHOR13
 857 00f4 00000000 		.word	.LANCHOR2
 858 00f8 00000000 		.word	.LANCHOR16
 859 00fc 00000000 		.word	.LANCHOR12
 860 0100 00000000 		.word	.LANCHOR15
 861 0104 04ED00E0 		.word	-536810236
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 107


 862              		.cfi_endproc
 863              	.LFE8:
 865              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 866              		.align	1
 867              		.p2align 2,,3
 868              		.global	uxTaskPriorityGet
 869              		.syntax unified
 870              		.thumb
 871              		.thumb_func
 872              		.fpu fpv4-sp-d16
 874              	uxTaskPriorityGet:
 875              	.LFB10:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 876              		.loc 1 1341 0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 0
 879              		@ frame_needed = 0, uses_anonymous_args = 0
 880              	.LVL90:
 881 0000 10B5     		push	{r4, lr}
 882              	.LCFI6:
 883              		.cfi_def_cfa_offset 8
 884              		.cfi_offset 4, -8
 885              		.cfi_offset 14, -4
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 886              		.loc 1 1341 0
 887 0002 0446     		mov	r4, r0
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 888              		.loc 1 1345 0
 889 0004 FFF7FEFF 		bl	vPortEnterCritical
 890              	.LVL91:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 891              		.loc 1 1349 0
 892 0008 0CB9     		cbnz	r4, .L111
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 893              		.loc 1 1349 0 is_stmt 0 discriminator 1
 894 000a 034B     		ldr	r3, .L113
 895 000c 1C68     		ldr	r4, [r3]
 896              	.LVL92:
 897              	.L111:
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 898              		.loc 1 1350 0 is_stmt 1 discriminator 4
 899 000e E46A     		ldr	r4, [r4, #44]
 900              	.LVL93:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 901              		.loc 1 1352 0 discriminator 4
 902 0010 FFF7FEFF 		bl	vPortExitCritical
 903              	.LVL94:
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 904              		.loc 1 1355 0 discriminator 4
 905 0014 2046     		mov	r0, r4
 906 0016 10BD     		pop	{r4, pc}
 907              	.LVL95:
 908              	.L114:
 909              		.align	2
 910              	.L113:
 911 0018 00000000 		.word	.LANCHOR1
 912              		.cfi_endproc
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 108


 913              	.LFE10:
 915              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 916              		.align	1
 917              		.p2align 2,,3
 918              		.global	uxTaskPriorityGetFromISR
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 922              		.fpu fpv4-sp-d16
 924              	uxTaskPriorityGetFromISR:
 925              	.LFB11:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 926              		.loc 1 1363 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 0
 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930              	.LVL96:
 931 0000 10B5     		push	{r4, lr}
 932              	.LCFI7:
 933              		.cfi_def_cfa_offset 8
 934              		.cfi_offset 4, -8
 935              		.cfi_offset 14, -4
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 936              		.loc 1 1363 0
 937 0002 0446     		mov	r4, r0
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 938              		.loc 1 1383 0
 939 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 940              	.LVL97:
 941              	.LBB202:
 942              	.LBB203:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 943              		.loc 2 253 0
 944              		.syntax unified
 945              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 946 0008 EFF31183 			mrs r3, basepri											
 947 000c 4FF05002 		mov r2, #80												
 948 0010 82F31188 		msr basepri, r2											
 949 0014 BFF36F8F 		isb														
 950 0018 BFF34F8F 		dsb														
 951              	
 952              	@ 0 "" 2
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 109


 953              		.thumb
 954              		.syntax unified
 955              	.LBE203:
 956              	.LBE202:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 957              		.loc 1 1389 0
 958 001c 0CB9     		cbnz	r4, .L116
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 959              		.loc 1 1389 0 is_stmt 0 discriminator 1
 960 001e 034A     		ldr	r2, .L118
 961 0020 1468     		ldr	r4, [r2]
 962              	.LVL98:
 963              	.L116:
 964              	.LBB204:
 965              	.LBB205:
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 966              		.loc 2 271 0 is_stmt 1 discriminator 4
 967              		.syntax unified
 968              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 969 0022 83F31188 			msr basepri, r3	
 970              	@ 0 "" 2
 971              	.LVL99:
 972              		.thumb
 973              		.syntax unified
 974              	.LBE205:
 975              	.LBE204:
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976              		.loc 1 1395 0 discriminator 4
 977 0026 E06A     		ldr	r0, [r4, #44]
 978 0028 10BD     		pop	{r4, pc}
 979              	.LVL100:
 980              	.L119:
 981 002a 00BF     		.align	2
 982              	.L118:
 983 002c 00000000 		.word	.LANCHOR1
 984              		.cfi_endproc
 985              	.LFE11:
 987              		.section	.text.vTaskPrioritySet,"ax",%progbits
 988              		.align	1
 989              		.p2align 2,,3
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 110


 990              		.global	vTaskPrioritySet
 991              		.syntax unified
 992              		.thumb
 993              		.thumb_func
 994              		.fpu fpv4-sp-d16
 996              	vTaskPrioritySet:
 997              	.LFB12:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 998              		.loc 1 1403 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 0
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 1002              	.LVL101:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1003              		.loc 1 1408 0
 1004 0000 0629     		cmp	r1, #6
 1005 0002 08D9     		bls	.L121
 1006              	.LBB206:
 1007              	.LBB207:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1008              		.loc 2 237 0
 1009              		.syntax unified
 1010              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1011 0004 4FF05003 			mov r3, #80												
 1012 0008 83F31188 		msr basepri, r3											
 1013 000c BFF36F8F 		isb														
 1014 0010 BFF34F8F 		dsb														
 1015              	
 1016              	@ 0 "" 2
 1017              	.LVL102:
 1018              		.thumb
 1019              		.syntax unified
 1020              	.L122:
 1021 0014 FEE7     		b	.L122
 1022              	.L121:
 1023              	.LBE207:
 1024              	.LBE206:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1025              		.loc 1 1403 0
 1026 0016 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1027              	.LCFI8:
 1028              		.cfi_def_cfa_offset 24
 1029              		.cfi_offset 4, -24
 1030              		.cfi_offset 5, -20
 1031              		.cfi_offset 6, -16
 1032              		.cfi_offset 7, -12
 1033              		.cfi_offset 8, -8
 1034              		.cfi_offset 14, -4
 1035 001a 0446     		mov	r4, r0
 1036 001c 0D46     		mov	r5, r1
 1037              	.LVL103:
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1038              		.loc 1 1420 0
 1039 001e FFF7FEFF 		bl	vPortEnterCritical
 1040              	.LVL104:
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1041              		.loc 1 1424 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 111


 1042 0022 0CB9     		cbnz	r4, .L123
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1043              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1044 0024 274B     		ldr	r3, .L142
 1045 0026 1C68     		ldr	r4, [r3]
 1046              	.LVL105:
 1047              	.L123:
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1048              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1049 0028 636C     		ldr	r3, [r4, #68]
 1050              	.LVL106:
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1051              		.loc 1 1438 0 discriminator 4
 1052 002a 9D42     		cmp	r5, r3
 1053 002c 25D0     		beq	.L125
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1054              		.loc 1 1444 0
 1055 002e 254A     		ldr	r2, .L142
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1056              		.loc 1 1442 0
 1057 0030 43D9     		bls	.L126
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1058              		.loc 1 1444 0
 1059 0032 1168     		ldr	r1, [r2]
 1060 0034 A142     		cmp	r1, r4
 1061 0036 3ED0     		beq	.L133
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1062              		.loc 1 1449 0
 1063 0038 1268     		ldr	r2, [r2]
 1064 003a D66A     		ldr	r6, [r2, #44]
 1065 003c AE42     		cmp	r6, r5
 1066 003e 8CBF     		ite	hi
 1067 0040 0026     		movhi	r6, #0
 1068 0042 0126     		movls	r6, #1
 1069              	.L127:
 1070              	.LVL107:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1071              		.loc 1 1482 0
 1072 0044 E76A     		ldr	r7, [r4, #44]
 1073              	.LVL108:
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1074              		.loc 1 1498 0
 1075 0046 6564     		str	r5, [r4, #68]
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1076              		.loc 1 1488 0
 1077 0048 BB42     		cmp	r3, r7
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1078              		.loc 1 1508 0
 1079 004a A369     		ldr	r3, [r4, #24]
 1080              	.LVL109:
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1081              		.loc 1 1490 0
 1082 004c 08BF     		it	eq
 1083 004e E562     		streq	r5, [r4, #44]
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1084              		.loc 1 1508 0
 1085 0050 002B     		cmp	r3, #0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 112


1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1086              		.loc 1 1510 0
 1087 0052 A4BF     		itt	ge
 1088 0054 C5F10705 		rsbge	r5, r5, #7
 1089              	.LVL110:
 1090 0058 A561     		strge	r5, [r4, #24]
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1091              		.loc 1 1521 0
 1092 005a 1B4D     		ldr	r5, .L142+4
 1093 005c 6269     		ldr	r2, [r4, #20]
 1094 005e 1423     		movs	r3, #20
 1095 0060 03FB0753 		mla	r3, r3, r7, r5
 1096 0064 9A42     		cmp	r2, r3
 1097 0066 0CD0     		beq	.L141
 1098              	.LVL111:
 1099              	.L130:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1100              		.loc 1 1544 0
 1101 0068 3EB1     		cbz	r6, .L125
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1102              		.loc 1 1546 0
 1103 006a 184B     		ldr	r3, .L142+8
 1104 006c 4FF08052 		mov	r2, #268435456
 1105 0070 1A60     		str	r2, [r3]
 1106              		.syntax unified
 1107              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1108 0072 BFF34F8F 		dsb
 1109              	@ 0 "" 2
 1110              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1111 0076 BFF36F8F 		isb
 1112              	@ 0 "" 2
 1113              	.LVL112:
 1114              		.thumb
 1115              		.syntax unified
 1116              	.L125:
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1117              		.loc 1 1559 0
 1118 007a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 1119              	.LCFI9:
 1120              		.cfi_remember_state
 1121              		.cfi_restore 14
 1122              		.cfi_restore 8
 1123              		.cfi_restore 7
 1124              		.cfi_restore 6
 1125              		.cfi_restore 5
 1126              		.cfi_restore 4
 1127              		.cfi_def_cfa_offset 0
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1128              		.loc 1 1558 0
 1129 007e FFF7FEBF 		b	vPortExitCritical
 1130              	.LVL113:
 1131              	.L141:
 1132              	.LCFI10:
 1133              		.cfi_restore_state
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1134              		.loc 1 1526 0
 1135 0082 04F10408 		add	r8, r4, #4
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 113


 1136 0086 4046     		mov	r0, r8
 1137 0088 FFF7FEFF 		bl	uxListRemove
 1138              	.LVL114:
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1139              		.loc 1 1531 0
 1140 008c 104B     		ldr	r3, .L142+12
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1141              		.loc 1 1526 0
 1142 008e 28B9     		cbnz	r0, .L131
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1143              		.loc 1 1531 0
 1144 0090 1A68     		ldr	r2, [r3]
 1145 0092 0120     		movs	r0, #1
 1146 0094 B840     		lsls	r0, r0, r7
 1147 0096 22EA0002 		bic	r2, r2, r0
 1148 009a 1A60     		str	r2, [r3]
 1149              	.L131:
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1150              		.loc 1 1537 0
 1151 009c E46A     		ldr	r4, [r4, #44]
 1152              	.LVL115:
 1153 009e 1F68     		ldr	r7, [r3]
 1154              	.LVL116:
 1155 00a0 0122     		movs	r2, #1
 1156 00a2 A240     		lsls	r2, r2, r4
 1157 00a4 1420     		movs	r0, #20
 1158 00a6 3A43     		orrs	r2, r2, r7
 1159 00a8 4146     		mov	r1, r8
 1160 00aa 00FB0450 		mla	r0, r0, r4, r5
 1161 00ae 1A60     		str	r2, [r3]
 1162 00b0 FFF7FEFF 		bl	vListInsertEnd
 1163              	.LVL117:
 1164 00b4 D8E7     		b	.L130
 1165              	.LVL118:
 1166              	.L133:
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1167              		.loc 1 1406 0
 1168 00b6 0026     		movs	r6, #0
 1169 00b8 C4E7     		b	.L127
 1170              	.L126:
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1171              		.loc 1 1465 0
 1172 00ba 1668     		ldr	r6, [r2]
 1173 00bc 321B     		subs	r2, r6, r4
 1174 00be 5642     		rsbs	r6, r2, #0
 1175 00c0 5641     		adcs	r6, r6, r2
 1176 00c2 BFE7     		b	.L127
 1177              	.L143:
 1178              		.align	2
 1179              	.L142:
 1180 00c4 00000000 		.word	.LANCHOR1
 1181 00c8 00000000 		.word	.LANCHOR8
 1182 00cc 04ED00E0 		.word	-536810236
 1183 00d0 00000000 		.word	.LANCHOR2
 1184              		.cfi_endproc
 1185              	.LFE12:
 1187              		.section	.text.vTaskSuspend,"ax",%progbits
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 114


 1188              		.align	1
 1189              		.p2align 2,,3
 1190              		.global	vTaskSuspend
 1191              		.syntax unified
 1192              		.thumb
 1193              		.thumb_func
 1194              		.fpu fpv4-sp-d16
 1196              	vTaskSuspend:
 1197              	.LFB13:
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1198              		.loc 1 1567 0
 1199              		.cfi_startproc
 1200              		@ args = 0, pretend = 0, frame = 0
 1201              		@ frame_needed = 0, uses_anonymous_args = 0
 1202              	.LVL119:
 1203 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1204              	.LCFI11:
 1205              		.cfi_def_cfa_offset 24
 1206              		.cfi_offset 3, -24
 1207              		.cfi_offset 4, -20
 1208              		.cfi_offset 5, -16
 1209              		.cfi_offset 6, -12
 1210              		.cfi_offset 7, -8
 1211              		.cfi_offset 14, -4
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1212              		.loc 1 1567 0
 1213 0002 0546     		mov	r5, r0
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1214              		.loc 1 1574 0
 1215 0004 4A4C     		ldr	r4, .L174
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1216              		.loc 1 1570 0
 1217 0006 FFF7FEFF 		bl	vPortEnterCritical
 1218              	.LVL120:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1219              		.loc 1 1574 0
 1220 000a 002D     		cmp	r5, #0
 1221 000c 43D0     		beq	.L167
 1222              	.LVL121:
 1223              	.L145:
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1224              		.loc 1 1580 0 discriminator 4
 1225 000e 2E1D     		adds	r6, r5, #4
 1226 0010 3046     		mov	r0, r6
 1227 0012 FFF7FEFF 		bl	uxListRemove
 1228              	.LVL122:
 1229 0016 30B9     		cbnz	r0, .L146
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1230              		.loc 1 1582 0
 1231 0018 E96A     		ldr	r1, [r5, #44]
 1232 001a 464B     		ldr	r3, .L174+4
 1233 001c 01EB8102 		add	r2, r1, r1, lsl #2
 1234 0020 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1235 0024 0BB3     		cbz	r3, .L170
 1236              	.L146:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1237              		.loc 1 1590 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 115


 1238 0026 AB6A     		ldr	r3, [r5, #40]
 1239 0028 1BB1     		cbz	r3, .L147
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1240              		.loc 1 1592 0
 1241 002a 05F11800 		add	r0, r5, #24
 1242 002e FFF7FEFF 		bl	uxListRemove
 1243              	.LVL123:
 1244              	.L147:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1245              		.loc 1 1603 0
 1246 0032 414F     		ldr	r7, .L174+8
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1247              		.loc 1 1599 0
 1248 0034 4148     		ldr	r0, .L174+12
 1249 0036 3146     		mov	r1, r6
 1250 0038 FFF7FEFF 		bl	vListInsertEnd
 1251              	.LVL124:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1252              		.loc 1 1601 0
 1253 003c FFF7FEFF 		bl	vPortExitCritical
 1254              	.LVL125:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1255              		.loc 1 1603 0
 1256 0040 3B68     		ldr	r3, [r7]
 1257 0042 D3B9     		cbnz	r3, .L171
 1258              	.L148:
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1259              		.loc 1 1618 0
 1260 0044 2368     		ldr	r3, [r4]
 1261 0046 AB42     		cmp	r3, r5
 1262 0048 00D0     		beq	.L172
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1263              		.loc 1 1649 0
 1264 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1265              	.LVL126:
 1266              	.L172:
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1267              		.loc 1 1620 0
 1268 004c 3B68     		ldr	r3, [r7]
 1269 004e 23B3     		cbz	r3, .L152
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1270              		.loc 1 1623 0
 1271 0050 3B4B     		ldr	r3, .L174+16
 1272 0052 1B68     		ldr	r3, [r3]
 1273 0054 002B     		cmp	r3, #0
 1274 0056 56D0     		beq	.L153
 1275              	.LBB228:
 1276              	.LBB229:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1277              		.loc 2 237 0
 1278              		.syntax unified
 1279              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1280 0058 4FF05003 			mov r3, #80												
 1281 005c 83F31188 		msr basepri, r3											
 1282 0060 BFF36F8F 		isb														
 1283 0064 BFF34F8F 		dsb														
 1284              	
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 116


 1285              	@ 0 "" 2
 1286              	.LVL127:
 1287              		.thumb
 1288              		.syntax unified
 1289              	.L154:
 1290 0068 FEE7     		b	.L154
 1291              	.L170:
 1292              	.LBE229:
 1293              	.LBE228:
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1294              		.loc 1 1582 0 discriminator 1
 1295 006a 3648     		ldr	r0, .L174+20
 1296 006c 0122     		movs	r2, #1
 1297 006e 0368     		ldr	r3, [r0]
 1298 0070 8A40     		lsls	r2, r2, r1
 1299 0072 23EA0203 		bic	r3, r3, r2
 1300 0076 0360     		str	r3, [r0]
 1301 0078 D5E7     		b	.L146
 1302              	.L171:
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1303              		.loc 1 1607 0
 1304 007a FFF7FEFF 		bl	vPortEnterCritical
 1305              	.LVL128:
 1306              	.LBB230:
 1307              	.LBB231:
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1308              		.loc 1 3639 0
 1309 007e 324B     		ldr	r3, .L174+24
 1310 0080 1A68     		ldr	r2, [r3]
 1311 0082 1268     		ldr	r2, [r2]
 1312 0084 002A     		cmp	r2, #0
 1313 0086 47D1     		bne	.L149
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1314              		.loc 1 3645 0
 1315 0088 304B     		ldr	r3, .L174+28
 1316 008a 4FF0FF32 		mov	r2, #-1
 1317 008e 1A60     		str	r2, [r3]
 1318              	.L150:
 1319              	.LBE231:
 1320              	.LBE230:
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1321              		.loc 1 1611 0
 1322 0090 FFF7FEFF 		bl	vPortExitCritical
 1323              	.LVL129:
 1324 0094 D6E7     		b	.L148
 1325              	.LVL130:
 1326              	.L167:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1327              		.loc 1 1574 0 discriminator 1
 1328 0096 2568     		ldr	r5, [r4]
 1329              	.LVL131:
 1330 0098 B9E7     		b	.L145
 1331              	.LVL132:
 1332              	.L152:
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1333              		.loc 1 1631 0
 1334 009a 2D4A     		ldr	r2, .L174+32
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 117


 1335 009c 2749     		ldr	r1, .L174+12
 1336 009e 1268     		ldr	r2, [r2]
 1337 00a0 0968     		ldr	r1, [r1]
 1338 00a2 9142     		cmp	r1, r2
 1339 00a4 2DD0     		beq	.L169
 1340              	.LBB235:
 1341              	.LBB236:
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1342              		.loc 1 2763 0
 1343 00a6 264B     		ldr	r3, .L174+16
 1344 00a8 1B68     		ldr	r3, [r3]
 1345 00aa 002B     		cmp	r3, #0
 1346 00ac 3BD1     		bne	.L173
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 1347              		.loc 1 2771 0
 1348 00ae 2949     		ldr	r1, .L174+36
 1349              	.LBB237:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 1350              		.loc 1 2806 0
 1351 00b0 244A     		ldr	r2, .L174+20
 1352              	.LBE237:
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 1353              		.loc 1 2771 0
 1354 00b2 0B60     		str	r3, [r1]
 1355              	.LBB241:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 1356              		.loc 1 2806 0
 1357 00b4 1368     		ldr	r3, [r2]
 1358              	.LVL133:
 1359              	.LBB238:
 1360              	.LBB239:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 1361              		.loc 2 176 0
 1362              		.syntax unified
 1363              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1364 00b6 B3FA83F3 		clz r3, r3
 1365              	@ 0 "" 2
 1366              	.LVL134:
 1367              		.thumb
 1368              		.syntax unified
 1369 00ba DBB2     		uxtb	r3, r3
 1370              	.LBE239:
 1371              	.LBE238:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 1372              		.loc 1 2806 0
 1373 00bc C3F11F03 		rsb	r3, r3, #31
 1374              	.LVL135:
 1375 00c0 03EB8302 		add	r2, r3, r3, lsl #2
 1376 00c4 1B49     		ldr	r1, .L174+4
 1377 00c6 51F82220 		ldr	r2, [r1, r2, lsl #2]
 1378 00ca 42B9     		cbnz	r2, .L157
 1379              	.LBE241:
 1380              	.LBB242:
 1381              	.LBB243:
 1382              	.LBB244:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1383              		.loc 2 237 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 118


 1384              		.syntax unified
 1385              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1386 00cc 4FF05003 			mov r3, #80												
 1387 00d0 83F31188 		msr basepri, r3											
 1388 00d4 BFF36F8F 		isb														
 1389 00d8 BFF34F8F 		dsb														
 1390              	
 1391              	@ 0 "" 2
 1392              	.LVL136:
 1393              		.thumb
 1394              		.syntax unified
 1395              	.L158:
 1396 00dc FEE7     		b	.L158
 1397              	.LVL137:
 1398              	.L157:
 1399              	.LBE244:
 1400              	.LBE243:
 1401              	.LBE242:
 1402              	.LBB245:
 1403              	.LBB240:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 1404              		.loc 1 2806 0
 1405 00de 1422     		movs	r2, #20
 1406 00e0 02FB03F2 		mul	r2, r2, r3
 1407 00e4 8818     		adds	r0, r1, r2
 1408 00e6 0832     		adds	r2, r2, #8
 1409 00e8 4568     		ldr	r5, [r0, #4]
 1410              	.LVL138:
 1411 00ea 6D68     		ldr	r5, [r5, #4]
 1412 00ec 4560     		str	r5, [r0, #4]
 1413 00ee 0A44     		add	r2, r2, r1
 1414 00f0 9542     		cmp	r5, r2
 1415 00f2 04BF     		itt	eq
 1416 00f4 6A68     		ldreq	r2, [r5, #4]
 1417 00f6 4260     		streq	r2, [r0, #4]
 1418 00f8 1422     		movs	r2, #20
 1419 00fa 02FB0313 		mla	r3, r2, r3, r1
 1420              	.LVL139:
 1421 00fe 5B68     		ldr	r3, [r3, #4]
 1422 0100 DB68     		ldr	r3, [r3, #12]
 1423              	.L169:
 1424 0102 2360     		str	r3, [r4]
 1425              	.LBE240:
 1426              	.LBE245:
 1427              	.LBE236:
 1428              	.LBE235:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1429              		.loc 1 1649 0
 1430 0104 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1431              	.LVL140:
 1432              	.L153:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1433              		.loc 1 1624 0
 1434 0106 144B     		ldr	r3, .L174+40
 1435 0108 4FF08052 		mov	r2, #268435456
 1436 010c 1A60     		str	r2, [r3]
 1437              		.syntax unified
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 119


 1438              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1439 010e BFF34F8F 		dsb
 1440              	@ 0 "" 2
 1441              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1442 0112 BFF36F8F 		isb
 1443              	@ 0 "" 2
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1444              		.loc 1 1649 0
 1445              		.thumb
 1446              		.syntax unified
 1447 0116 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1448              	.LVL141:
 1449              	.L149:
 1450              	.LBB247:
 1451              	.LBB234:
 1452              	.LBB232:
 1453              	.LBB233:
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 1454              		.loc 1 3653 0
 1455 0118 1A68     		ldr	r2, [r3]
 1456              	.LVL142:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1457              		.loc 1 3654 0
 1458 011a 0C4B     		ldr	r3, .L174+28
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 1459              		.loc 1 3653 0
 1460 011c D268     		ldr	r2, [r2, #12]
 1461              	.LVL143:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1462              		.loc 1 3654 0
 1463 011e D268     		ldr	r2, [r2, #12]
 1464              	.LVL144:
 1465 0120 5268     		ldr	r2, [r2, #4]
 1466              	.LVL145:
 1467 0122 1A60     		str	r2, [r3]
 1468 0124 B4E7     		b	.L150
 1469              	.L173:
 1470              	.LBE233:
 1471              	.LBE232:
 1472              	.LBE234:
 1473              	.LBE247:
 1474              	.LBB248:
 1475              	.LBB246:
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1476              		.loc 1 2767 0
 1477 0126 0B4B     		ldr	r3, .L174+36
 1478 0128 0122     		movs	r2, #1
 1479 012a 1A60     		str	r2, [r3]
 1480              	.LBE246:
 1481              	.LBE248:
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1482              		.loc 1 1649 0
 1483 012c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1484              	.LVL146:
 1485              	.L175:
 1486 012e 00BF     		.align	2
 1487              	.L174:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 120


 1488 0130 00000000 		.word	.LANCHOR1
 1489 0134 00000000 		.word	.LANCHOR8
 1490 0138 00000000 		.word	.LANCHOR13
 1491 013c 00000000 		.word	.LANCHOR3
 1492 0140 00000000 		.word	.LANCHOR16
 1493 0144 00000000 		.word	.LANCHOR2
 1494 0148 00000000 		.word	.LANCHOR5
 1495 014c 00000000 		.word	.LANCHOR6
 1496 0150 00000000 		.word	.LANCHOR7
 1497 0154 00000000 		.word	.LANCHOR17
 1498 0158 04ED00E0 		.word	-536810236
 1499              		.cfi_endproc
 1500              	.LFE13:
 1502              		.section	.text.vTaskResume,"ax",%progbits
 1503              		.align	1
 1504              		.p2align 2,,3
 1505              		.global	vTaskResume
 1506              		.syntax unified
 1507              		.thumb
 1508              		.thumb_func
 1509              		.fpu fpv4-sp-d16
 1511              	vTaskResume:
 1512              	.LFB15:
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1513              		.loc 1 1703 0
 1514              		.cfi_startproc
 1515              		@ args = 0, pretend = 0, frame = 0
 1516              		@ frame_needed = 0, uses_anonymous_args = 0
 1517              	.LVL147:
 1518 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1519              	.LCFI12:
 1520              		.cfi_def_cfa_offset 24
 1521              		.cfi_offset 3, -24
 1522              		.cfi_offset 4, -20
 1523              		.cfi_offset 5, -16
 1524              		.cfi_offset 6, -12
 1525              		.cfi_offset 7, -8
 1526              		.cfi_offset 14, -4
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1527              		.loc 1 1707 0
 1528 0002 70B1     		cbz	r0, .L184
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1529              		.loc 1 1711 0 discriminator 1
 1530 0004 204D     		ldr	r5, .L186
 1531 0006 2B68     		ldr	r3, [r5]
 1532 0008 8342     		cmp	r3, r0
 1533 000a 13D0     		beq	.L176
 1534 000c 0446     		mov	r4, r0
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1535              		.loc 1 1713 0
 1536 000e FFF7FEFF 		bl	vPortEnterCritical
 1537              	.LVL148:
 1538              	.LBB249:
 1539              	.LBB250:
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1540              		.loc 1 1668 0
 1541 0012 1E4B     		ldr	r3, .L186+4
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 121


 1542 0014 6269     		ldr	r2, [r4, #20]
 1543 0016 9A42     		cmp	r2, r3
 1544 0018 0DD0     		beq	.L185
 1545              	.LVL149:
 1546              	.L181:
 1547              	.LBE250:
 1548              	.LBE249:
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1549              		.loc 1 1748 0
 1550 001a BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 1551              	.LCFI13:
 1552              		.cfi_remember_state
 1553              		.cfi_restore 14
 1554              		.cfi_restore 7
 1555              		.cfi_restore 6
 1556              		.cfi_restore 5
 1557              		.cfi_restore 4
 1558              		.cfi_restore 3
 1559              		.cfi_def_cfa_offset 0
 1560              	.LVL150:
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1561              		.loc 1 1742 0
 1562 001e FFF7FEBF 		b	vPortExitCritical
 1563              	.LVL151:
 1564              	.L184:
 1565              	.LCFI14:
 1566              		.cfi_restore_state
 1567              	.LBB252:
 1568              	.LBB253:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1569              		.loc 2 237 0
 1570              		.syntax unified
 1571              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1572 0022 4FF05003 			mov r3, #80												
 1573 0026 83F31188 		msr basepri, r3											
 1574 002a BFF36F8F 		isb														
 1575 002e BFF34F8F 		dsb														
 1576              	
 1577              	@ 0 "" 2
 1578              	.LVL152:
 1579              		.thumb
 1580              		.syntax unified
 1581              	.L178:
 1582 0032 FEE7     		b	.L178
 1583              	.L176:
 1584              	.LBE253:
 1585              	.LBE252:
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1586              		.loc 1 1748 0
 1587 0034 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1588              	.LVL153:
 1589              	.L185:
 1590              	.LBB254:
 1591              	.LBB251:
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1592              		.loc 1 1671 0
 1593 0036 A36A     		ldr	r3, [r4, #40]
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 122


 1594 0038 154A     		ldr	r2, .L186+8
 1595 003a 9342     		cmp	r3, r2
 1596 003c EDD0     		beq	.L181
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1597              		.loc 1 1675 0
 1598 003e 002B     		cmp	r3, #0
 1599 0040 EBD1     		bne	.L181
 1600              	.LVL154:
 1601              	.LBE251:
 1602              	.LBE254:
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1603              		.loc 1 1721 0
 1604 0042 271D     		adds	r7, r4, #4
 1605 0044 3846     		mov	r0, r7
 1606 0046 FFF7FEFF 		bl	uxListRemove
 1607              	.LVL155:
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1608              		.loc 1 1722 0
 1609 004a 124A     		ldr	r2, .L186+12
 1610 004c E66A     		ldr	r6, [r4, #44]
 1611 004e D2F800C0 		ldr	ip, [r2]
 1612 0052 1148     		ldr	r0, .L186+16
 1613 0054 0123     		movs	r3, #1
 1614 0056 3946     		mov	r1, r7
 1615 0058 B340     		lsls	r3, r3, r6
 1616 005a 1427     		movs	r7, #20
 1617 005c 43EA0C03 		orr	r3, r3, ip
 1618 0060 07FB0600 		mla	r0, r7, r6, r0
 1619 0064 1360     		str	r3, [r2]
 1620 0066 FFF7FEFF 		bl	vListInsertEnd
 1621              	.LVL156:
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1622              		.loc 1 1725 0
 1623 006a 2B68     		ldr	r3, [r5]
 1624 006c E26A     		ldr	r2, [r4, #44]
 1625 006e DB6A     		ldr	r3, [r3, #44]
 1626 0070 9A42     		cmp	r2, r3
 1627 0072 D2D3     		bcc	.L181
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1628              		.loc 1 1730 0
 1629 0074 094B     		ldr	r3, .L186+20
 1630 0076 4FF08052 		mov	r2, #268435456
 1631 007a 1A60     		str	r2, [r3]
 1632              		.syntax unified
 1633              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1634 007c BFF34F8F 		dsb
 1635              	@ 0 "" 2
 1636              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1637 0080 BFF36F8F 		isb
 1638              	@ 0 "" 2
 1639              		.thumb
 1640              		.syntax unified
 1641 0084 C9E7     		b	.L181
 1642              	.L187:
 1643 0086 00BF     		.align	2
 1644              	.L186:
 1645 0088 00000000 		.word	.LANCHOR1
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 123


 1646 008c 00000000 		.word	.LANCHOR3
 1647 0090 00000000 		.word	.LANCHOR11
 1648 0094 00000000 		.word	.LANCHOR2
 1649 0098 00000000 		.word	.LANCHOR8
 1650 009c 04ED00E0 		.word	-536810236
 1651              		.cfi_endproc
 1652              	.LFE15:
 1654              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1655              		.align	1
 1656              		.p2align 2,,3
 1657              		.global	xTaskResumeFromISR
 1658              		.syntax unified
 1659              		.thumb
 1660              		.thumb_func
 1661              		.fpu fpv4-sp-d16
 1663              	xTaskResumeFromISR:
 1664              	.LFB16:
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1665              		.loc 1 1757 0
 1666              		.cfi_startproc
 1667              		@ args = 0, pretend = 0, frame = 0
 1668              		@ frame_needed = 0, uses_anonymous_args = 0
 1669              	.LVL157:
 1670 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1671              	.LCFI15:
 1672              		.cfi_def_cfa_offset 24
 1673              		.cfi_offset 3, -24
 1674              		.cfi_offset 4, -20
 1675              		.cfi_offset 5, -16
 1676              		.cfi_offset 6, -12
 1677              		.cfi_offset 7, -8
 1678              		.cfi_offset 14, -4
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1679              		.loc 1 1762 0
 1680 0002 A8B1     		cbz	r0, .L197
 1681 0004 0546     		mov	r5, r0
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1682              		.loc 1 1780 0
 1683 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1684              	.LVL158:
 1685              	.LBB255:
 1686              	.LBB256:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1687              		.loc 2 253 0
 1688              		.syntax unified
 1689              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1690 000a EFF31186 			mrs r6, basepri											
 1691 000e 4FF05003 		mov r3, #80												
 1692 0012 83F31188 		msr basepri, r3											
 1693 0016 BFF36F8F 		isb														
 1694 001a BFF34F8F 		dsb														
 1695              	
 1696              	@ 0 "" 2
 1697              	.LVL159:
 1698              		.thumb
 1699              		.syntax unified
 1700              	.LBE256:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 124


 1701              	.LBE255:
 1702              	.LBB257:
 1703              	.LBB258:
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1704              		.loc 1 1668 0
 1705 001e 1E4B     		ldr	r3, .L199
 1706 0020 6A69     		ldr	r2, [r5, #20]
 1707 0022 9A42     		cmp	r2, r3
 1708 0024 0DD0     		beq	.L198
 1709              	.L195:
 1710              	.LBE258:
 1711              	.LBE257:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1712              		.loc 1 1758 0
 1713 0026 0024     		movs	r4, #0
 1714              	.LVL160:
 1715              	.L191:
 1716              	.LBB260:
 1717              	.LBB261:
 1718              		.loc 2 271 0
 1719              		.syntax unified
 1720              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1721 0028 86F31188 			msr basepri, r6	
 1722              	@ 0 "" 2
 1723              	.LVL161:
 1724              		.thumb
 1725              		.syntax unified
 1726              	.LBE261:
 1727              	.LBE260:
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1728              		.loc 1 1821 0
 1729 002c 2046     		mov	r0, r4
 1730 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1731              	.LVL162:
 1732              	.L197:
 1733              	.LBB262:
 1734              	.LBB263:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1735              		.loc 2 237 0
 1736              		.syntax unified
 1737              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1738 0030 4FF05003 			mov r3, #80												
 1739 0034 83F31188 		msr basepri, r3											
 1740 0038 BFF36F8F 		isb														
 1741 003c BFF34F8F 		dsb														
 1742              	
 1743              	@ 0 "" 2
 1744              	.LVL163:
 1745              		.thumb
 1746              		.syntax unified
 1747              	.L190:
 1748 0040 FEE7     		b	.L190
 1749              	.LVL164:
 1750              	.L198:
 1751              	.LBE263:
 1752              	.LBE262:
 1753              	.LBB264:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 125


 1754              	.LBB259:
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1755              		.loc 1 1671 0
 1756 0042 AC6A     		ldr	r4, [r5, #40]
 1757 0044 1548     		ldr	r0, .L199+4
 1758 0046 8442     		cmp	r4, r0
 1759 0048 EDD0     		beq	.L195
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1760              		.loc 1 1675 0
 1761 004a 002C     		cmp	r4, #0
 1762 004c EBD1     		bne	.L195
 1763              	.LVL165:
 1764              	.LBE259:
 1765              	.LBE264:
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1766              		.loc 1 1789 0
 1767 004e 144B     		ldr	r3, .L199+8
 1768 0050 1B68     		ldr	r3, [r3]
 1769 0052 E3B9     		cbnz	r3, .L192
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1770              		.loc 1 1793 0
 1771 0054 134B     		ldr	r3, .L199+12
 1772 0056 EC6A     		ldr	r4, [r5, #44]
 1773 0058 1B68     		ldr	r3, [r3]
 1774 005a DB6A     		ldr	r3, [r3, #44]
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1775              		.loc 1 1802 0
 1776 005c 2F1D     		adds	r7, r5, #4
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1777              		.loc 1 1793 0
 1778 005e 9C42     		cmp	r4, r3
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1779              		.loc 1 1802 0
 1780 0060 3846     		mov	r0, r7
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1781              		.loc 1 1793 0
 1782 0062 34BF     		ite	cc
 1783 0064 0024     		movcc	r4, #0
 1784 0066 0124     		movcs	r4, #1
 1785              	.LVL166:
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1786              		.loc 1 1802 0
 1787 0068 FFF7FEFF 		bl	uxListRemove
 1788              	.LVL167:
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1789              		.loc 1 1803 0
 1790 006c 0E4A     		ldr	r2, .L199+16
 1791 006e ED6A     		ldr	r5, [r5, #44]
 1792              	.LVL168:
 1793 0070 0E4B     		ldr	r3, .L199+20
 1794 0072 D2F800C0 		ldr	ip, [r2]
 1795 0076 1420     		movs	r0, #20
 1796 0078 00FB0530 		mla	r0, r0, r5, r3
 1797 007c 0123     		movs	r3, #1
 1798 007e AB40     		lsls	r3, r3, r5
 1799 0080 43EA0C03 		orr	r3, r3, ip
 1800 0084 3946     		mov	r1, r7
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 126


 1801 0086 1360     		str	r3, [r2]
 1802 0088 FFF7FEFF 		bl	vListInsertEnd
 1803              	.LVL169:
 1804 008c CCE7     		b	.L191
 1805              	.LVL170:
 1806              	.L192:
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1807              		.loc 1 1810 0
 1808 008e 05F11801 		add	r1, r5, #24
 1809 0092 FFF7FEFF 		bl	vListInsertEnd
 1810              	.LVL171:
 1811 0096 C7E7     		b	.L191
 1812              	.L200:
 1813              		.align	2
 1814              	.L199:
 1815 0098 00000000 		.word	.LANCHOR3
 1816 009c 00000000 		.word	.LANCHOR11
 1817 00a0 00000000 		.word	.LANCHOR16
 1818 00a4 00000000 		.word	.LANCHOR1
 1819 00a8 00000000 		.word	.LANCHOR2
 1820 00ac 00000000 		.word	.LANCHOR8
 1821              		.cfi_endproc
 1822              	.LFE16:
 1824              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1825              		.align	1
 1826              		.p2align 2,,3
 1827              		.global	vTaskStartScheduler
 1828              		.syntax unified
 1829              		.thumb
 1830              		.thumb_func
 1831              		.fpu fpv4-sp-d16
 1833              	vTaskStartScheduler:
 1834              	.LFB17:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1835              		.loc 1 1827 0
 1836              		.cfi_startproc
 1837              		@ args = 0, pretend = 0, frame = 0
 1838              		@ frame_needed = 0, uses_anonymous_args = 0
 1839              	.LVL172:
 1840 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1841              	.LCFI16:
 1842              		.cfi_def_cfa_offset 32
 1843              		.cfi_offset 4, -32
 1844              		.cfi_offset 5, -28
 1845              		.cfi_offset 6, -24
 1846              		.cfi_offset 7, -20
 1847              		.cfi_offset 8, -16
 1848              		.cfi_offset 9, -12
 1849              		.cfi_offset 10, -8
 1850              		.cfi_offset 14, -4
 1851              	.LBB278:
 1852              	.LBB279:
 1853              	.LBB280:
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1854              		.loc 1 716 0
 1855 0004 4FF40070 		mov	r0, #512
 1856 0008 FFF7FEFF 		bl	pvPortMalloc
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 127


 1857              	.LVL173:
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1858              		.loc 1 718 0
 1859 000c 0028     		cmp	r0, #0
 1860 000e 00F09480 		beq	.L202
 1861 0012 0646     		mov	r6, r0
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1862              		.loc 1 721 0
 1863 0014 5420     		movs	r0, #84
 1864              	.LVL174:
 1865 0016 FFF7FEFF 		bl	pvPortMalloc
 1866              	.LVL175:
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1867              		.loc 1 723 0
 1868 001a 0446     		mov	r4, r0
 1869 001c 0028     		cmp	r0, #0
 1870 001e 00F08980 		beq	.L203
 1871              	.LBE280:
 1872              	.LBB281:
 1873              	.LBB282:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1874              		.loc 1 829 0
 1875 0022 0025     		movs	r5, #0
 1876 0024 5C4B     		ldr	r3, .L225
 1877 0026 4363     		str	r3, [r0, #52]
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 1878              		.loc 1 867 0
 1879 0028 071D     		adds	r7, r0, #4
 1880              	.LBE282:
 1881              	.LBE281:
 1882              	.LBB284:
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1883              		.loc 1 726 0
 1884 002a 0663     		str	r6, [r0, #48]
 1885              	.LVL176:
 1886              	.LBE284:
 1887              	.LBB285:
 1888              	.LBB283:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1889              		.loc 1 829 0
 1890 002c 80F83850 		strb	r5, [r0, #56]
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1891              		.loc 1 846 0
 1892 0030 80F84350 		strb	r5, [r0, #67]
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 1893              		.loc 1 859 0
 1894 0034 C562     		str	r5, [r0, #44]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1895              		.loc 1 863 0
 1896 0036 C0E91155 		strd	r5, r5, [r0, #68]
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 1897              		.loc 1 867 0
 1898 003a 3846     		mov	r0, r7
 1899              	.LVL177:
 1900 003c FFF7FEFF 		bl	vListInitialiseItem
 1901              	.LVL178:
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 128


 1902              		.loc 1 807 0
 1903 0040 06F5FE76 		add	r6, r6, #508
 1904              	.LVL179:
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1905              		.loc 1 868 0
 1906 0044 04F11800 		add	r0, r4, #24
 1907 0048 FFF7FEFF 		bl	vListInitialiseItem
 1908              	.LVL180:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1909              		.loc 1 808 0
 1910 004c 26F00706 		bic	r6, r6, #7
 1911              	.LVL181:
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 1912              		.loc 1 875 0
 1913 0050 0723     		movs	r3, #7
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1914              		.loc 1 946 0
 1915 0052 2A46     		mov	r2, r5
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1916              		.loc 1 918 0
 1917 0054 E564     		str	r5, [r4, #76]
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 1918              		.loc 1 875 0
 1919 0056 A361     		str	r3, [r4, #24]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1920              		.loc 1 946 0
 1921 0058 5049     		ldr	r1, .L225+4
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1922              		.loc 1 872 0
 1923 005a 2461     		str	r4, [r4, #16]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1924              		.loc 1 946 0
 1925 005c 3046     		mov	r0, r6
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1926              		.loc 1 919 0
 1927 005e 84F85050 		strb	r5, [r4, #80]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1928              		.loc 1 876 0
 1929 0062 6462     		str	r4, [r4, #36]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1930              		.loc 1 946 0
 1931 0064 FFF7FEFF 		bl	pxPortInitialiseStack
 1932              	.LVL182:
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1933              		.loc 1 954 0
 1934 0068 4D4B     		ldr	r3, .L225+8
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1935              		.loc 1 946 0
 1936 006a 2060     		str	r0, [r4]
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1937              		.loc 1 954 0
 1938 006c 1C60     		str	r4, [r3]
 1939              	.LVL183:
 1940              	.LBE283:
 1941              	.LBE285:
 1942              	.LBB286:
 1943              	.LBB287:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 129


 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1944              		.loc 1 967 0
 1945 006e FFF7FEFF 		bl	vPortEnterCritical
 1946              	.LVL184:
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 1947              		.loc 1 969 0
 1948 0072 4C4B     		ldr	r3, .L225+12
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1949              		.loc 1 970 0
 1950 0074 DFF85881 		ldr	r8, .L225+56
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 1951              		.loc 1 969 0
 1952 0078 1A68     		ldr	r2, [r3]
 1953 007a 0132     		adds	r2, r2, #1
 1954 007c 1A60     		str	r2, [r3]
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1955              		.loc 1 970 0
 1956 007e D8F80020 		ldr	r2, [r8]
 1957 0082 002A     		cmp	r2, #0
 1958 0084 4DD0     		beq	.L224
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1959              		.loc 1 993 0
 1960 0086 484E     		ldr	r6, .L225+16
 1961 0088 E06A     		ldr	r0, [r4, #44]
 1962 008a 3368     		ldr	r3, [r6]
 1963 008c 002B     		cmp	r3, #0
 1964 008e 3FD0     		beq	.L221
 1965 0090 464D     		ldr	r5, .L225+20
 1966              	.L207:
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1967              		.loc 1 1010 0
 1968 0092 DFF840E1 		ldr	lr, .L225+60
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1969              		.loc 1 1020 0
 1970 0096 DFF840C1 		ldr	ip, .L225+64
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1971              		.loc 1 1010 0
 1972 009a DEF80030 		ldr	r3, [lr]
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1973              		.loc 1 1020 0
 1974 009e DCF80090 		ldr	r9, [ip]
 1975 00a2 0122     		movs	r2, #1
 1976 00a4 8240     		lsls	r2, r2, r0
 1977 00a6 00EB8000 		add	r0, r0, r0, lsl #2
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1978              		.loc 1 1010 0
 1979 00aa 0133     		adds	r3, r3, #1
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1980              		.loc 1 1020 0
 1981 00ac 42EA0902 		orr	r2, r2, r9
 1982 00b0 3946     		mov	r1, r7
 1983 00b2 05EB8000 		add	r0, r5, r0, lsl #2
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1984              		.loc 1 1010 0
 1985 00b6 CEF80030 		str	r3, [lr]
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1986              		.loc 1 1020 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 130


 1987 00ba CCF80020 		str	r2, [ip]
 1988 00be FFF7FEFF 		bl	vListInsertEnd
 1989              	.LVL185:
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1990              		.loc 1 1024 0
 1991 00c2 FFF7FEFF 		bl	vPortExitCritical
 1992              	.LVL186:
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1993              		.loc 1 1026 0
 1994 00c6 3368     		ldr	r3, [r6]
 1995 00c8 6BB1     		cbz	r3, .L209
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1996              		.loc 1 1030 0
 1997 00ca D8F80020 		ldr	r2, [r8]
 1998 00ce E36A     		ldr	r3, [r4, #44]
 1999 00d0 D26A     		ldr	r2, [r2, #44]
 2000 00d2 9A42     		cmp	r2, r3
 2001 00d4 07D2     		bcs	.L209
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2002              		.loc 1 1032 0
 2003 00d6 364B     		ldr	r3, .L225+24
 2004 00d8 4FF08052 		mov	r2, #268435456
 2005 00dc 1A60     		str	r2, [r3]
 2006              		.syntax unified
 2007              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2008 00de BFF34F8F 		dsb
 2009              	@ 0 "" 2
 2010              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2011 00e2 BFF36F8F 		isb
 2012              	@ 0 "" 2
 2013              	.LVL187:
 2014              		.thumb
 2015              		.syntax unified
 2016              	.L209:
 2017              	.LBE287:
 2018              	.LBE286:
 2019              	.LBE279:
 2020              	.LBE278:
 2021              	.LBB297:
 2022              	.LBB298:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2023              		.loc 2 237 0
 2024              		.syntax unified
 2025              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2026 00e6 4FF05003 			mov r3, #80												
 2027 00ea 83F31188 		msr basepri, r3											
 2028 00ee BFF36F8F 		isb														
 2029 00f2 BFF34F8F 		dsb														
 2030              	
 2031              	@ 0 "" 2
 2032              		.thumb
 2033              		.syntax unified
 2034              	.LBE298:
 2035              	.LBE297:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2036              		.loc 1 1898 0
 2037 00f6 2F48     		ldr	r0, .L225+28
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 131


1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2038              		.loc 1 1900 0
 2039 00f8 2F4B     		ldr	r3, .L225+32
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2040              		.loc 1 1898 0
 2041 00fa 4FF0FF34 		mov	r4, #-1
 2042              	.LVL188:
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2043              		.loc 1 1899 0
 2044 00fe 0121     		movs	r1, #1
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2045              		.loc 1 1898 0
 2046 0100 0460     		str	r4, [r0]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2047              		.loc 1 1900 0
 2048 0102 0022     		movs	r2, #0
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2049              		.loc 1 1899 0
 2050 0104 3160     		str	r1, [r6]
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2051              		.loc 1 1930 0
 2052 0106 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 2053              	.LCFI17:
 2054              		.cfi_remember_state
 2055              		.cfi_restore 14
 2056              		.cfi_restore 10
 2057              		.cfi_restore 9
 2058              		.cfi_restore 8
 2059              		.cfi_restore 7
 2060              		.cfi_restore 6
 2061              		.cfi_restore 5
 2062              		.cfi_restore 4
 2063              		.cfi_def_cfa_offset 0
 2064              	.LVL189:
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2065              		.loc 1 1900 0
 2066 010a 1A60     		str	r2, [r3]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2067              		.loc 1 1909 0
 2068 010c FFF7FEBF 		b	xPortStartScheduler
 2069              	.LVL190:
 2070              	.L221:
 2071              	.LCFI18:
 2072              		.cfi_restore_state
 2073              	.LBB299:
 2074              	.LBB295:
 2075              	.LBB292:
 2076              	.LBB290:
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2077              		.loc 1 995 0
 2078 0110 D8F80030 		ldr	r3, [r8]
 2079 0114 254D     		ldr	r5, .L225+20
 2080 0116 DB6A     		ldr	r3, [r3, #44]
 2081 0118 8342     		cmp	r3, r0
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2082              		.loc 1 997 0
 2083 011a 98BF     		it	ls
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 132


 2084 011c C8F80040 		strls	r4, [r8]
 2085 0120 B7E7     		b	.L207
 2086              	.L224:
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2087              		.loc 1 974 0
 2088 0122 C8F80040 		str	r4, [r8]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2089              		.loc 1 976 0
 2090 0126 1B68     		ldr	r3, [r3]
 2091 0128 012B     		cmp	r3, #1
 2092 012a 0FD0     		beq	.L206
 2093 012c E06A     		ldr	r0, [r4, #44]
 2094 012e 1F4D     		ldr	r5, .L225+20
 2095 0130 1D4E     		ldr	r6, .L225+16
 2096 0132 AEE7     		b	.L207
 2097              	.LVL191:
 2098              	.L203:
 2099              	.LBE290:
 2100              	.LBE292:
 2101              	.LBB293:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2102              		.loc 1 732 0
 2103 0134 3046     		mov	r0, r6
 2104              	.LVL192:
 2105 0136 FFF7FEFF 		bl	vPortFree
 2106              	.LVL193:
 2107              	.L202:
 2108              	.LBE293:
 2109              	.LBE295:
 2110              	.LBE299:
 2111              	.LBB300:
 2112              	.LBB301:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2113              		.loc 2 237 0
 2114              		.syntax unified
 2115              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2116 013a 4FF05003 			mov r3, #80												
 2117 013e 83F31188 		msr basepri, r3											
 2118 0142 BFF36F8F 		isb														
 2119 0146 BFF34F8F 		dsb														
 2120              	
 2121              	@ 0 "" 2
 2122              	.LVL194:
 2123              		.thumb
 2124              		.syntax unified
 2125              	.L210:
 2126 014a FEE7     		b	.L210
 2127              	.LVL195:
 2128              	.L206:
 2129 014c 174D     		ldr	r5, .L225+20
 2130 014e 2E46     		mov	r6, r5
 2131 0150 05F18C09 		add	r9, r5, #140
 2132              	.L208:
 2133              	.LBE301:
 2134              	.LBE300:
 2135              	.LBB302:
 2136              	.LBB296:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 133


 2137              	.LBB294:
 2138              	.LBB291:
 2139              	.LBB288:
 2140              	.LBB289:
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2141              		.loc 1 3339 0
 2142 0154 3046     		mov	r0, r6
 2143 0156 1436     		adds	r6, r6, #20
 2144 0158 FFF7FEFF 		bl	vListInitialise
 2145              	.LVL196:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2146              		.loc 1 3337 0
 2147 015c B145     		cmp	r9, r6
 2148 015e F9D1     		bne	.L208
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 2149              		.loc 1 3342 0
 2150 0160 DFF878A0 		ldr	r10, .L225+68
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 2151              		.loc 1 3343 0
 2152 0164 DFF87890 		ldr	r9, .L225+72
 2153 0168 0F4E     		ldr	r6, .L225+16
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 2154              		.loc 1 3342 0
 2155 016a 5046     		mov	r0, r10
 2156 016c FFF7FEFF 		bl	vListInitialise
 2157              	.LVL197:
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 2158              		.loc 1 3343 0
 2159 0170 4846     		mov	r0, r9
 2160 0172 FFF7FEFF 		bl	vListInitialise
 2161              	.LVL198:
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2162              		.loc 1 3344 0
 2163 0176 1148     		ldr	r0, .L225+36
 2164 0178 FFF7FEFF 		bl	vListInitialise
 2165              	.LVL199:
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2166              		.loc 1 3348 0
 2167 017c 1048     		ldr	r0, .L225+40
 2168 017e FFF7FEFF 		bl	vListInitialise
 2169              	.LVL200:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2170              		.loc 1 3354 0
 2171 0182 1048     		ldr	r0, .L225+44
 2172 0184 FFF7FEFF 		bl	vListInitialise
 2173              	.LVL201:
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 2174              		.loc 1 3360 0
 2175 0188 0F4A     		ldr	r2, .L225+48
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2176              		.loc 1 3361 0
 2177 018a 104B     		ldr	r3, .L225+52
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 2178              		.loc 1 3360 0
 2179 018c C2F800A0 		str	r10, [r2]
 2180 0190 E06A     		ldr	r0, [r4, #44]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 134


 2181              		.loc 1 3361 0
 2182 0192 C3F80090 		str	r9, [r3]
 2183 0196 7CE7     		b	.L207
 2184              	.L226:
 2185              		.align	2
 2186              	.L225:
 2187 0198 49444C45 		.word	1162626121
 2188 019c 00000000 		.word	prvIdleTask
 2189 01a0 00000000 		.word	.LANCHOR18
 2190 01a4 00000000 		.word	.LANCHOR7
 2191 01a8 00000000 		.word	.LANCHOR13
 2192 01ac 00000000 		.word	.LANCHOR8
 2193 01b0 04ED00E0 		.word	-536810236
 2194 01b4 00000000 		.word	.LANCHOR6
 2195 01b8 00000000 		.word	.LANCHOR0
 2196 01bc 00000000 		.word	.LANCHOR11
 2197 01c0 00000000 		.word	.LANCHOR12
 2198 01c4 00000000 		.word	.LANCHOR3
 2199 01c8 00000000 		.word	.LANCHOR5
 2200 01cc 00000000 		.word	.LANCHOR4
 2201 01d0 00000000 		.word	.LANCHOR1
 2202 01d4 00000000 		.word	.LANCHOR14
 2203 01d8 00000000 		.word	.LANCHOR2
 2204 01dc 00000000 		.word	.LANCHOR9
 2205 01e0 00000000 		.word	.LANCHOR10
 2206              	.LBE289:
 2207              	.LBE288:
 2208              	.LBE291:
 2209              	.LBE294:
 2210              	.LBE296:
 2211              	.LBE302:
 2212              		.cfi_endproc
 2213              	.LFE17:
 2215              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2216              		.align	1
 2217              		.p2align 2,,3
 2218              		.global	vTaskEndScheduler
 2219              		.syntax unified
 2220              		.thumb
 2221              		.thumb_func
 2222              		.fpu fpv4-sp-d16
 2224              	vTaskEndScheduler:
 2225              	.LFB18:
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2226              		.loc 1 1934 0
 2227              		.cfi_startproc
 2228              		@ args = 0, pretend = 0, frame = 0
 2229              		@ frame_needed = 0, uses_anonymous_args = 0
 2230              		@ link register save eliminated.
 2231              	.LBB303:
 2232              	.LBB304:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2233              		.loc 2 237 0
 2234              		.syntax unified
 2235              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2236 0000 4FF05003 			mov r3, #80												
 2237 0004 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 135


 2238 0008 BFF36F8F 		isb														
 2239 000c BFF34F8F 		dsb														
 2240              	
 2241              	@ 0 "" 2
 2242              		.thumb
 2243              		.syntax unified
 2244              	.LBE304:
 2245              	.LBE303:
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2246              		.loc 1 1939 0
 2247 0010 024B     		ldr	r3, .L228
 2248 0012 0022     		movs	r2, #0
 2249 0014 1A60     		str	r2, [r3]
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2250              		.loc 1 1940 0
 2251 0016 FFF7FEBF 		b	vPortEndScheduler
 2252              	.LVL202:
 2253              	.L229:
 2254 001a 00BF     		.align	2
 2255              	.L228:
 2256 001c 00000000 		.word	.LANCHOR13
 2257              		.cfi_endproc
 2258              	.LFE18:
 2260              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2261              		.align	1
 2262              		.p2align 2,,3
 2263              		.global	vTaskSuspendAll
 2264              		.syntax unified
 2265              		.thumb
 2266              		.thumb_func
 2267              		.fpu fpv4-sp-d16
 2269              	vTaskSuspendAll:
 2270              	.LFB19:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2271              		.loc 1 1945 0
 2272              		.cfi_startproc
 2273              		@ args = 0, pretend = 0, frame = 0
 2274              		@ frame_needed = 0, uses_anonymous_args = 0
 2275              		@ link register save eliminated.
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2276              		.loc 1 1950 0
 2277 0000 024A     		ldr	r2, .L231
 2278 0002 1368     		ldr	r3, [r2]
 2279 0004 0133     		adds	r3, r3, #1
 2280 0006 1360     		str	r3, [r2]
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2281              		.loc 1 1951 0
 2282 0008 7047     		bx	lr
 2283              	.L232:
 2284 000a 00BF     		.align	2
 2285              	.L231:
 2286 000c 00000000 		.word	.LANCHOR16
 2287              		.cfi_endproc
 2288              	.LFE19:
 2290              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2291              		.align	1
 2292              		.p2align 2,,3
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 136


 2293              		.global	xTaskGetTickCount
 2294              		.syntax unified
 2295              		.thumb
 2296              		.thumb_func
 2297              		.fpu fpv4-sp-d16
 2299              	xTaskGetTickCount:
 2300              	.LFB21:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2301              		.loc 1 2128 0
 2302              		.cfi_startproc
 2303              		@ args = 0, pretend = 0, frame = 0
 2304              		@ frame_needed = 0, uses_anonymous_args = 0
 2305              		@ link register save eliminated.
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2306              		.loc 1 2134 0
 2307 0000 014B     		ldr	r3, .L234
 2308 0002 1868     		ldr	r0, [r3]
 2309              	.LVL203:
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2310              		.loc 1 2139 0
 2311 0004 7047     		bx	lr
 2312              	.L235:
 2313 0006 00BF     		.align	2
 2314              	.L234:
 2315 0008 00000000 		.word	.LANCHOR0
 2316              		.cfi_endproc
 2317              	.LFE21:
 2319              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2320              		.align	1
 2321              		.p2align 2,,3
 2322              		.global	xTaskGetTickCountFromISR
 2323              		.syntax unified
 2324              		.thumb
 2325              		.thumb_func
 2326              		.fpu fpv4-sp-d16
 2328              	xTaskGetTickCountFromISR:
 2329              	.LFB22:
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2330              		.loc 1 2143 0
 2331              		.cfi_startproc
 2332              		@ args = 0, pretend = 0, frame = 0
 2333              		@ frame_needed = 0, uses_anonymous_args = 0
 2334 0000 08B5     		push	{r3, lr}
 2335              	.LCFI19:
 2336              		.cfi_def_cfa_offset 8
 2337              		.cfi_offset 3, -8
 2338              		.cfi_offset 14, -4
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2339              		.loc 1 2161 0
 2340 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2341              	.LVL204:
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2342              		.loc 1 2165 0
 2343 0006 014B     		ldr	r3, .L238
 2344 0008 1868     		ldr	r0, [r3]
 2345              	.LVL205:
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 137


 2346              		.loc 1 2170 0
 2347 000a 08BD     		pop	{r3, pc}
 2348              	.L239:
 2349              		.align	2
 2350              	.L238:
 2351 000c 00000000 		.word	.LANCHOR0
 2352              		.cfi_endproc
 2353              	.LFE22:
 2355              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2356              		.align	1
 2357              		.p2align 2,,3
 2358              		.global	uxTaskGetNumberOfTasks
 2359              		.syntax unified
 2360              		.thumb
 2361              		.thumb_func
 2362              		.fpu fpv4-sp-d16
 2364              	uxTaskGetNumberOfTasks:
 2365              	.LFB23:
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2366              		.loc 1 2174 0
 2367              		.cfi_startproc
 2368              		@ args = 0, pretend = 0, frame = 0
 2369              		@ frame_needed = 0, uses_anonymous_args = 0
 2370              		@ link register save eliminated.
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2371              		.loc 1 2177 0
 2372 0000 014B     		ldr	r3, .L241
 2373 0002 1868     		ldr	r0, [r3]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2374              		.loc 1 2178 0
 2375 0004 7047     		bx	lr
 2376              	.L242:
 2377 0006 00BF     		.align	2
 2378              	.L241:
 2379 0008 00000000 		.word	.LANCHOR7
 2380              		.cfi_endproc
 2381              	.LFE23:
 2383              		.section	.text.pcTaskGetName,"ax",%progbits
 2384              		.align	1
 2385              		.p2align 2,,3
 2386              		.global	pcTaskGetName
 2387              		.syntax unified
 2388              		.thumb
 2389              		.thumb_func
 2390              		.fpu fpv4-sp-d16
 2392              	pcTaskGetName:
 2393              	.LFB24:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2394              		.loc 1 2182 0
 2395              		.cfi_startproc
 2396              		@ args = 0, pretend = 0, frame = 0
 2397              		@ frame_needed = 0, uses_anonymous_args = 0
 2398              		@ link register save eliminated.
 2399              	.LVL206:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2400              		.loc 1 2187 0
 2401 0000 08B1     		cbz	r0, .L246
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 138


 2402              	.LVL207:
 2403              	.L244:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2404              		.loc 1 2190 0
 2405 0002 3430     		adds	r0, r0, #52
 2406              	.LVL208:
 2407 0004 7047     		bx	lr
 2408              	.LVL209:
 2409              	.L246:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2410              		.loc 1 2187 0 discriminator 1
 2411 0006 064B     		ldr	r3, .L247
 2412 0008 1868     		ldr	r0, [r3]
 2413              	.LVL210:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2414              		.loc 1 2188 0 discriminator 1
 2415 000a 0028     		cmp	r0, #0
 2416 000c F9D1     		bne	.L244
 2417              	.LBB305:
 2418              	.LBB306:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2419              		.loc 2 237 0
 2420              		.syntax unified
 2421              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2422 000e 4FF05003 			mov r3, #80												
 2423 0012 83F31188 		msr basepri, r3											
 2424 0016 BFF36F8F 		isb														
 2425 001a BFF34F8F 		dsb														
 2426              	
 2427              	@ 0 "" 2
 2428              	.LVL211:
 2429              		.thumb
 2430              		.syntax unified
 2431              	.L245:
 2432 001e FEE7     		b	.L245
 2433              	.L248:
 2434              		.align	2
 2435              	.L247:
 2436 0020 00000000 		.word	.LANCHOR1
 2437              	.LBE306:
 2438              	.LBE305:
 2439              		.cfi_endproc
 2440              	.LFE24:
 2442              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2443              		.align	1
 2444              		.p2align 2,,3
 2445              		.global	xTaskIncrementTick
 2446              		.syntax unified
 2447              		.thumb
 2448              		.thumb_func
 2449              		.fpu fpv4-sp-d16
 2451              	xTaskIncrementTick:
 2452              	.LFB25:
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2453              		.loc 1 2500 0
 2454              		.cfi_startproc
 2455              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 139


 2456              		@ frame_needed = 0, uses_anonymous_args = 0
 2457              	.LVL212:
 2458 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2459              	.LCFI20:
 2460              		.cfi_def_cfa_offset 40
 2461              		.cfi_offset 3, -40
 2462              		.cfi_offset 4, -36
 2463              		.cfi_offset 5, -32
 2464              		.cfi_offset 6, -28
 2465              		.cfi_offset 7, -24
 2466              		.cfi_offset 8, -20
 2467              		.cfi_offset 9, -16
 2468              		.cfi_offset 10, -12
 2469              		.cfi_offset 11, -8
 2470              		.cfi_offset 14, -4
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2471              		.loc 1 2509 0
 2472 0004 494B     		ldr	r3, .L273
 2473 0006 1B68     		ldr	r3, [r3]
 2474 0008 CBB9     		cbnz	r3, .L250
 2475              	.LBB315:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2476              		.loc 1 2513 0
 2477 000a 494B     		ldr	r3, .L273+4
 2478 000c 1E68     		ldr	r6, [r3]
 2479 000e 0136     		adds	r6, r6, #1
 2480              	.LVL213:
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2481              		.loc 1 2517 0
 2482 0010 1E60     		str	r6, [r3]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2483              		.loc 1 2519 0
 2484 0012 0EB3     		cbz	r6, .L270
 2485 0014 DFF838B1 		ldr	fp, .L273+36
 2486              	.L251:
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2487              		.loc 1 2532 0
 2488 0018 DBF80020 		ldr	r2, [fp]
 2489 001c B242     		cmp	r2, r6
 2490 001e 29D9     		bls	.L263
 2491 0020 444F     		ldr	r7, .L273+8
 2492 0022 DFF83081 		ldr	r8, .L273+40
 2493              	.LBE315:
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2494              		.loc 1 2503 0
 2495 0026 0025     		movs	r5, #0
 2496              	.LVL214:
 2497              	.L256:
 2498              	.LBB324:
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2499              		.loc 1 2615 0
 2500 0028 D8F80030 		ldr	r3, [r8]
 2501 002c DB6A     		ldr	r3, [r3, #44]
 2502 002e 03EB8303 		add	r3, r3, r3, lsl #2
 2503 0032 57F82330 		ldr	r3, [r7, r3, lsl #2]
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2504              		.loc 1 2617 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 140


 2505 0036 022B     		cmp	r3, #2
 2506 0038 28BF     		it	cs
 2507 003a 0125     		movcs	r5, #1
 2508              	.LVL215:
 2509 003c 04E0     		b	.L261
 2510              	.LVL216:
 2511              	.L250:
 2512              	.LBE324:
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2513              		.loc 1 2643 0
 2514 003e 3E4A     		ldr	r2, .L273+12
 2515 0040 1368     		ldr	r3, [r2]
 2516 0042 0133     		adds	r3, r3, #1
 2517 0044 1360     		str	r3, [r2]
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2518              		.loc 1 2503 0
 2519 0046 0025     		movs	r5, #0
 2520              	.LVL217:
 2521              	.L261:
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2522              		.loc 1 2656 0
 2523 0048 3C4B     		ldr	r3, .L273+16
 2524 004a 1B68     		ldr	r3, [r3]
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2525              		.loc 1 2658 0
 2526 004c 002B     		cmp	r3, #0
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2527              		.loc 1 2668 0
 2528 004e 0CBF     		ite	eq
 2529 0050 2846     		moveq	r0, r5
 2530 0052 0120     		movne	r0, #1
 2531 0054 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2532              	.LVL218:
 2533              	.L270:
 2534              	.LBB325:
 2535              	.LBB316:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2536              		.loc 1 2521 0
 2537 0058 394C     		ldr	r4, .L273+20
 2538 005a 2368     		ldr	r3, [r4]
 2539 005c 1B68     		ldr	r3, [r3]
 2540 005e 002B     		cmp	r3, #0
 2541 0060 48D0     		beq	.L252
 2542              	.LBB317:
 2543              	.LBB318:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2544              		.loc 2 237 0
 2545              		.syntax unified
 2546              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2547 0062 4FF05003 			mov r3, #80												
 2548 0066 83F31188 		msr basepri, r3											
 2549 006a BFF36F8F 		isb														
 2550 006e BFF34F8F 		dsb														
 2551              	
 2552              	@ 0 "" 2
 2553              	.LVL219:
 2554              		.thumb
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 141


 2555              		.syntax unified
 2556              	.L253:
 2557 0072 FEE7     		b	.L253
 2558              	.L263:
 2559 0074 324C     		ldr	r4, .L273+20
 2560 0076 2F4F     		ldr	r7, .L273+8
 2561 0078 DFF8D880 		ldr	r8, .L273+40
 2562              	.LBE318:
 2563              	.LBE317:
 2564              	.LBE316:
 2565              	.LBE325:
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2566              		.loc 1 2503 0
 2567 007c 0025     		movs	r5, #0
 2568 007e 2DE0     		b	.L255
 2569              	.LVL220:
 2570              	.L257:
 2571              	.LBB326:
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2572              		.loc 1 2552 0
 2573 0080 2268     		ldr	r2, [r4]
 2574 0082 D268     		ldr	r2, [r2, #12]
 2575 0084 D2F80C90 		ldr	r9, [r2, #12]
 2576              	.LVL221:
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2577              		.loc 1 2553 0
 2578 0088 D9F80410 		ldr	r1, [r9, #4]
 2579              	.LVL222:
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2580              		.loc 1 2571 0
 2581 008c 09F1040A 		add	r10, r9, #4
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2582              		.loc 1 2555 0
 2583 0090 8E42     		cmp	r6, r1
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2584              		.loc 1 2571 0
 2585 0092 5046     		mov	r0, r10
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2586              		.loc 1 2555 0
 2587 0094 2BD3     		bcc	.L272
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2588              		.loc 1 2571 0
 2589 0096 FFF7FEFF 		bl	uxListRemove
 2590              	.LVL223:
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2591              		.loc 1 2575 0
 2592 009a D9F82810 		ldr	r1, [r9, #40]
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2593              		.loc 1 2577 0
 2594 009e 09F11800 		add	r0, r9, #24
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2595              		.loc 1 2575 0
 2596 00a2 09B1     		cbz	r1, .L259
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2597              		.loc 1 2577 0
 2598 00a4 FFF7FEFF 		bl	uxListRemove
 2599              	.LVL224:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 142


 2600              	.L259:
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2601              		.loc 1 2586 0
 2602 00a8 264A     		ldr	r2, .L273+24
 2603 00aa D9F82C00 		ldr	r0, [r9, #44]
 2604 00ae 1368     		ldr	r3, [r2]
 2605 00b0 0121     		movs	r1, #1
 2606 00b2 01FA00FC 		lsl	ip, r1, r0
 2607 00b6 00EB8000 		add	r0, r0, r0, lsl #2
 2608 00ba 5146     		mov	r1, r10
 2609 00bc 07EB8000 		add	r0, r7, r0, lsl #2
 2610 00c0 4CEA030C 		orr	ip, ip, r3
 2611 00c4 C2F800C0 		str	ip, [r2]
 2612 00c8 FFF7FEFF 		bl	vListInsertEnd
 2613              	.LVL225:
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2614              		.loc 1 2596 0
 2615 00cc D8F80000 		ldr	r0, [r8]
 2616 00d0 D9F82C10 		ldr	r1, [r9, #44]
 2617 00d4 C26A     		ldr	r2, [r0, #44]
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2618              		.loc 1 2598 0
 2619 00d6 9142     		cmp	r1, r2
 2620 00d8 28BF     		it	cs
 2621 00da 0125     		movcs	r5, #1
 2622              	.LVL226:
 2623              	.L255:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2624              		.loc 1 2536 0
 2625 00dc 2268     		ldr	r2, [r4]
 2626 00de 1268     		ldr	r2, [r2]
 2627 00e0 002A     		cmp	r2, #0
 2628 00e2 CDD1     		bne	.L257
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2629              		.loc 1 2543 0
 2630 00e4 4FF0FF32 		mov	r2, #-1
 2631 00e8 CBF80020 		str	r2, [fp]
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2632              		.loc 1 2544 0
 2633 00ec 9CE7     		b	.L256
 2634              	.LVL227:
 2635              	.L272:
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2636              		.loc 1 2562 0
 2637 00ee CBF80010 		str	r1, [fp]
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2638              		.loc 1 2563 0
 2639 00f2 99E7     		b	.L256
 2640              	.LVL228:
 2641              	.L252:
 2642              	.LBB323:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2643              		.loc 1 2521 0 discriminator 2
 2644 00f4 144B     		ldr	r3, .L273+28
 2645 00f6 2168     		ldr	r1, [r4]
 2646              	.LVL229:
 2647 00f8 144A     		ldr	r2, .L273+32
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 143


 2648 00fa 1868     		ldr	r0, [r3]
 2649 00fc 2060     		str	r0, [r4]
 2650 00fe 1960     		str	r1, [r3]
 2651 0100 1368     		ldr	r3, [r2]
 2652 0102 0133     		adds	r3, r3, #1
 2653 0104 1360     		str	r3, [r2]
 2654              	.LBB319:
 2655              	.LBB320:
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2656              		.loc 1 3639 0 discriminator 2
 2657 0106 2368     		ldr	r3, [r4]
 2658 0108 1B68     		ldr	r3, [r3]
 2659 010a 33B9     		cbnz	r3, .L254
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2660              		.loc 1 3645 0
 2661 010c DFF840B0 		ldr	fp, .L273+36
 2662 0110 4FF0FF32 		mov	r2, #-1
 2663 0114 CBF80020 		str	r2, [fp]
 2664 0118 7EE7     		b	.L251
 2665              	.L254:
 2666              	.LBB321:
 2667              	.LBB322:
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 2668              		.loc 1 3653 0
 2669 011a 2268     		ldr	r2, [r4]
 2670              	.LVL230:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2671              		.loc 1 3654 0
 2672 011c DFF830B0 		ldr	fp, .L273+36
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 2673              		.loc 1 3653 0
 2674 0120 D268     		ldr	r2, [r2, #12]
 2675              	.LVL231:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2676              		.loc 1 3654 0
 2677 0122 D268     		ldr	r2, [r2, #12]
 2678              	.LVL232:
 2679 0124 5268     		ldr	r2, [r2, #4]
 2680              	.LVL233:
 2681 0126 CBF80020 		str	r2, [fp]
 2682 012a 75E7     		b	.L251
 2683              	.L274:
 2684              		.align	2
 2685              	.L273:
 2686 012c 00000000 		.word	.LANCHOR16
 2687 0130 00000000 		.word	.LANCHOR0
 2688 0134 00000000 		.word	.LANCHOR8
 2689 0138 00000000 		.word	.LANCHOR20
 2690 013c 00000000 		.word	.LANCHOR17
 2691 0140 00000000 		.word	.LANCHOR5
 2692 0144 00000000 		.word	.LANCHOR2
 2693 0148 00000000 		.word	.LANCHOR4
 2694 014c 00000000 		.word	.LANCHOR19
 2695 0150 00000000 		.word	.LANCHOR6
 2696 0154 00000000 		.word	.LANCHOR1
 2697              	.LBE322:
 2698              	.LBE321:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 144


 2699              	.LBE320:
 2700              	.LBE319:
 2701              	.LBE323:
 2702              	.LBE326:
 2703              		.cfi_endproc
 2704              	.LFE25:
 2706              		.section	.text.xTaskResumeAll,"ax",%progbits
 2707              		.align	1
 2708              		.p2align 2,,3
 2709              		.global	xTaskResumeAll
 2710              		.syntax unified
 2711              		.thumb
 2712              		.thumb_func
 2713              		.fpu fpv4-sp-d16
 2715              	xTaskResumeAll:
 2716              	.LFB20:
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2717              		.loc 1 2018 0
 2718              		.cfi_startproc
 2719              		@ args = 0, pretend = 0, frame = 0
 2720              		@ frame_needed = 0, uses_anonymous_args = 0
 2721              	.LVL234:
 2722 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2723              	.LCFI21:
 2724              		.cfi_def_cfa_offset 40
 2725              		.cfi_offset 3, -40
 2726              		.cfi_offset 4, -36
 2727              		.cfi_offset 5, -32
 2728              		.cfi_offset 6, -28
 2729              		.cfi_offset 7, -24
 2730              		.cfi_offset 8, -20
 2731              		.cfi_offset 9, -16
 2732              		.cfi_offset 10, -12
 2733              		.cfi_offset 11, -8
 2734              		.cfi_offset 14, -4
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2735              		.loc 1 2024 0
 2736 0004 384C     		ldr	r4, .L305
 2737 0006 2368     		ldr	r3, [r4]
 2738 0008 43B9     		cbnz	r3, .L276
 2739              	.LBB334:
 2740              	.LBB335:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2741              		.loc 2 237 0
 2742              		.syntax unified
 2743              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2744 000a 4FF05003 			mov r3, #80												
 2745 000e 83F31188 		msr basepri, r3											
 2746 0012 BFF36F8F 		isb														
 2747 0016 BFF34F8F 		dsb														
 2748              	
 2749              	@ 0 "" 2
 2750              	.LVL235:
 2751              		.thumb
 2752              		.syntax unified
 2753              	.L277:
 2754 001a FEE7     		b	.L277
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 145


 2755              	.L276:
 2756              	.LBE335:
 2757              	.LBE334:
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2758              		.loc 1 2031 0
 2759 001c FFF7FEFF 		bl	vPortEnterCritical
 2760              	.LVL236:
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2761              		.loc 1 2033 0
 2762 0020 2368     		ldr	r3, [r4]
 2763 0022 013B     		subs	r3, r3, #1
 2764 0024 2360     		str	r3, [r4]
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2765              		.loc 1 2035 0
 2766 0026 2468     		ldr	r4, [r4]
 2767 0028 7CBB     		cbnz	r4, .L281
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2768              		.loc 1 2037 0
 2769 002a 304B     		ldr	r3, .L305+4
 2770 002c 1B68     		ldr	r3, [r3]
 2771 002e 63B3     		cbz	r3, .L281
 2772 0030 2F4D     		ldr	r5, .L305+8
 2773 0032 DFF8D4A0 		ldr	r10, .L305+32
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2774              		.loc 1 2046 0
 2775 0036 2F4E     		ldr	r6, .L305+12
 2776 0038 DFF8D090 		ldr	r9, .L305+36
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2777              		.loc 1 2050 0
 2778 003c DFF8D0B0 		ldr	fp, .L305+40
 2779              	.LVL237:
 2780              	.L280:
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2781              		.loc 1 2041 0
 2782 0040 DAF80030 		ldr	r3, [r10]
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2783              		.loc 1 2046 0
 2784 0044 0127     		movs	r7, #1
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2785              		.loc 1 2041 0
 2786 0046 33B3     		cbz	r3, .L304
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2787              		.loc 1 2043 0
 2788 0048 DAF80C30 		ldr	r3, [r10, #12]
 2789 004c DC68     		ldr	r4, [r3, #12]
 2790              	.LVL238:
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2791              		.loc 1 2045 0
 2792 004e 04F10408 		add	r8, r4, #4
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2793              		.loc 1 2044 0
 2794 0052 04F11800 		add	r0, r4, #24
 2795 0056 FFF7FEFF 		bl	uxListRemove
 2796              	.LVL239:
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2797              		.loc 1 2045 0
 2798 005a 4046     		mov	r0, r8
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 146


 2799 005c FFF7FEFF 		bl	uxListRemove
 2800              	.LVL240:
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2801              		.loc 1 2046 0
 2802 0060 E06A     		ldr	r0, [r4, #44]
 2803 0062 3268     		ldr	r2, [r6]
 2804 0064 07FA00F3 		lsl	r3, r7, r0
 2805 0068 00EB8000 		add	r0, r0, r0, lsl #2
 2806 006c 1343     		orrs	r3, r3, r2
 2807 006e 4146     		mov	r1, r8
 2808 0070 09EB8000 		add	r0, r9, r0, lsl #2
 2809 0074 3360     		str	r3, [r6]
 2810 0076 FFF7FEFF 		bl	vListInsertEnd
 2811              	.LVL241:
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2812              		.loc 1 2050 0
 2813 007a DBF80030 		ldr	r3, [fp]
 2814 007e E26A     		ldr	r2, [r4, #44]
 2815 0080 DB6A     		ldr	r3, [r3, #44]
 2816 0082 9A42     		cmp	r2, r3
 2817 0084 DCD3     		bcc	.L280
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2818              		.loc 1 2052 0
 2819 0086 2F60     		str	r7, [r5]
 2820 0088 DAE7     		b	.L280
 2821              	.LVL242:
 2822              	.L281:
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2823              		.loc 1 2020 0
 2824 008a 0024     		movs	r4, #0
 2825              	.LVL243:
 2826              	.L279:
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2827              		.loc 1 2121 0
 2828 008c FFF7FEFF 		bl	vPortExitCritical
 2829              	.LVL244:
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2830              		.loc 1 2124 0
 2831 0090 2046     		mov	r0, r4
 2832 0092 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2833              	.LVL245:
 2834              	.L304:
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2835              		.loc 1 2060 0
 2836 0096 3CB1     		cbz	r4, .L284
 2837              	.LBB336:
 2838              	.LBB337:
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2839              		.loc 1 3639 0
 2840 0098 174B     		ldr	r3, .L305+16
 2841 009a 1A68     		ldr	r2, [r3]
 2842 009c 1268     		ldr	r2, [r2]
 2843 009e DAB9     		cbnz	r2, .L285
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2844              		.loc 1 3645 0
 2845 00a0 164B     		ldr	r3, .L305+20
 2846 00a2 4FF0FF32 		mov	r2, #-1
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 147


 2847 00a6 1A60     		str	r2, [r3]
 2848              	.L284:
 2849              	.LBE337:
 2850              	.LBE336:
 2851              	.LBB341:
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2852              		.loc 1 2076 0
 2853 00a8 154E     		ldr	r6, .L305+24
 2854 00aa 3468     		ldr	r4, [r6]
 2855              	.LVL246:
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2856              		.loc 1 2078 0
 2857 00ac 3CB1     		cbz	r4, .L286
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2858              		.loc 1 2084 0
 2859 00ae 0127     		movs	r7, #1
 2860              	.LVL247:
 2861              	.L288:
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2862              		.loc 1 2082 0
 2863 00b0 FFF7FEFF 		bl	xTaskIncrementTick
 2864              	.LVL248:
 2865 00b4 00B1     		cbz	r0, .L287
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2866              		.loc 1 2084 0
 2867 00b6 2F60     		str	r7, [r5]
 2868              	.L287:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2869              		.loc 1 2091 0
 2870 00b8 013C     		subs	r4, r4, #1
 2871              	.LVL249:
 2872 00ba F9D1     		bne	.L288
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2873              		.loc 1 2093 0
 2874 00bc 3460     		str	r4, [r6]
 2875              	.LVL250:
 2876              	.L286:
 2877              	.LBE341:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2878              		.loc 1 2101 0
 2879 00be 2B68     		ldr	r3, [r5]
 2880 00c0 002B     		cmp	r3, #0
 2881 00c2 E2D0     		beq	.L281
 2882              	.LVL251:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2883              		.loc 1 2108 0
 2884 00c4 0F4B     		ldr	r3, .L305+28
 2885 00c6 4FF08052 		mov	r2, #268435456
 2886 00ca 1A60     		str	r2, [r3]
 2887              		.syntax unified
 2888              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2889 00cc BFF34F8F 		dsb
 2890              	@ 0 "" 2
 2891              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2892 00d0 BFF36F8F 		isb
 2893              	@ 0 "" 2
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 148


 2894              		.loc 1 2105 0
 2895              		.thumb
 2896              		.syntax unified
 2897 00d4 0124     		movs	r4, #1
 2898 00d6 D9E7     		b	.L279
 2899              	.LVL252:
 2900              	.L285:
 2901              	.LBB342:
 2902              	.LBB340:
 2903              	.LBB338:
 2904              	.LBB339:
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 2905              		.loc 1 3653 0
 2906 00d8 1A68     		ldr	r2, [r3]
 2907              	.LVL253:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2908              		.loc 1 3654 0
 2909 00da 084B     		ldr	r3, .L305+20
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 2910              		.loc 1 3653 0
 2911 00dc D268     		ldr	r2, [r2, #12]
 2912              	.LVL254:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2913              		.loc 1 3654 0
 2914 00de D268     		ldr	r2, [r2, #12]
 2915              	.LVL255:
 2916 00e0 5268     		ldr	r2, [r2, #4]
 2917              	.LVL256:
 2918 00e2 1A60     		str	r2, [r3]
 2919 00e4 E0E7     		b	.L284
 2920              	.L306:
 2921 00e6 00BF     		.align	2
 2922              	.L305:
 2923 00e8 00000000 		.word	.LANCHOR16
 2924 00ec 00000000 		.word	.LANCHOR7
 2925 00f0 00000000 		.word	.LANCHOR17
 2926 00f4 00000000 		.word	.LANCHOR2
 2927 00f8 00000000 		.word	.LANCHOR5
 2928 00fc 00000000 		.word	.LANCHOR6
 2929 0100 00000000 		.word	.LANCHOR20
 2930 0104 04ED00E0 		.word	-536810236
 2931 0108 00000000 		.word	.LANCHOR11
 2932 010c 00000000 		.word	.LANCHOR8
 2933 0110 00000000 		.word	.LANCHOR1
 2934              	.LBE339:
 2935              	.LBE338:
 2936              	.LBE340:
 2937              	.LBE342:
 2938              		.cfi_endproc
 2939              	.LFE20:
 2941              		.section	.text.vTaskDelay,"ax",%progbits
 2942              		.align	1
 2943              		.p2align 2,,3
 2944              		.global	vTaskDelay
 2945              		.syntax unified
 2946              		.thumb
 2947              		.thumb_func
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 149


 2948              		.fpu fpv4-sp-d16
 2950              	vTaskDelay:
 2951              	.LFB9:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2952              		.loc 1 1225 0
 2953              		.cfi_startproc
 2954              		@ args = 0, pretend = 0, frame = 0
 2955              		@ frame_needed = 0, uses_anonymous_args = 0
 2956              	.LVL257:
 2957 0000 08B5     		push	{r3, lr}
 2958              	.LCFI22:
 2959              		.cfi_def_cfa_offset 8
 2960              		.cfi_offset 3, -8
 2961              		.cfi_offset 14, -4
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2962              		.loc 1 1229 0
 2963 0002 98B1     		cbz	r0, .L312
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2964              		.loc 1 1231 0
 2965 0004 0E4B     		ldr	r3, .L317
 2966 0006 1968     		ldr	r1, [r3]
 2967 0008 41B1     		cbz	r1, .L310
 2968              	.LBB343:
 2969              	.LBB344:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2970              		.loc 2 237 0
 2971              		.syntax unified
 2972              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2973 000a 4FF05003 			mov r3, #80												
 2974 000e 83F31188 		msr basepri, r3											
 2975 0012 BFF36F8F 		isb														
 2976 0016 BFF34F8F 		dsb														
 2977              	
 2978              	@ 0 "" 2
 2979              	.LVL258:
 2980              		.thumb
 2981              		.syntax unified
 2982              	.L311:
 2983 001a FEE7     		b	.L311
 2984              	.L310:
 2985              	.LBE344:
 2986              	.LBE343:
 2987              	.LBB345:
 2988              	.LBB346:
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2989              		.loc 1 1950 0
 2990 001c 1A68     		ldr	r2, [r3]
 2991 001e 0132     		adds	r2, r2, #1
 2992 0020 1A60     		str	r2, [r3]
 2993              	.LBE346:
 2994              	.LBE345:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2995              		.loc 1 1243 0
 2996 0022 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2997              	.LVL259:
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2998              		.loc 1 1245 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 150


 2999 0026 FFF7FEFF 		bl	xTaskResumeAll
 3000              	.LVL260:
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3001              		.loc 1 1254 0
 3002 002a 38B9     		cbnz	r0, .L307
 3003              	.LVL261:
 3004              	.L312:
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3005              		.loc 1 1256 0
 3006 002c 054B     		ldr	r3, .L317+4
 3007 002e 4FF08052 		mov	r2, #268435456
 3008 0032 1A60     		str	r2, [r3]
 3009              		.syntax unified
 3010              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3011 0034 BFF34F8F 		dsb
 3012              	@ 0 "" 2
 3013              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3014 0038 BFF36F8F 		isb
 3015              	@ 0 "" 2
 3016              		.thumb
 3017              		.syntax unified
 3018              	.L307:
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3019              		.loc 1 1262 0
 3020 003c 08BD     		pop	{r3, pc}
 3021              	.L318:
 3022 003e 00BF     		.align	2
 3023              	.L317:
 3024 0040 00000000 		.word	.LANCHOR16
 3025 0044 04ED00E0 		.word	-536810236
 3026              		.cfi_endproc
 3027              	.LFE9:
 3029              		.section	.text.prvIdleTask,"ax",%progbits
 3030              		.align	1
 3031              		.p2align 2,,3
 3032              		.syntax unified
 3033              		.thumb
 3034              		.thumb_func
 3035              		.fpu fpv4-sp-d16
 3037              	prvIdleTask:
 3038              	.LFB34:
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 3039              		.loc 1 3132 0
 3040              		.cfi_startproc
 3041              		@ Volatile: function does not return.
 3042              		@ args = 0, pretend = 0, frame = 0
 3043              		@ frame_needed = 0, uses_anonymous_args = 0
 3044              	.LVL262:
 3045 0000 2DE98848 		push	{r3, r7, fp, lr}
 3046              	.LCFI23:
 3047              		.cfi_def_cfa_offset 16
 3048              		.cfi_offset 3, -16
 3049              		.cfi_offset 7, -12
 3050              		.cfi_offset 11, -8
 3051              		.cfi_offset 14, -4
 3052 0004 1C4C     		ldr	r4, .L330
 3053 0006 1D4E     		ldr	r6, .L330+4
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 151


 3054 0008 1D4D     		ldr	r5, .L330+8
 3055 000a DFF87C80 		ldr	r8, .L330+16
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3056              		.loc 1 3168 0
 3057 000e DFF87CA0 		ldr	r10, .L330+20
 3058 0012 4FF08059 		mov	r9, #268435456
 3059 0016 06E0     		b	.L321
 3060              	.LVL263:
 3061              	.L322:
 3062              	.LBB355:
 3063              	.LBB356:
 3064              	.LBB357:
 3065              	.LBB358:
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3066              		.loc 1 1950 0
 3067 0018 2368     		ldr	r3, [r4]
 3068              	.LBE358:
 3069              	.LBE357:
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3070              		.loc 1 3380 0
 3071 001a 3768     		ldr	r7, [r6]
 3072              	.LVL264:
 3073              	.LBB360:
 3074              	.LBB359:
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3075              		.loc 1 1950 0
 3076 001c 0133     		adds	r3, r3, #1
 3077 001e 2360     		str	r3, [r4]
 3078              	.LBE359:
 3079              	.LBE360:
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3080              		.loc 1 3382 0
 3081 0020 FFF7FEFF 		bl	xTaskResumeAll
 3082              	.LVL265:
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3083              		.loc 1 3384 0
 3084 0024 6FB9     		cbnz	r7, .L329
 3085              	.LVL266:
 3086              	.L321:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3087              		.loc 1 3376 0
 3088 0026 2B68     		ldr	r3, [r5]
 3089 0028 002B     		cmp	r3, #0
 3090 002a F5D1     		bne	.L322
 3091              	.LBE356:
 3092              	.LBE355:
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3093              		.loc 1 3166 0
 3094 002c D8F80030 		ldr	r3, [r8]
 3095 0030 012B     		cmp	r3, #1
 3096 0032 F8D9     		bls	.L321
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3097              		.loc 1 3168 0
 3098 0034 CAF80090 		str	r9, [r10]
 3099              		.syntax unified
 3100              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3101 0038 BFF34F8F 		dsb
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 152


 3102              	@ 0 "" 2
 3103              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3104 003c BFF36F8F 		isb
 3105              	@ 0 "" 2
 3106              		.thumb
 3107              		.syntax unified
 3108 0040 F1E7     		b	.L321
 3109              	.LVL267:
 3110              	.L329:
 3111              	.LBB365:
 3112              	.LBB364:
 3113              	.LBB361:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3114              		.loc 1 3388 0
 3115 0042 FFF7FEFF 		bl	vPortEnterCritical
 3116              	.LVL268:
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3117              		.loc 1 3390 0
 3118 0046 F368     		ldr	r3, [r6, #12]
 3119 0048 D3F80CB0 		ldr	fp, [r3, #12]
 3120              	.LVL269:
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 3121              		.loc 1 3391 0
 3122 004c 0BF10400 		add	r0, fp, #4
 3123 0050 FFF7FEFF 		bl	uxListRemove
 3124              	.LVL270:
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 3125              		.loc 1 3392 0
 3126 0054 0B4A     		ldr	r2, .L330+12
 3127 0056 1368     		ldr	r3, [r2]
 3128 0058 013B     		subs	r3, r3, #1
 3129 005a 1360     		str	r3, [r2]
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3130              		.loc 1 3393 0
 3131 005c 2B68     		ldr	r3, [r5]
 3132 005e 013B     		subs	r3, r3, #1
 3133 0060 2B60     		str	r3, [r5]
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3134              		.loc 1 3395 0
 3135 0062 FFF7FEFF 		bl	vPortExitCritical
 3136              	.LVL271:
 3137              	.LBB362:
 3138              	.LBB363:
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 3139              		.loc 1 3600 0
 3140 0066 DBF83000 		ldr	r0, [fp, #48]
 3141 006a FFF7FEFF 		bl	vPortFree
 3142              	.LVL272:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3143              		.loc 1 3601 0
 3144 006e 5846     		mov	r0, fp
 3145 0070 FFF7FEFF 		bl	vPortFree
 3146              	.LVL273:
 3147 0074 D7E7     		b	.L321
 3148              	.L331:
 3149 0076 00BF     		.align	2
 3150              	.L330:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 153


 3151 0078 00000000 		.word	.LANCHOR16
 3152 007c 00000000 		.word	.LANCHOR12
 3153 0080 00000000 		.word	.LANCHOR15
 3154 0084 00000000 		.word	.LANCHOR7
 3155 0088 00000000 		.word	.LANCHOR8
 3156 008c 04ED00E0 		.word	-536810236
 3157              	.LBE363:
 3158              	.LBE362:
 3159              	.LBE361:
 3160              	.LBE364:
 3161              	.LBE365:
 3162              		.cfi_endproc
 3163              	.LFE34:
 3165              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3166              		.align	1
 3167              		.p2align 2,,3
 3168              		.global	vTaskSwitchContext
 3169              		.syntax unified
 3170              		.thumb
 3171              		.thumb_func
 3172              		.fpu fpv4-sp-d16
 3174              	vTaskSwitchContext:
 3175              	.LFB26:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3176              		.loc 1 2762 0
 3177              		.cfi_startproc
 3178              		@ args = 0, pretend = 0, frame = 0
 3179              		@ frame_needed = 0, uses_anonymous_args = 0
 3180              		@ link register save eliminated.
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3181              		.loc 1 2763 0
 3182 0000 194B     		ldr	r3, .L344
 3183 0002 1B68     		ldr	r3, [r3]
 3184 0004 EBB9     		cbnz	r3, .L341
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3185              		.loc 1 2771 0
 3186 0006 1949     		ldr	r1, .L344+4
 3187              	.LBB378:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3188              		.loc 1 2806 0
 3189 0008 194A     		ldr	r2, .L344+8
 3190              	.LBE378:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3191              		.loc 1 2762 0
 3192 000a 10B4     		push	{r4}
 3193              	.LCFI24:
 3194              		.cfi_def_cfa_offset 4
 3195              		.cfi_offset 4, -4
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3196              		.loc 1 2771 0
 3197 000c 0B60     		str	r3, [r1]
 3198              	.LBB383:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3199              		.loc 1 2806 0
 3200 000e 1368     		ldr	r3, [r2]
 3201              	.LVL274:
 3202              	.LBB379:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 154


 3203              	.LBB380:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3204              		.loc 2 176 0
 3205              		.syntax unified
 3206              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3207 0010 B3FA83F3 		clz r3, r3
 3208              	@ 0 "" 2
 3209              	.LVL275:
 3210              		.thumb
 3211              		.syntax unified
 3212 0014 DBB2     		uxtb	r3, r3
 3213              	.LBE380:
 3214              	.LBE379:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3215              		.loc 1 2806 0
 3216 0016 C3F11F03 		rsb	r3, r3, #31
 3217              	.LVL276:
 3218 001a 03EB8302 		add	r2, r3, r3, lsl #2
 3219 001e 9200     		lsls	r2, r2, #2
 3220 0020 1448     		ldr	r0, .L344+12
 3221 0022 8158     		ldr	r1, [r0, r2]
 3222 0024 8418     		adds	r4, r0, r2
 3223 0026 81B1     		cbz	r1, .L342
 3224              	.LVL277:
 3225              	.LBB381:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3226              		.loc 1 2806 0 is_stmt 0 discriminator 2
 3227 0028 6168     		ldr	r1, [r4, #4]
 3228 002a 0832     		adds	r2, r2, #8
 3229 002c 4968     		ldr	r1, [r1, #4]
 3230 002e 6160     		str	r1, [r4, #4]
 3231 0030 0244     		add	r2, r2, r0
 3232 0032 9142     		cmp	r1, r2
 3233 0034 12D0     		beq	.L343
 3234              	.LVL278:
 3235              	.L337:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3236              		.loc 1 2806 0 discriminator 5
 3237 0036 104B     		ldr	r3, .L344+16
 3238 0038 CA68     		ldr	r2, [r1, #12]
 3239 003a 1A60     		str	r2, [r3]
 3240              	.LBE381:
 3241              	.LBE383:
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3242              		.loc 1 2817 0 is_stmt 1 discriminator 5
 3243 003c 5DF8044B 		ldr	r4, [sp], #4
 3244              	.LCFI25:
 3245              		.cfi_restore 4
 3246              		.cfi_def_cfa_offset 0
 3247 0040 7047     		bx	lr
 3248              	.L341:
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3249              		.loc 1 2767 0
 3250 0042 0A4B     		ldr	r3, .L344+4
 3251 0044 0122     		movs	r2, #1
 3252 0046 1A60     		str	r2, [r3]
 3253 0048 7047     		bx	lr
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 155


 3254              	.LVL279:
 3255              	.L342:
 3256              	.LCFI26:
 3257              		.cfi_def_cfa_offset 4
 3258              		.cfi_offset 4, -4
 3259              	.LBB384:
 3260              	.LBB385:
 3261              	.LBB386:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3262              		.loc 2 237 0
 3263              		.syntax unified
 3264              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3265 004a 4FF05003 			mov r3, #80												
 3266 004e 83F31188 		msr basepri, r3											
 3267 0052 BFF36F8F 		isb														
 3268 0056 BFF34F8F 		dsb														
 3269              	
 3270              	@ 0 "" 2
 3271              	.LVL280:
 3272              		.thumb
 3273              		.syntax unified
 3274              	.L336:
 3275 005a FEE7     		b	.L336
 3276              	.LVL281:
 3277              	.L343:
 3278              	.LBE386:
 3279              	.LBE385:
 3280              	.LBE384:
 3281              	.LBB387:
 3282              	.LBB382:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3283              		.loc 1 2806 0 discriminator 3
 3284 005c 1422     		movs	r2, #20
 3285 005e 02FB0303 		mla	r3, r2, r3, r0
 3286              	.LVL282:
 3287 0062 4968     		ldr	r1, [r1, #4]
 3288 0064 5960     		str	r1, [r3, #4]
 3289 0066 E6E7     		b	.L337
 3290              	.L345:
 3291              		.align	2
 3292              	.L344:
 3293 0068 00000000 		.word	.LANCHOR16
 3294 006c 00000000 		.word	.LANCHOR17
 3295 0070 00000000 		.word	.LANCHOR2
 3296 0074 00000000 		.word	.LANCHOR8
 3297 0078 00000000 		.word	.LANCHOR1
 3298              	.LBE382:
 3299              	.LBE387:
 3300              		.cfi_endproc
 3301              	.LFE26:
 3303              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3304              		.align	1
 3305              		.p2align 2,,3
 3306              		.global	vTaskPlaceOnEventList
 3307              		.syntax unified
 3308              		.thumb
 3309              		.thumb_func
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 156


 3310              		.fpu fpv4-sp-d16
 3312              	vTaskPlaceOnEventList:
 3313              	.LFB27:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3314              		.loc 1 2821 0
 3315              		.cfi_startproc
 3316              		@ args = 0, pretend = 0, frame = 0
 3317              		@ frame_needed = 0, uses_anonymous_args = 0
 3318              	.LVL283:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3319              		.loc 1 2822 0
 3320 0000 40B9     		cbnz	r0, .L347
 3321              	.LBB394:
 3322              	.LBB395:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3323              		.loc 2 237 0
 3324              		.syntax unified
 3325              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3326 0002 4FF05003 			mov r3, #80												
 3327 0006 83F31188 		msr basepri, r3											
 3328 000a BFF36F8F 		isb														
 3329 000e BFF34F8F 		dsb														
 3330              	
 3331              	@ 0 "" 2
 3332              	.LVL284:
 3333              		.thumb
 3334              		.syntax unified
 3335              	.L348:
 3336 0012 FEE7     		b	.L348
 3337              	.L347:
 3338              	.LBE395:
 3339              	.LBE394:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3340              		.loc 1 2821 0
 3341 0014 70B5     		push	{r4, r5, r6, lr}
 3342              	.LCFI27:
 3343              		.cfi_def_cfa_offset 16
 3344              		.cfi_offset 4, -16
 3345              		.cfi_offset 5, -12
 3346              		.cfi_offset 6, -8
 3347              		.cfi_offset 14, -4
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3348              		.loc 1 2831 0
 3349 0016 1B4D     		ldr	r5, .L359
 3350 0018 0C46     		mov	r4, r1
 3351 001a 2968     		ldr	r1, [r5]
 3352              	.LVL285:
 3353 001c 1831     		adds	r1, r1, #24
 3354 001e FFF7FEFF 		bl	vListInsert
 3355              	.LVL286:
 3356              	.LBB396:
 3357              	.LBB397:
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3358              		.loc 1 4695 0
 3359 0022 194B     		ldr	r3, .L359+4
 3360 0024 1E68     		ldr	r6, [r3]
 3361              	.LVL287:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 157


4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3362              		.loc 1 4708 0
 3363 0026 2868     		ldr	r0, [r5]
 3364 0028 0430     		adds	r0, r0, #4
 3365 002a FFF7FEFF 		bl	uxListRemove
 3366              	.LVL288:
 3367 002e 40B9     		cbnz	r0, .L349
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3368              		.loc 1 4712 0
 3369 0030 2B68     		ldr	r3, [r5]
 3370 0032 1649     		ldr	r1, .L359+8
 3371 0034 D86A     		ldr	r0, [r3, #44]
 3372 0036 0B68     		ldr	r3, [r1]
 3373 0038 0122     		movs	r2, #1
 3374 003a 8240     		lsls	r2, r2, r0
 3375 003c 23EA0203 		bic	r3, r3, r2
 3376 0040 0B60     		str	r3, [r1]
 3377              	.L349:
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3378              		.loc 1 4721 0
 3379 0042 631C     		adds	r3, r4, #1
 3380 0044 0FD0     		beq	.L357
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3381              		.loc 1 4736 0
 3382 0046 2B68     		ldr	r3, [r5]
 3383 0048 A419     		adds	r4, r4, r6
 3384              	.LVL289:
 3385 004a 5C60     		str	r4, [r3, #4]
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3386              		.loc 1 4738 0
 3387 004c 12D2     		bcs	.L358
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3388              		.loc 1 4748 0
 3389 004e 104B     		ldr	r3, .L359+12
 3390 0050 1868     		ldr	r0, [r3]
 3391 0052 2968     		ldr	r1, [r5]
 3392 0054 0431     		adds	r1, r1, #4
 3393 0056 FFF7FEFF 		bl	vListInsert
 3394              	.LVL290:
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3395              		.loc 1 4753 0
 3396 005a 0E4B     		ldr	r3, .L359+16
 3397 005c 1A68     		ldr	r2, [r3]
 3398 005e 9442     		cmp	r4, r2
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3399              		.loc 1 4755 0
 3400 0060 38BF     		it	cc
 3401 0062 1C60     		strcc	r4, [r3]
 3402              	.LVL291:
 3403              	.LBE397:
 3404              	.LBE396:
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3405              		.loc 1 2834 0
 3406 0064 70BD     		pop	{r4, r5, r6, pc}
 3407              	.LVL292:
 3408              	.L357:
 3409              	.LBB405:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 158


 3410              	.LBB402:
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3411              		.loc 1 4726 0
 3412 0066 2968     		ldr	r1, [r5]
 3413 0068 0B48     		ldr	r0, .L359+20
 3414 006a 0431     		adds	r1, r1, #4
 3415              	.LBE402:
 3416              	.LBE405:
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3417              		.loc 1 2834 0
 3418 006c BDE87040 		pop	{r4, r5, r6, lr}
 3419              	.LCFI28:
 3420              		.cfi_remember_state
 3421              		.cfi_restore 14
 3422              		.cfi_restore 6
 3423              		.cfi_restore 5
 3424              		.cfi_restore 4
 3425              		.cfi_def_cfa_offset 0
 3426              	.LVL293:
 3427              	.LBB406:
 3428              	.LBB403:
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3429              		.loc 1 4726 0
 3430 0070 FFF7FEBF 		b	vListInsertEnd
 3431              	.LVL294:
 3432              	.L358:
 3433              	.LCFI29:
 3434              		.cfi_restore_state
 3435              	.LBB398:
 3436              	.LBB399:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3437              		.loc 1 4742 0
 3438 0074 094B     		ldr	r3, .L359+24
 3439 0076 1868     		ldr	r0, [r3]
 3440 0078 2968     		ldr	r1, [r5]
 3441              	.LBE399:
 3442              	.LBE398:
 3443              	.LBE403:
 3444              	.LBE406:
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3445              		.loc 1 2834 0
 3446 007a BDE87040 		pop	{r4, r5, r6, lr}
 3447              	.LCFI30:
 3448              		.cfi_restore 14
 3449              		.cfi_restore 6
 3450              		.cfi_restore 5
 3451              		.cfi_restore 4
 3452              		.cfi_def_cfa_offset 0
 3453              	.LVL295:
 3454              	.LBB407:
 3455              	.LBB404:
 3456              	.LBB401:
 3457              	.LBB400:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3458              		.loc 1 4742 0
 3459 007e 0431     		adds	r1, r1, #4
 3460 0080 FFF7FEBF 		b	vListInsert
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 159


 3461              	.LVL296:
 3462              	.L360:
 3463              		.align	2
 3464              	.L359:
 3465 0084 00000000 		.word	.LANCHOR1
 3466 0088 00000000 		.word	.LANCHOR0
 3467 008c 00000000 		.word	.LANCHOR2
 3468 0090 00000000 		.word	.LANCHOR5
 3469 0094 00000000 		.word	.LANCHOR6
 3470 0098 00000000 		.word	.LANCHOR3
 3471 009c 00000000 		.word	.LANCHOR4
 3472              	.LBE400:
 3473              	.LBE401:
 3474              	.LBE404:
 3475              	.LBE407:
 3476              		.cfi_endproc
 3477              	.LFE27:
 3479              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3480              		.align	1
 3481              		.p2align 2,,3
 3482              		.global	vTaskPlaceOnUnorderedEventList
 3483              		.syntax unified
 3484              		.thumb
 3485              		.thumb_func
 3486              		.fpu fpv4-sp-d16
 3488              	vTaskPlaceOnUnorderedEventList:
 3489              	.LFB28:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3490              		.loc 1 2838 0
 3491              		.cfi_startproc
 3492              		@ args = 0, pretend = 0, frame = 0
 3493              		@ frame_needed = 0, uses_anonymous_args = 0
 3494              	.LVL297:
 3495 0000 38B5     		push	{r3, r4, r5, lr}
 3496              	.LCFI31:
 3497              		.cfi_def_cfa_offset 16
 3498              		.cfi_offset 3, -16
 3499              		.cfi_offset 4, -12
 3500              		.cfi_offset 5, -8
 3501              		.cfi_offset 14, -4
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3502              		.loc 1 2839 0
 3503 0002 58B1     		cbz	r0, .L367
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3504              		.loc 1 2843 0
 3505 0004 124B     		ldr	r3, .L368
 3506 0006 1B68     		ldr	r3, [r3]
 3507 0008 8BB9     		cbnz	r3, .L364
 3508              	.LBB408:
 3509              	.LBB409:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3510              		.loc 2 237 0
 3511              		.syntax unified
 3512              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3513 000a 4FF05003 			mov r3, #80												
 3514 000e 83F31188 		msr basepri, r3											
 3515 0012 BFF36F8F 		isb														
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 160


 3516 0016 BFF34F8F 		dsb														
 3517              	
 3518              	@ 0 "" 2
 3519              	.LVL298:
 3520              		.thumb
 3521              		.syntax unified
 3522              	.L365:
 3523 001a FEE7     		b	.L365
 3524              	.L367:
 3525              	.LBE409:
 3526              	.LBE408:
 3527              	.LBB410:
 3528              	.LBB411:
 3529              		.syntax unified
 3530              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3531 001c 4FF05003 			mov r3, #80												
 3532 0020 83F31188 		msr basepri, r3											
 3533 0024 BFF36F8F 		isb														
 3534 0028 BFF34F8F 		dsb														
 3535              	
 3536              	@ 0 "" 2
 3537              	.LVL299:
 3538              		.thumb
 3539              		.syntax unified
 3540              	.L363:
 3541 002c FEE7     		b	.L363
 3542              	.L364:
 3543 002e 1446     		mov	r4, r2
 3544              	.LBE411:
 3545              	.LBE410:
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3546              		.loc 1 2848 0
 3547 0030 084A     		ldr	r2, .L368+4
 3548              	.LVL300:
 3549 0032 0B46     		mov	r3, r1
 3550 0034 1568     		ldr	r5, [r2]
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3551              		.loc 1 2855 0
 3552 0036 1168     		ldr	r1, [r2]
 3553              	.LVL301:
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3554              		.loc 1 2848 0
 3555 0038 43F00043 		orr	r3, r3, #-2147483648
 3556              	.LVL302:
 3557 003c AB61     		str	r3, [r5, #24]
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3558              		.loc 1 2855 0
 3559 003e 1831     		adds	r1, r1, #24
 3560 0040 FFF7FEFF 		bl	vListInsertEnd
 3561              	.LVL303:
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3562              		.loc 1 2857 0
 3563 0044 2046     		mov	r0, r4
 3564 0046 0121     		movs	r1, #1
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3565              		.loc 1 2858 0
 3566 0048 BDE83840 		pop	{r3, r4, r5, lr}
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 161


 3567              	.LCFI32:
 3568              		.cfi_restore 14
 3569              		.cfi_restore 5
 3570              		.cfi_restore 4
 3571              		.cfi_restore 3
 3572              		.cfi_def_cfa_offset 0
 3573              	.LVL304:
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3574              		.loc 1 2857 0
 3575 004c FFF7FEBF 		b	prvAddCurrentTaskToDelayedList
 3576              	.LVL305:
 3577              	.L369:
 3578              		.align	2
 3579              	.L368:
 3580 0050 00000000 		.word	.LANCHOR16
 3581 0054 00000000 		.word	.LANCHOR1
 3582              		.cfi_endproc
 3583              	.LFE28:
 3585              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3586              		.align	1
 3587              		.p2align 2,,3
 3588              		.global	xTaskRemoveFromEventList
 3589              		.syntax unified
 3590              		.thumb
 3591              		.thumb_func
 3592              		.fpu fpv4-sp-d16
 3594              	xTaskRemoveFromEventList:
 3595              	.LFB29:
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3596              		.loc 1 2895 0
 3597              		.cfi_startproc
 3598              		@ args = 0, pretend = 0, frame = 0
 3599              		@ frame_needed = 0, uses_anonymous_args = 0
 3600              	.LVL306:
 3601 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3602              	.LCFI33:
 3603              		.cfi_def_cfa_offset 24
 3604              		.cfi_offset 3, -24
 3605              		.cfi_offset 4, -20
 3606              		.cfi_offset 5, -16
 3607              		.cfi_offset 6, -12
 3608              		.cfi_offset 7, -8
 3609              		.cfi_offset 14, -4
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3610              		.loc 1 2912 0
 3611 0002 C368     		ldr	r3, [r0, #12]
 3612 0004 DC68     		ldr	r4, [r3, #12]
 3613              	.LVL307:
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3614              		.loc 1 2913 0
 3615 0006 2CB3     		cbz	r4, .L378
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3616              		.loc 1 2914 0
 3617 0008 04F11805 		add	r5, r4, #24
 3618 000c 2846     		mov	r0, r5
 3619              	.LVL308:
 3620 000e FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 162


 3621              	.LVL309:
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3622              		.loc 1 2916 0
 3623 0012 174B     		ldr	r3, .L379
 3624 0014 1B68     		ldr	r3, [r3]
 3625 0016 33BB     		cbnz	r3, .L373
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3626              		.loc 1 2918 0
 3627 0018 261D     		adds	r6, r4, #4
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3628              		.loc 1 2919 0
 3629 001a 164D     		ldr	r5, .L379+4
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3630              		.loc 1 2918 0
 3631 001c 3046     		mov	r0, r6
 3632 001e FFF7FEFF 		bl	uxListRemove
 3633              	.LVL310:
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3634              		.loc 1 2919 0
 3635 0022 E26A     		ldr	r2, [r4, #44]
 3636 0024 2F68     		ldr	r7, [r5]
 3637 0026 1448     		ldr	r0, .L379+8
 3638 0028 0123     		movs	r3, #1
 3639 002a 9340     		lsls	r3, r3, r2
 3640 002c 02EB8202 		add	r2, r2, r2, lsl #2
 3641 0030 3B43     		orrs	r3, r3, r7
 3642 0032 3146     		mov	r1, r6
 3643 0034 00EB8200 		add	r0, r0, r2, lsl #2
 3644 0038 2B60     		str	r3, [r5]
 3645 003a FFF7FEFF 		bl	vListInsertEnd
 3646              	.LVL311:
 3647              	.L374:
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3648              		.loc 1 2928 0
 3649 003e 0F4B     		ldr	r3, .L379+12
 3650 0040 E26A     		ldr	r2, [r4, #44]
 3651 0042 1B68     		ldr	r3, [r3]
 3652 0044 DB6A     		ldr	r3, [r3, #44]
 3653 0046 9A42     		cmp	r2, r3
 3654              	.LVL312:
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3655              		.loc 1 2937 0
 3656 0048 83BF     		ittte	hi
 3657 004a 0D4B     		ldrhi	r3, .L379+16
 3658 004c 0120     		movhi	r0, #1
 3659 004e 1860     		strhi	r0, [r3]
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3660              		.loc 1 2941 0
 3661 0050 0020     		movls	r0, #0
 3662              	.LVL313:
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3663              		.loc 1 2959 0
 3664 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3665              	.LVL314:
 3666              	.L378:
 3667              	.LBB412:
 3668              	.LBB413:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 163


 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3669              		.loc 2 237 0
 3670              		.syntax unified
 3671              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3672 0054 4FF05003 			mov r3, #80												
 3673 0058 83F31188 		msr basepri, r3											
 3674 005c BFF36F8F 		isb														
 3675 0060 BFF34F8F 		dsb														
 3676              	
 3677              	@ 0 "" 2
 3678              	.LVL315:
 3679              		.thumb
 3680              		.syntax unified
 3681              	.L372:
 3682 0064 FEE7     		b	.L372
 3683              	.LVL316:
 3684              	.L373:
 3685              	.LBE413:
 3686              	.LBE412:
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3687              		.loc 1 2925 0
 3688 0066 2946     		mov	r1, r5
 3689 0068 0648     		ldr	r0, .L379+20
 3690 006a FFF7FEFF 		bl	vListInsertEnd
 3691              	.LVL317:
 3692 006e E6E7     		b	.L374
 3693              	.L380:
 3694              		.align	2
 3695              	.L379:
 3696 0070 00000000 		.word	.LANCHOR16
 3697 0074 00000000 		.word	.LANCHOR2
 3698 0078 00000000 		.word	.LANCHOR8
 3699 007c 00000000 		.word	.LANCHOR1
 3700 0080 00000000 		.word	.LANCHOR17
 3701 0084 00000000 		.word	.LANCHOR11
 3702              		.cfi_endproc
 3703              	.LFE29:
 3705              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3706              		.align	1
 3707              		.p2align 2,,3
 3708              		.global	xTaskRemoveFromUnorderedEventList
 3709              		.syntax unified
 3710              		.thumb
 3711              		.thumb_func
 3712              		.fpu fpv4-sp-d16
 3714              	xTaskRemoveFromUnorderedEventList:
 3715              	.LFB30:
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3716              		.loc 1 2963 0
 3717              		.cfi_startproc
 3718              		@ args = 0, pretend = 0, frame = 0
 3719              		@ frame_needed = 0, uses_anonymous_args = 0
 3720              	.LVL318:
 3721 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3722              	.LCFI34:
 3723              		.cfi_def_cfa_offset 24
 3724              		.cfi_offset 3, -24
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 164


 3725              		.cfi_offset 4, -20
 3726              		.cfi_offset 5, -16
 3727              		.cfi_offset 6, -12
 3728              		.cfi_offset 7, -8
 3729              		.cfi_offset 14, -4
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3730              		.loc 1 2969 0
 3731 0002 1E4B     		ldr	r3, .L390
 3732 0004 1B68     		ldr	r3, [r3]
 3733 0006 43B9     		cbnz	r3, .L382
 3734              	.LBB414:
 3735              	.LBB415:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3736              		.loc 2 237 0
 3737              		.syntax unified
 3738              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3739 0008 4FF05003 			mov r3, #80												
 3740 000c 83F31188 		msr basepri, r3											
 3741 0010 BFF36F8F 		isb														
 3742 0014 BFF34F8F 		dsb														
 3743              	
 3744              	@ 0 "" 2
 3745              	.LVL319:
 3746              		.thumb
 3747              		.syntax unified
 3748              	.L383:
 3749 0018 FEE7     		b	.L383
 3750              	.L382:
 3751              	.LBE415:
 3752              	.LBE414:
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3753              		.loc 1 2976 0
 3754 001a C468     		ldr	r4, [r0, #12]
 3755              	.LVL320:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3756              		.loc 1 2972 0
 3757 001c 41F00041 		orr	r1, r1, #-2147483648
 3758              	.LVL321:
 3759 0020 0160     		str	r1, [r0]
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3760              		.loc 1 2977 0
 3761 0022 14B3     		cbz	r4, .L389
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3762              		.loc 1 2983 0
 3763 0024 271D     		adds	r7, r4, #4
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3764              		.loc 1 2978 0
 3765 0026 FFF7FEFF 		bl	uxListRemove
 3766              	.LVL322:
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3767              		.loc 1 2984 0
 3768 002a 154E     		ldr	r6, .L390+4
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3769              		.loc 1 2983 0
 3770 002c 3846     		mov	r0, r7
 3771 002e FFF7FEFF 		bl	uxListRemove
 3772              	.LVL323:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 165


2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3773              		.loc 1 2984 0
 3774 0032 E36A     		ldr	r3, [r4, #44]
 3775 0034 D6F800C0 		ldr	ip, [r6]
 3776 0038 1248     		ldr	r0, .L390+8
 3777 003a 0125     		movs	r5, #1
 3778 003c 05FA03F2 		lsl	r2, r5, r3
 3779 0040 03EB8303 		add	r3, r3, r3, lsl #2
 3780 0044 00EB8300 		add	r0, r0, r3, lsl #2
 3781 0048 42EA0C02 		orr	r2, r2, ip
 3782 004c 3946     		mov	r1, r7
 3783 004e 3260     		str	r2, [r6]
 3784 0050 FFF7FEFF 		bl	vListInsertEnd
 3785              	.LVL324:
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3786              		.loc 1 2986 0
 3787 0054 0C4B     		ldr	r3, .L390+12
 3788 0056 E26A     		ldr	r2, [r4, #44]
 3789 0058 1B68     		ldr	r3, [r3]
 3790 005a DB6A     		ldr	r3, [r3, #44]
 3791 005c 9A42     		cmp	r2, r3
 3792              	.LVL325:
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3793              		.loc 1 2996 0
 3794 005e 83BF     		ittte	hi
 3795 0060 0A4B     		ldrhi	r3, .L390+16
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3796              		.loc 1 2992 0
 3797 0062 2846     		movhi	r0, r5
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3798              		.loc 1 2996 0
 3799 0064 1D60     		strhi	r5, [r3]
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3800              		.loc 1 3000 0
 3801 0066 0020     		movls	r0, #0
 3802              	.LVL326:
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3803              		.loc 1 3004 0
 3804 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3805              	.LVL327:
 3806              	.L389:
 3807              	.LBB416:
 3808              	.LBB417:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3809              		.loc 2 237 0
 3810              		.syntax unified
 3811              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3812 006a 4FF05003 			mov r3, #80												
 3813 006e 83F31188 		msr basepri, r3											
 3814 0072 BFF36F8F 		isb														
 3815 0076 BFF34F8F 		dsb														
 3816              	
 3817              	@ 0 "" 2
 3818              	.LVL328:
 3819              		.thumb
 3820              		.syntax unified
 3821              	.L385:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 166


 3822 007a FEE7     		b	.L385
 3823              	.L391:
 3824              		.align	2
 3825              	.L390:
 3826 007c 00000000 		.word	.LANCHOR16
 3827 0080 00000000 		.word	.LANCHOR2
 3828 0084 00000000 		.word	.LANCHOR8
 3829 0088 00000000 		.word	.LANCHOR1
 3830 008c 00000000 		.word	.LANCHOR17
 3831              	.LBE417:
 3832              	.LBE416:
 3833              		.cfi_endproc
 3834              	.LFE30:
 3836              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3837              		.align	1
 3838              		.p2align 2,,3
 3839              		.global	vTaskSetTimeOutState
 3840              		.syntax unified
 3841              		.thumb
 3842              		.thumb_func
 3843              		.fpu fpv4-sp-d16
 3845              	vTaskSetTimeOutState:
 3846              	.LFB31:
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3847              		.loc 1 3008 0
 3848              		.cfi_startproc
 3849              		@ args = 0, pretend = 0, frame = 0
 3850              		@ frame_needed = 0, uses_anonymous_args = 0
 3851              		@ link register save eliminated.
 3852              	.LVL329:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3853              		.loc 1 3009 0
 3854 0000 30B1     		cbz	r0, .L395
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3855              		.loc 1 3010 0
 3856 0002 084A     		ldr	r2, .L396
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3857              		.loc 1 3011 0
 3858 0004 084B     		ldr	r3, .L396+4
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3859              		.loc 1 3010 0
 3860 0006 1268     		ldr	r2, [r2]
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3861              		.loc 1 3011 0
 3862 0008 1B68     		ldr	r3, [r3]
 3863 000a C0E90023 		strd	r2, r3, [r0]
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3864              		.loc 1 3012 0
 3865 000e 7047     		bx	lr
 3866              	.L395:
 3867              	.LVL330:
 3868              	.LBB422:
 3869              	.LBB423:
 3870              	.LBB424:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3871              		.loc 2 237 0
 3872              		.syntax unified
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 167


 3873              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3874 0010 4FF05003 			mov r3, #80												
 3875 0014 83F31188 		msr basepri, r3											
 3876 0018 BFF36F8F 		isb														
 3877 001c BFF34F8F 		dsb														
 3878              	
 3879              	@ 0 "" 2
 3880              	.LVL331:
 3881              		.thumb
 3882              		.syntax unified
 3883              	.L394:
 3884 0020 FEE7     		b	.L394
 3885              	.L397:
 3886 0022 00BF     		.align	2
 3887              	.L396:
 3888 0024 00000000 		.word	.LANCHOR19
 3889 0028 00000000 		.word	.LANCHOR0
 3890              	.LBE424:
 3891              	.LBE423:
 3892              	.LBE422:
 3893              		.cfi_endproc
 3894              	.LFE31:
 3896              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3897              		.align	1
 3898              		.p2align 2,,3
 3899              		.global	xTaskCheckForTimeOut
 3900              		.syntax unified
 3901              		.thumb
 3902              		.thumb_func
 3903              		.fpu fpv4-sp-d16
 3905              	xTaskCheckForTimeOut:
 3906              	.LFB32:
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3907              		.loc 1 3016 0
 3908              		.cfi_startproc
 3909              		@ args = 0, pretend = 0, frame = 0
 3910              		@ frame_needed = 0, uses_anonymous_args = 0
 3911              	.LVL332:
 3912 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3913              	.LCFI35:
 3914              		.cfi_def_cfa_offset 24
 3915              		.cfi_offset 3, -24
 3916              		.cfi_offset 4, -20
 3917              		.cfi_offset 5, -16
 3918              		.cfi_offset 6, -12
 3919              		.cfi_offset 7, -8
 3920              		.cfi_offset 14, -4
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3921              		.loc 1 3019 0
 3922 0002 60B3     		cbz	r0, .L409
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3923              		.loc 1 3020 0
 3924 0004 11B3     		cbz	r1, .L410
 3925 0006 0D46     		mov	r5, r1
 3926 0008 0446     		mov	r4, r0
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3927              		.loc 1 3022 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 168


 3928 000a FFF7FEFF 		bl	vPortEnterCritical
 3929              	.LVL333:
 3930              	.LBB425:
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3931              		.loc 1 3039 0
 3932 000e 2B68     		ldr	r3, [r5]
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3933              		.loc 1 3025 0
 3934 0010 DFF868C0 		ldr	ip, .L411+4
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3935              		.loc 1 3039 0
 3936 0014 5A1C     		adds	r2, r3, #1
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3937              		.loc 1 3025 0
 3938 0016 DCF80010 		ldr	r1, [ip]
 3939              	.LVL334:
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3940              		.loc 1 3039 0
 3941 001a 29D0     		beq	.L405
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3942              		.loc 1 3049 0
 3943 001c 164E     		ldr	r6, .L411
 3944 001e D4E90002 		ldrd	r0, r2, [r4]
 3945 0022 3768     		ldr	r7, [r6]
 3946 0024 B842     		cmp	r0, r7
 3947 0026 01D0     		beq	.L404
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3948              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3949 0028 9142     		cmp	r1, r2
 3950 002a 23D2     		bcs	.L407
 3951              	.L404:
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3952              		.loc 1 3058 0 is_stmt 1
 3953 002c 8F1A     		subs	r7, r1, r2
 3954 002e BB42     		cmp	r3, r7
 3955 0030 20D9     		bls	.L407
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3956              		.loc 1 3061 0
 3957 0032 5B1A     		subs	r3, r3, r1
 3958 0034 1344     		add	r3, r3, r2
 3959              	.LBB426:
 3960              	.LBB427:
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3961              		.loc 1 3010 0
 3962 0036 3168     		ldr	r1, [r6]
 3963              	.LVL335:
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3964              		.loc 1 3011 0
 3965 0038 DCF80020 		ldr	r2, [ip]
 3966              	.LBE427:
 3967              	.LBE426:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3968              		.loc 1 3061 0
 3969 003c 2B60     		str	r3, [r5]
 3970              	.LVL336:
 3971              	.LBB429:
 3972              	.LBB428:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 169


3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3973              		.loc 1 3011 0
 3974 003e C4E90012 		strd	r1, r2, [r4]
 3975              	.LVL337:
 3976              	.LBE428:
 3977              	.LBE429:
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3978              		.loc 1 3063 0
 3979 0042 0025     		movs	r5, #0
 3980              	.LVL338:
 3981              	.L403:
 3982              	.LBE425:
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3983              		.loc 1 3070 0
 3984 0044 FFF7FEFF 		bl	vPortExitCritical
 3985              	.LVL339:
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3986              		.loc 1 3073 0
 3987 0048 2846     		mov	r0, r5
 3988 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3989              	.LVL340:
 3990              	.L410:
 3991              	.LBB430:
 3992              	.LBB431:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3993              		.loc 2 237 0
 3994              		.syntax unified
 3995              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3996 004c 4FF05003 			mov r3, #80												
 3997 0050 83F31188 		msr basepri, r3											
 3998 0054 BFF36F8F 		isb														
 3999 0058 BFF34F8F 		dsb														
 4000              	
 4001              	@ 0 "" 2
 4002              	.LVL341:
 4003              		.thumb
 4004              		.syntax unified
 4005              	.L402:
 4006 005c FEE7     		b	.L402
 4007              	.L409:
 4008              	.LBE431:
 4009              	.LBE430:
 4010              	.LBB432:
 4011              	.LBB433:
 4012              		.syntax unified
 4013              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4014 005e 4FF05003 			mov r3, #80												
 4015 0062 83F31188 		msr basepri, r3											
 4016 0066 BFF36F8F 		isb														
 4017 006a BFF34F8F 		dsb														
 4018              	
 4019              	@ 0 "" 2
 4020              	.LVL342:
 4021              		.thumb
 4022              		.syntax unified
 4023              	.L400:
 4024 006e FEE7     		b	.L400
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 170


 4025              	.LVL343:
 4026              	.L405:
 4027              	.LBE433:
 4028              	.LBE432:
 4029              	.LBB434:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4030              		.loc 1 3044 0
 4031 0070 0025     		movs	r5, #0
 4032              	.LVL344:
 4033 0072 E7E7     		b	.L403
 4034              	.LVL345:
 4035              	.L407:
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4036              		.loc 1 3056 0
 4037 0074 0125     		movs	r5, #1
 4038              	.LVL346:
 4039 0076 E5E7     		b	.L403
 4040              	.L412:
 4041              		.align	2
 4042              	.L411:
 4043 0078 00000000 		.word	.LANCHOR19
 4044 007c 00000000 		.word	.LANCHOR0
 4045              	.LBE434:
 4046              		.cfi_endproc
 4047              	.LFE32:
 4049              		.section	.text.vTaskMissedYield,"ax",%progbits
 4050              		.align	1
 4051              		.p2align 2,,3
 4052              		.global	vTaskMissedYield
 4053              		.syntax unified
 4054              		.thumb
 4055              		.thumb_func
 4056              		.fpu fpv4-sp-d16
 4058              	vTaskMissedYield:
 4059              	.LFB33:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4060              		.loc 1 3077 0
 4061              		.cfi_startproc
 4062              		@ args = 0, pretend = 0, frame = 0
 4063              		@ frame_needed = 0, uses_anonymous_args = 0
 4064              		@ link register save eliminated.
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4065              		.loc 1 3078 0
 4066 0000 014B     		ldr	r3, .L414
 4067 0002 0122     		movs	r2, #1
 4068 0004 1A60     		str	r2, [r3]
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4069              		.loc 1 3079 0
 4070 0006 7047     		bx	lr
 4071              	.L415:
 4072              		.align	2
 4073              	.L414:
 4074 0008 00000000 		.word	.LANCHOR17
 4075              		.cfi_endproc
 4076              	.LFE33:
 4078              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4079              		.align	1
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 171


 4080              		.p2align 2,,3
 4081              		.global	xTaskGetCurrentTaskHandle
 4082              		.syntax unified
 4083              		.thumb
 4084              		.thumb_func
 4085              		.fpu fpv4-sp-d16
 4087              	xTaskGetCurrentTaskHandle:
 4088              	.LFB39:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4089              		.loc 1 3662 0
 4090              		.cfi_startproc
 4091              		@ args = 0, pretend = 0, frame = 0
 4092              		@ frame_needed = 0, uses_anonymous_args = 0
 4093              		@ link register save eliminated.
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4094              		.loc 1 3668 0
 4095 0000 014B     		ldr	r3, .L417
 4096 0002 1868     		ldr	r0, [r3]
 4097              	.LVL347:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4098              		.loc 1 3671 0
 4099 0004 7047     		bx	lr
 4100              	.L418:
 4101 0006 00BF     		.align	2
 4102              	.L417:
 4103 0008 00000000 		.word	.LANCHOR1
 4104              		.cfi_endproc
 4105              	.LFE39:
 4107              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4108              		.align	1
 4109              		.p2align 2,,3
 4110              		.global	xTaskGetSchedulerState
 4111              		.syntax unified
 4112              		.thumb
 4113              		.thumb_func
 4114              		.fpu fpv4-sp-d16
 4116              	xTaskGetSchedulerState:
 4117              	.LFB40:
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4118              		.loc 1 3679 0
 4119              		.cfi_startproc
 4120              		@ args = 0, pretend = 0, frame = 0
 4121              		@ frame_needed = 0, uses_anonymous_args = 0
 4122              		@ link register save eliminated.
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4123              		.loc 1 3682 0
 4124 0000 054B     		ldr	r3, .L423
 4125 0002 1B68     		ldr	r3, [r3]
 4126 0004 33B1     		cbz	r3, .L421
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4127              		.loc 1 3688 0
 4128 0006 054B     		ldr	r3, .L423+4
 4129 0008 1B68     		ldr	r3, [r3]
 4130 000a 002B     		cmp	r3, #0
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4131              		.loc 1 3694 0
 4132 000c 0CBF     		ite	eq
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 172


 4133 000e 0220     		moveq	r0, #2
 4134 0010 0020     		movne	r0, #0
 4135 0012 7047     		bx	lr
 4136              	.L421:
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4137              		.loc 1 3684 0
 4138 0014 0120     		movs	r0, #1
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4139              		.loc 1 3699 0
 4140 0016 7047     		bx	lr
 4141              	.L424:
 4142              		.align	2
 4143              	.L423:
 4144 0018 00000000 		.word	.LANCHOR13
 4145 001c 00000000 		.word	.LANCHOR16
 4146              		.cfi_endproc
 4147              	.LFE40:
 4149              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 4150              		.align	1
 4151              		.p2align 2,,3
 4152              		.global	vTaskPriorityInherit
 4153              		.syntax unified
 4154              		.thumb
 4155              		.thumb_func
 4156              		.fpu fpv4-sp-d16
 4158              	vTaskPriorityInherit:
 4159              	.LFB41:
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4160              		.loc 1 3707 0
 4161              		.cfi_startproc
 4162              		@ args = 0, pretend = 0, frame = 0
 4163              		@ frame_needed = 0, uses_anonymous_args = 0
 4164              	.LVL348:
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4165              		.loc 1 3712 0
 4166 0000 D0B1     		cbz	r0, .L437
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4167              		.loc 1 3707 0
 4168 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4169              	.LCFI36:
 4170              		.cfi_def_cfa_offset 24
 4171              		.cfi_offset 3, -24
 4172              		.cfi_offset 4, -20
 4173              		.cfi_offset 5, -16
 4174              		.cfi_offset 6, -12
 4175              		.cfi_offset 7, -8
 4176              		.cfi_offset 14, -4
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4177              		.loc 1 3717 0
 4178 0004 204C     		ldr	r4, .L442
 4179 0006 C36A     		ldr	r3, [r0, #44]
 4180 0008 2268     		ldr	r2, [r4]
 4181 000a D26A     		ldr	r2, [r2, #44]
 4182 000c 9342     		cmp	r3, r2
 4183 000e 12D2     		bcs	.L425
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4184              		.loc 1 3722 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 173


 4185 0010 8269     		ldr	r2, [r0, #24]
 4186 0012 002A     		cmp	r2, #0
 4187 0014 04DB     		blt	.L427
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4188              		.loc 1 3724 0
 4189 0016 2268     		ldr	r2, [r4]
 4190 0018 D26A     		ldr	r2, [r2, #44]
 4191 001a C2F10702 		rsb	r2, r2, #7
 4192 001e 8261     		str	r2, [r0, #24]
 4193              	.L427:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4194              		.loc 1 3733 0
 4195 0020 1A4D     		ldr	r5, .L442+4
 4196 0022 4269     		ldr	r2, [r0, #20]
 4197 0024 03EB8303 		add	r3, r3, r3, lsl #2
 4198 0028 05EB8303 		add	r3, r5, r3, lsl #2
 4199 002c 9A42     		cmp	r2, r3
 4200 002e 04D0     		beq	.L441
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4201              		.loc 1 3751 0
 4202 0030 2368     		ldr	r3, [r4]
 4203 0032 DB6A     		ldr	r3, [r3, #44]
 4204 0034 C362     		str	r3, [r0, #44]
 4205              	.L425:
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4206              		.loc 1 3765 0
 4207 0036 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4208              	.L437:
 4209              	.LCFI37:
 4210              		.cfi_def_cfa_offset 0
 4211              		.cfi_restore 3
 4212              		.cfi_restore 4
 4213              		.cfi_restore 5
 4214              		.cfi_restore 6
 4215              		.cfi_restore 7
 4216              		.cfi_restore 14
 4217 0038 7047     		bx	lr
 4218              	.L441:
 4219              	.LCFI38:
 4220              		.cfi_def_cfa_offset 24
 4221              		.cfi_offset 3, -24
 4222              		.cfi_offset 4, -20
 4223              		.cfi_offset 5, -16
 4224              		.cfi_offset 6, -12
 4225              		.cfi_offset 7, -8
 4226              		.cfi_offset 14, -4
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4227              		.loc 1 3735 0
 4228 003a 071D     		adds	r7, r0, #4
 4229 003c 0646     		mov	r6, r0
 4230 003e 3846     		mov	r0, r7
 4231              	.LVL349:
 4232 0040 FFF7FEFF 		bl	uxListRemove
 4233              	.LVL350:
 4234 0044 70B9     		cbnz	r0, .L440
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4235              		.loc 1 3737 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 174


 4236 0046 F36A     		ldr	r3, [r6, #44]
 4237 0048 03EB8302 		add	r2, r3, r3, lsl #2
 4238 004c 55F82220 		ldr	r2, [r5, r2, lsl #2]
 4239 0050 42B9     		cbnz	r2, .L440
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4240              		.loc 1 3737 0 is_stmt 0 discriminator 1
 4241 0052 0F4A     		ldr	r2, .L442+8
 4242 0054 0120     		movs	r0, #1
 4243 0056 1168     		ldr	r1, [r2]
 4244 0058 00FA03F3 		lsl	r3, r0, r3
 4245 005c 21EA0303 		bic	r3, r1, r3
 4246 0060 1360     		str	r3, [r2]
 4247 0062 00E0     		b	.L430
 4248              	.L440:
 4249 0064 0A4A     		ldr	r2, .L442+8
 4250              	.L430:
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4251              		.loc 1 3745 0 is_stmt 1
 4252 0066 2368     		ldr	r3, [r4]
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4253              		.loc 1 3746 0
 4254 0068 1468     		ldr	r4, [r2]
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4255              		.loc 1 3745 0
 4256 006a D86A     		ldr	r0, [r3, #44]
 4257 006c F062     		str	r0, [r6, #44]
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4258              		.loc 1 3746 0
 4259 006e 0123     		movs	r3, #1
 4260 0070 8340     		lsls	r3, r3, r0
 4261 0072 2343     		orrs	r3, r3, r4
 4262 0074 00EB8000 		add	r0, r0, r0, lsl #2
 4263 0078 3946     		mov	r1, r7
 4264 007a 05EB8000 		add	r0, r5, r0, lsl #2
 4265 007e 1360     		str	r3, [r2]
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4266              		.loc 1 3765 0
 4267 0080 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 4268              	.LCFI39:
 4269              		.cfi_restore 14
 4270              		.cfi_restore 7
 4271              		.cfi_restore 6
 4272              		.cfi_restore 5
 4273              		.cfi_restore 4
 4274              		.cfi_restore 3
 4275              		.cfi_def_cfa_offset 0
 4276              	.LVL351:
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4277              		.loc 1 3746 0
 4278 0084 FFF7FEBF 		b	vListInsertEnd
 4279              	.LVL352:
 4280              	.L443:
 4281              		.align	2
 4282              	.L442:
 4283 0088 00000000 		.word	.LANCHOR1
 4284 008c 00000000 		.word	.LANCHOR8
 4285 0090 00000000 		.word	.LANCHOR2
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 175


 4286              		.cfi_endproc
 4287              	.LFE41:
 4289              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4290              		.align	1
 4291              		.p2align 2,,3
 4292              		.global	xTaskPriorityDisinherit
 4293              		.syntax unified
 4294              		.thumb
 4295              		.thumb_func
 4296              		.fpu fpv4-sp-d16
 4298              	xTaskPriorityDisinherit:
 4299              	.LFB42:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4300              		.loc 1 3773 0
 4301              		.cfi_startproc
 4302              		@ args = 0, pretend = 0, frame = 0
 4303              		@ frame_needed = 0, uses_anonymous_args = 0
 4304              	.LVL353:
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4305              		.loc 1 3777 0
 4306 0000 68B1     		cbz	r0, .L460
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4307              		.loc 1 3773 0
 4308 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4309              	.LCFI40:
 4310              		.cfi_def_cfa_offset 24
 4311              		.cfi_offset 3, -24
 4312              		.cfi_offset 4, -20
 4313              		.cfi_offset 5, -16
 4314              		.cfi_offset 6, -12
 4315              		.cfi_offset 7, -8
 4316              		.cfi_offset 14, -4
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4317              		.loc 1 3783 0
 4318 0004 274B     		ldr	r3, .L462
 4319 0006 1B68     		ldr	r3, [r3]
 4320 0008 8342     		cmp	r3, r0
 4321 000a 0AD0     		beq	.L447
 4322              	.LBB435:
 4323              	.LBB436:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4324              		.loc 2 237 0
 4325              		.syntax unified
 4326              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4327 000c 4FF05003 			mov r3, #80												
 4328 0010 83F31188 		msr basepri, r3											
 4329 0014 BFF36F8F 		isb														
 4330 0018 BFF34F8F 		dsb														
 4331              	
 4332              	@ 0 "" 2
 4333              	.LVL354:
 4334              		.thumb
 4335              		.syntax unified
 4336              	.L448:
 4337 001c FEE7     		b	.L448
 4338              	.L460:
 4339              	.LCFI41:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 176


 4340              		.cfi_def_cfa_offset 0
 4341              		.cfi_restore 3
 4342              		.cfi_restore 4
 4343              		.cfi_restore 5
 4344              		.cfi_restore 6
 4345              		.cfi_restore 7
 4346              		.cfi_restore 14
 4347              	.LBE436:
 4348              	.LBE435:
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4349              		.loc 1 3775 0
 4350 001e 0020     		movs	r0, #0
 4351              	.LVL355:
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4352              		.loc 1 3846 0
 4353 0020 7047     		bx	lr
 4354              	.LVL356:
 4355              	.L447:
 4356              	.LCFI42:
 4357              		.cfi_def_cfa_offset 24
 4358              		.cfi_offset 3, -24
 4359              		.cfi_offset 4, -20
 4360              		.cfi_offset 5, -16
 4361              		.cfi_offset 6, -12
 4362              		.cfi_offset 7, -8
 4363              		.cfi_offset 14, -4
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4364              		.loc 1 3785 0
 4365 0022 9B6C     		ldr	r3, [r3, #72]
 4366 0024 43B9     		cbnz	r3, .L449
 4367              	.LBB437:
 4368              	.LBB438:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4369              		.loc 2 237 0
 4370              		.syntax unified
 4371              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4372 0026 4FF05003 			mov r3, #80												
 4373 002a 83F31188 		msr basepri, r3											
 4374 002e BFF36F8F 		isb														
 4375 0032 BFF34F8F 		dsb														
 4376              	
 4377              	@ 0 "" 2
 4378              	.LVL357:
 4379              		.thumb
 4380              		.syntax unified
 4381              	.L450:
 4382 0036 FEE7     		b	.L450
 4383              	.L449:
 4384              	.LBE438:
 4385              	.LBE437:
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4386              		.loc 1 3790 0
 4387 0038 C16A     		ldr	r1, [r0, #44]
 4388 003a 426C     		ldr	r2, [r0, #68]
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4389              		.loc 1 3786 0
 4390 003c 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 177


3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4391              		.loc 1 3790 0
 4392 003e 9142     		cmp	r1, r2
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4393              		.loc 1 3786 0
 4394 0040 8364     		str	r3, [r0, #72]
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4395              		.loc 1 3790 0
 4396 0042 00D0     		beq	.L451
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4397              		.loc 1 3793 0
 4398 0044 0BB1     		cbz	r3, .L461
 4399              	.L451:
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4400              		.loc 1 3775 0
 4401 0046 0020     		movs	r0, #0
 4402              	.LVL358:
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4403              		.loc 1 3846 0
 4404 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4405              	.LVL359:
 4406              	.L461:
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4407              		.loc 1 3800 0
 4408 004a 061D     		adds	r6, r0, #4
 4409 004c 0446     		mov	r4, r0
 4410 004e 3046     		mov	r0, r6
 4411              	.LVL360:
 4412 0050 FFF7FEFF 		bl	uxListRemove
 4413              	.LVL361:
 4414 0054 A8B1     		cbz	r0, .L455
 4415 0056 1448     		ldr	r0, .L462+4
 4416 0058 144B     		ldr	r3, .L462+8
 4417              	.L452:
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4418              		.loc 1 3812 0
 4419 005a 626C     		ldr	r2, [r4, #68]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4420              		.loc 1 3818 0
 4421 005c 1F68     		ldr	r7, [r3]
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4422              		.loc 1 3812 0
 4423 005e E262     		str	r2, [r4, #44]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4424              		.loc 1 3818 0
 4425 0060 0125     		movs	r5, #1
 4426 0062 4FF0140C 		mov	ip, #20
 4427 0066 0CFB0200 		mla	r0, ip, r2, r0
 4428 006a 3146     		mov	r1, r6
 4429 006c 05FA02F6 		lsl	r6, r5, r2
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4430              		.loc 1 3817 0
 4431 0070 C2F10702 		rsb	r2, r2, #7
 4432 0074 A261     		str	r2, [r4, #24]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4433              		.loc 1 3818 0
 4434 0076 3E43     		orrs	r6, r6, r7
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 178


 4435 0078 1E60     		str	r6, [r3]
 4436 007a FFF7FEFF 		bl	vListInsertEnd
 4437              	.LVL362:
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4438              		.loc 1 3828 0
 4439 007e 2846     		mov	r0, r5
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4440              		.loc 1 3846 0
 4441 0080 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4442              	.LVL363:
 4443              	.L455:
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4444              		.loc 1 3802 0
 4445 0082 E16A     		ldr	r1, [r4, #44]
 4446 0084 0848     		ldr	r0, .L462+4
 4447 0086 1423     		movs	r3, #20
 4448 0088 03FB01F3 		mul	r3, r3, r1
 4449 008c C358     		ldr	r3, [r0, r3]
 4450 008e 0BB1     		cbz	r3, .L456
 4451 0090 064B     		ldr	r3, .L462+8
 4452 0092 E2E7     		b	.L452
 4453              	.L456:
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4454              		.loc 1 3802 0 is_stmt 0 discriminator 1
 4455 0094 054B     		ldr	r3, .L462+8
 4456 0096 0125     		movs	r5, #1
 4457 0098 1A68     		ldr	r2, [r3]
 4458 009a 8D40     		lsls	r5, r5, r1
 4459 009c 22EA0502 		bic	r2, r2, r5
 4460 00a0 1A60     		str	r2, [r3]
 4461 00a2 DAE7     		b	.L452
 4462              	.L463:
 4463              		.align	2
 4464              	.L462:
 4465 00a4 00000000 		.word	.LANCHOR1
 4466 00a8 00000000 		.word	.LANCHOR8
 4467 00ac 00000000 		.word	.LANCHOR2
 4468              		.cfi_endproc
 4469              	.LFE42:
 4471              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4472              		.align	1
 4473              		.p2align 2,,3
 4474              		.global	uxTaskResetEventItemValue
 4475              		.syntax unified
 4476              		.thumb
 4477              		.thumb_func
 4478              		.fpu fpv4-sp-d16
 4480              	uxTaskResetEventItemValue:
 4481              	.LFB43:
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4482              		.loc 1 4163 0 is_stmt 1
 4483              		.cfi_startproc
 4484              		@ args = 0, pretend = 0, frame = 0
 4485              		@ frame_needed = 0, uses_anonymous_args = 0
 4486              		@ link register save eliminated.
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4487              		.loc 1 4166 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 179


 4488 0000 044A     		ldr	r2, .L465
 4489 0002 1168     		ldr	r1, [r2]
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4490              		.loc 1 4170 0
 4491 0004 1368     		ldr	r3, [r2]
 4492 0006 1268     		ldr	r2, [r2]
 4493 0008 DB6A     		ldr	r3, [r3, #44]
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4494              		.loc 1 4166 0
 4495 000a 8869     		ldr	r0, [r1, #24]
 4496              	.LVL364:
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4497              		.loc 1 4170 0
 4498 000c C3F10703 		rsb	r3, r3, #7
 4499 0010 9361     		str	r3, [r2, #24]
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4500              		.loc 1 4173 0
 4501 0012 7047     		bx	lr
 4502              	.L466:
 4503              		.align	2
 4504              	.L465:
 4505 0014 00000000 		.word	.LANCHOR1
 4506              		.cfi_endproc
 4507              	.LFE43:
 4509              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4510              		.align	1
 4511              		.p2align 2,,3
 4512              		.global	pvTaskIncrementMutexHeldCount
 4513              		.syntax unified
 4514              		.thumb
 4515              		.thumb_func
 4516              		.fpu fpv4-sp-d16
 4518              	pvTaskIncrementMutexHeldCount:
 4519              	.LFB44:
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4520              		.loc 1 4179 0
 4521              		.cfi_startproc
 4522              		@ args = 0, pretend = 0, frame = 0
 4523              		@ frame_needed = 0, uses_anonymous_args = 0
 4524              		@ link register save eliminated.
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4525              		.loc 1 4182 0
 4526 0000 044B     		ldr	r3, .L472
 4527 0002 1A68     		ldr	r2, [r3]
 4528 0004 1AB1     		cbz	r2, .L468
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4529              		.loc 1 4184 0
 4530 0006 1968     		ldr	r1, [r3]
 4531 0008 8A6C     		ldr	r2, [r1, #72]
 4532 000a 0132     		adds	r2, r2, #1
 4533 000c 8A64     		str	r2, [r1, #72]
 4534              	.L468:
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4535              		.loc 1 4187 0
 4536 000e 1868     		ldr	r0, [r3]
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4537              		.loc 1 4188 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 180


 4538 0010 7047     		bx	lr
 4539              	.L473:
 4540 0012 00BF     		.align	2
 4541              	.L472:
 4542 0014 00000000 		.word	.LANCHOR1
 4543              		.cfi_endproc
 4544              	.LFE44:
 4546              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4547              		.align	1
 4548              		.p2align 2,,3
 4549              		.global	ulTaskNotifyTake
 4550              		.syntax unified
 4551              		.thumb
 4552              		.thumb_func
 4553              		.fpu fpv4-sp-d16
 4555              	ulTaskNotifyTake:
 4556              	.LFB45:
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4557              		.loc 1 4196 0
 4558              		.cfi_startproc
 4559              		@ args = 0, pretend = 0, frame = 0
 4560              		@ frame_needed = 0, uses_anonymous_args = 0
 4561              	.LVL365:
 4562 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4563              	.LCFI43:
 4564              		.cfi_def_cfa_offset 24
 4565              		.cfi_offset 4, -24
 4566              		.cfi_offset 5, -20
 4567              		.cfi_offset 6, -16
 4568              		.cfi_offset 7, -12
 4569              		.cfi_offset 8, -8
 4570              		.cfi_offset 14, -4
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4571              		.loc 1 4202 0
 4572 0004 2D4C     		ldr	r4, .L497
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4573              		.loc 1 4196 0
 4574 0006 0646     		mov	r6, r0
 4575 0008 0D46     		mov	r5, r1
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4576              		.loc 1 4199 0
 4577 000a FFF7FEFF 		bl	vPortEnterCritical
 4578              	.LVL366:
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4579              		.loc 1 4202 0
 4580 000e 2368     		ldr	r3, [r4]
 4581 0010 DB6C     		ldr	r3, [r3, #76]
 4582 0012 23B9     		cbnz	r3, .L476
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4583              		.loc 1 4205 0
 4584 0014 2368     		ldr	r3, [r4]
 4585 0016 0127     		movs	r7, #1
 4586 0018 83F85070 		strb	r7, [r3, #80]
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4587              		.loc 1 4207 0
 4588 001c B5B9     		cbnz	r5, .L493
 4589              	.LVL367:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 181


 4590              	.L476:
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4591              		.loc 1 4228 0
 4592 001e FFF7FEFF 		bl	vPortExitCritical
 4593              	.LVL368:
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4594              		.loc 1 4230 0
 4595 0022 FFF7FEFF 		bl	vPortEnterCritical
 4596              	.LVL369:
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4597              		.loc 1 4233 0
 4598 0026 2368     		ldr	r3, [r4]
 4599 0028 DD6C     		ldr	r5, [r3, #76]
 4600              	.LVL370:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4601              		.loc 1 4235 0
 4602 002a 1DB1     		cbz	r5, .L484
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4603              		.loc 1 4239 0
 4604 002c 2368     		ldr	r3, [r4]
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4605              		.loc 1 4237 0
 4606 002e 56B9     		cbnz	r6, .L494
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4607              		.loc 1 4243 0
 4608 0030 6A1E     		subs	r2, r5, #1
 4609 0032 DA64     		str	r2, [r3, #76]
 4610              	.L484:
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4611              		.loc 1 4251 0
 4612 0034 2368     		ldr	r3, [r4]
 4613 0036 0022     		movs	r2, #0
 4614 0038 83F85020 		strb	r2, [r3, #80]
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4615              		.loc 1 4253 0
 4616 003c FFF7FEFF 		bl	vPortExitCritical
 4617              	.LVL371:
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4618              		.loc 1 4256 0
 4619 0040 2846     		mov	r0, r5
 4620 0042 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4621              	.LVL372:
 4622              	.L494:
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4623              		.loc 1 4239 0
 4624 0046 0022     		movs	r2, #0
 4625 0048 DA64     		str	r2, [r3, #76]
 4626 004a F3E7     		b	.L484
 4627              	.LVL373:
 4628              	.L493:
 4629              	.LBB443:
 4630              	.LBB444:
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4631              		.loc 1 4695 0
 4632 004c 1C4B     		ldr	r3, .L497+4
 4633 004e D3F80080 		ldr	r8, [r3]
 4634              	.LVL374:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 182


4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4635              		.loc 1 4708 0
 4636 0052 2068     		ldr	r0, [r4]
 4637 0054 0430     		adds	r0, r0, #4
 4638 0056 FFF7FEFF 		bl	uxListRemove
 4639              	.LVL375:
 4640 005a 38B9     		cbnz	r0, .L478
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4641              		.loc 1 4712 0
 4642 005c 2368     		ldr	r3, [r4]
 4643 005e 194A     		ldr	r2, .L497+8
 4644 0060 D96A     		ldr	r1, [r3, #44]
 4645 0062 1368     		ldr	r3, [r2]
 4646 0064 8F40     		lsls	r7, r7, r1
 4647 0066 23EA0707 		bic	r7, r3, r7
 4648 006a 1760     		str	r7, [r2]
 4649              	.L478:
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4650              		.loc 1 4721 0
 4651 006c 6B1C     		adds	r3, r5, #1
 4652 006e 18D0     		beq	.L495
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4653              		.loc 1 4736 0
 4654 0070 2368     		ldr	r3, [r4]
 4655 0072 15EB0805 		adds	r5, r5, r8
 4656              	.LVL376:
 4657 0076 5D60     		str	r5, [r3, #4]
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4658              		.loc 1 4738 0
 4659 0078 19D2     		bcs	.L496
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4660              		.loc 1 4748 0
 4661 007a 134B     		ldr	r3, .L497+12
 4662 007c 1868     		ldr	r0, [r3]
 4663 007e 2168     		ldr	r1, [r4]
 4664 0080 0431     		adds	r1, r1, #4
 4665 0082 FFF7FEFF 		bl	vListInsert
 4666              	.LVL377:
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4667              		.loc 1 4753 0
 4668 0086 114B     		ldr	r3, .L497+16
 4669 0088 1A68     		ldr	r2, [r3]
 4670 008a 9542     		cmp	r5, r2
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4671              		.loc 1 4755 0
 4672 008c 38BF     		it	cc
 4673 008e 1D60     		strcc	r5, [r3]
 4674              	.LVL378:
 4675              	.L480:
 4676              	.LBE444:
 4677              	.LBE443:
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4678              		.loc 1 4216 0
 4679 0090 0F4B     		ldr	r3, .L497+20
 4680 0092 4FF08052 		mov	r2, #268435456
 4681 0096 1A60     		str	r2, [r3]
 4682              		.syntax unified
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 183


 4683              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4684 0098 BFF34F8F 		dsb
 4685              	@ 0 "" 2
 4686              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4687 009c BFF36F8F 		isb
 4688              	@ 0 "" 2
 4689              		.thumb
 4690              		.syntax unified
 4691 00a0 BDE7     		b	.L476
 4692              	.LVL379:
 4693              	.L495:
 4694              	.LBB448:
 4695              	.LBB447:
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4696              		.loc 1 4726 0
 4697 00a2 2168     		ldr	r1, [r4]
 4698 00a4 0B48     		ldr	r0, .L497+24
 4699 00a6 0431     		adds	r1, r1, #4
 4700 00a8 FFF7FEFF 		bl	vListInsertEnd
 4701              	.LVL380:
 4702 00ac F0E7     		b	.L480
 4703              	.LVL381:
 4704              	.L496:
 4705              	.LBB445:
 4706              	.LBB446:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4707              		.loc 1 4742 0
 4708 00ae 0A4B     		ldr	r3, .L497+28
 4709 00b0 1868     		ldr	r0, [r3]
 4710 00b2 2168     		ldr	r1, [r4]
 4711 00b4 0431     		adds	r1, r1, #4
 4712 00b6 FFF7FEFF 		bl	vListInsert
 4713              	.LVL382:
 4714 00ba E9E7     		b	.L480
 4715              	.L498:
 4716              		.align	2
 4717              	.L497:
 4718 00bc 00000000 		.word	.LANCHOR1
 4719 00c0 00000000 		.word	.LANCHOR0
 4720 00c4 00000000 		.word	.LANCHOR2
 4721 00c8 00000000 		.word	.LANCHOR5
 4722 00cc 00000000 		.word	.LANCHOR6
 4723 00d0 04ED00E0 		.word	-536810236
 4724 00d4 00000000 		.word	.LANCHOR3
 4725 00d8 00000000 		.word	.LANCHOR4
 4726              	.LBE446:
 4727              	.LBE445:
 4728              	.LBE447:
 4729              	.LBE448:
 4730              		.cfi_endproc
 4731              	.LFE45:
 4733              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4734              		.align	1
 4735              		.p2align 2,,3
 4736              		.global	xTaskNotifyWait
 4737              		.syntax unified
 4738              		.thumb
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 184


 4739              		.thumb_func
 4740              		.fpu fpv4-sp-d16
 4742              	xTaskNotifyWait:
 4743              	.LFB46:
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4744              		.loc 1 4264 0
 4745              		.cfi_startproc
 4746              		@ args = 0, pretend = 0, frame = 0
 4747              		@ frame_needed = 0, uses_anonymous_args = 0
 4748              	.LVL383:
 4749 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4750              	.LCFI44:
 4751              		.cfi_def_cfa_offset 32
 4752              		.cfi_offset 3, -32
 4753              		.cfi_offset 4, -28
 4754              		.cfi_offset 5, -24
 4755              		.cfi_offset 6, -20
 4756              		.cfi_offset 7, -16
 4757              		.cfi_offset 8, -12
 4758              		.cfi_offset 9, -8
 4759              		.cfi_offset 14, -4
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4760              		.loc 1 4270 0
 4761 0004 364C     		ldr	r4, .L522
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4762              		.loc 1 4264 0
 4763 0006 1D46     		mov	r5, r3
 4764 0008 8046     		mov	r8, r0
 4765 000a 0F46     		mov	r7, r1
 4766 000c 1646     		mov	r6, r2
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4767              		.loc 1 4267 0
 4768 000e FFF7FEFF 		bl	vPortEnterCritical
 4769              	.LVL384:
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4770              		.loc 1 4270 0
 4771 0012 2368     		ldr	r3, [r4]
 4772 0014 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4773 0018 022B     		cmp	r3, #2
 4774 001a 0AD0     		beq	.L501
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4775              		.loc 1 4275 0
 4776 001c 2268     		ldr	r2, [r4]
 4777 001e D36C     		ldr	r3, [r2, #76]
 4778 0020 23EA0803 		bic	r3, r3, r8
 4779 0024 D364     		str	r3, [r2, #76]
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4780              		.loc 1 4278 0
 4781 0026 2368     		ldr	r3, [r4]
 4782 0028 4FF00108 		mov	r8, #1
 4783              	.LVL385:
 4784 002c 83F85080 		strb	r8, [r3, #80]
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4785              		.loc 1 4280 0
 4786 0030 DDB9     		cbnz	r5, .L519
 4787              	.LVL386:
 4788              	.L501:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 185


4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4789              		.loc 1 4301 0
 4790 0032 FFF7FEFF 		bl	vPortExitCritical
 4791              	.LVL387:
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4792              		.loc 1 4303 0
 4793 0036 FFF7FEFF 		bl	vPortEnterCritical
 4794              	.LVL388:
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4795              		.loc 1 4307 0
 4796 003a 16B1     		cbz	r6, .L509
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4797              		.loc 1 4311 0
 4798 003c 2368     		ldr	r3, [r4]
 4799 003e DB6C     		ldr	r3, [r3, #76]
 4800 0040 3360     		str	r3, [r6]
 4801              	.L509:
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4802              		.loc 1 4318 0
 4803 0042 2368     		ldr	r3, [r4]
 4804 0044 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4805 0048 012B     		cmp	r3, #1
 4806 004a 3AD0     		beq	.L511
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4807              		.loc 1 4327 0
 4808 004c 2368     		ldr	r3, [r4]
 4809 004e D96C     		ldr	r1, [r3, #76]
 4810 0050 21EA0701 		bic	r1, r1, r7
 4811 0054 D964     		str	r1, [r3, #76]
 4812              	.LVL389:
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4813              		.loc 1 4328 0
 4814 0056 0125     		movs	r5, #1
 4815              	.LVL390:
 4816              	.L510:
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4817              		.loc 1 4331 0
 4818 0058 2368     		ldr	r3, [r4]
 4819 005a 0022     		movs	r2, #0
 4820 005c 83F85020 		strb	r2, [r3, #80]
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4821              		.loc 1 4333 0
 4822 0060 FFF7FEFF 		bl	vPortExitCritical
 4823              	.LVL391:
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4824              		.loc 1 4336 0
 4825 0064 2846     		mov	r0, r5
 4826 0066 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4827              	.LVL392:
 4828              	.L519:
 4829              	.LBB453:
 4830              	.LBB454:
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4831              		.loc 1 4695 0
 4832 006a 1E4B     		ldr	r3, .L522+4
 4833 006c D3F80090 		ldr	r9, [r3]
 4834              	.LVL393:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 186


4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4835              		.loc 1 4708 0
 4836 0070 2068     		ldr	r0, [r4]
 4837 0072 0430     		adds	r0, r0, #4
 4838 0074 FFF7FEFF 		bl	uxListRemove
 4839              	.LVL394:
 4840 0078 40B9     		cbnz	r0, .L503
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4841              		.loc 1 4712 0
 4842 007a 2368     		ldr	r3, [r4]
 4843 007c 1A4A     		ldr	r2, .L522+8
 4844 007e D96A     		ldr	r1, [r3, #44]
 4845 0080 1368     		ldr	r3, [r2]
 4846 0082 08FA01F8 		lsl	r8, r8, r1
 4847 0086 23EA0803 		bic	r3, r3, r8
 4848 008a 1360     		str	r3, [r2]
 4849              	.L503:
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4850              		.loc 1 4721 0
 4851 008c 6B1C     		adds	r3, r5, #1
 4852 008e 1AD0     		beq	.L520
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4853              		.loc 1 4736 0
 4854 0090 2368     		ldr	r3, [r4]
 4855 0092 15EB0905 		adds	r5, r5, r9
 4856              	.LVL395:
 4857 0096 5D60     		str	r5, [r3, #4]
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4858              		.loc 1 4738 0
 4859 0098 1BD2     		bcs	.L521
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4860              		.loc 1 4748 0
 4861 009a 144B     		ldr	r3, .L522+12
 4862 009c 1868     		ldr	r0, [r3]
 4863 009e 2168     		ldr	r1, [r4]
 4864 00a0 0431     		adds	r1, r1, #4
 4865 00a2 FFF7FEFF 		bl	vListInsert
 4866              	.LVL396:
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4867              		.loc 1 4753 0
 4868 00a6 124B     		ldr	r3, .L522+16
 4869 00a8 1A68     		ldr	r2, [r3]
 4870 00aa 9542     		cmp	r5, r2
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4871              		.loc 1 4755 0
 4872 00ac 38BF     		it	cc
 4873 00ae 1D60     		strcc	r5, [r3]
 4874              	.LVL397:
 4875              	.L505:
 4876              	.LBE454:
 4877              	.LBE453:
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4878              		.loc 1 4289 0
 4879 00b0 104B     		ldr	r3, .L522+20
 4880 00b2 4FF08052 		mov	r2, #268435456
 4881 00b6 1A60     		str	r2, [r3]
 4882              		.syntax unified
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 187


 4883              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4884 00b8 BFF34F8F 		dsb
 4885              	@ 0 "" 2
 4886              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4887 00bc BFF36F8F 		isb
 4888              	@ 0 "" 2
 4889              		.thumb
 4890              		.syntax unified
 4891 00c0 B7E7     		b	.L501
 4892              	.L511:
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4893              		.loc 1 4321 0
 4894 00c2 0025     		movs	r5, #0
 4895 00c4 C8E7     		b	.L510
 4896              	.LVL398:
 4897              	.L520:
 4898              	.LBB458:
 4899              	.LBB457:
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4900              		.loc 1 4726 0
 4901 00c6 2168     		ldr	r1, [r4]
 4902 00c8 0B48     		ldr	r0, .L522+24
 4903 00ca 0431     		adds	r1, r1, #4
 4904 00cc FFF7FEFF 		bl	vListInsertEnd
 4905              	.LVL399:
 4906 00d0 EEE7     		b	.L505
 4907              	.LVL400:
 4908              	.L521:
 4909              	.LBB455:
 4910              	.LBB456:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4911              		.loc 1 4742 0
 4912 00d2 0A4B     		ldr	r3, .L522+28
 4913 00d4 1868     		ldr	r0, [r3]
 4914 00d6 2168     		ldr	r1, [r4]
 4915 00d8 0431     		adds	r1, r1, #4
 4916 00da FFF7FEFF 		bl	vListInsert
 4917              	.LVL401:
 4918 00de E7E7     		b	.L505
 4919              	.L523:
 4920              		.align	2
 4921              	.L522:
 4922 00e0 00000000 		.word	.LANCHOR1
 4923 00e4 00000000 		.word	.LANCHOR0
 4924 00e8 00000000 		.word	.LANCHOR2
 4925 00ec 00000000 		.word	.LANCHOR5
 4926 00f0 00000000 		.word	.LANCHOR6
 4927 00f4 04ED00E0 		.word	-536810236
 4928 00f8 00000000 		.word	.LANCHOR3
 4929 00fc 00000000 		.word	.LANCHOR4
 4930              	.LBE456:
 4931              	.LBE455:
 4932              	.LBE457:
 4933              	.LBE458:
 4934              		.cfi_endproc
 4935              	.LFE46:
 4937              		.section	.text.xTaskGenericNotify,"ax",%progbits
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 188


 4938              		.align	1
 4939              		.p2align 2,,3
 4940              		.global	xTaskGenericNotify
 4941              		.syntax unified
 4942              		.thumb
 4943              		.thumb_func
 4944              		.fpu fpv4-sp-d16
 4946              	xTaskGenericNotify:
 4947              	.LFB47:
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4948              		.loc 1 4344 0
 4949              		.cfi_startproc
 4950              		@ args = 0, pretend = 0, frame = 0
 4951              		@ frame_needed = 0, uses_anonymous_args = 0
 4952              	.LVL402:
 4953 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4954              	.LCFI45:
 4955              		.cfi_def_cfa_offset 24
 4956              		.cfi_offset 3, -24
 4957              		.cfi_offset 4, -20
 4958              		.cfi_offset 5, -16
 4959              		.cfi_offset 6, -12
 4960              		.cfi_offset 7, -8
 4961              		.cfi_offset 14, -4
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4962              		.loc 1 4349 0
 4963 0002 A8B1     		cbz	r0, .L545
 4964 0004 1D46     		mov	r5, r3
 4965 0006 0446     		mov	r4, r0
 4966              	.LVL403:
 4967 0008 1646     		mov	r6, r2
 4968 000a 0F46     		mov	r7, r1
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4969              		.loc 1 4352 0
 4970 000c FFF7FEFF 		bl	vPortEnterCritical
 4971              	.LVL404:
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4972              		.loc 1 4354 0
 4973 0010 0DB1     		cbz	r5, .L527
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4974              		.loc 1 4356 0
 4975 0012 E36C     		ldr	r3, [r4, #76]
 4976 0014 2B60     		str	r3, [r5]
 4977              	.L527:
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4978              		.loc 1 4359 0
 4979 0016 94F85050 		ldrb	r5, [r4, #80]	@ zero_extendqisi2
 4980              	.LVL405:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4981              		.loc 1 4361 0
 4982 001a 0222     		movs	r2, #2
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4983              		.loc 1 4363 0
 4984 001c 731E     		subs	r3, r6, #1
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4985              		.loc 1 4359 0
 4986 001e EDB2     		uxtb	r5, r5
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 189


 4987              	.LVL406:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4988              		.loc 1 4361 0
 4989 0020 84F85020 		strb	r2, [r4, #80]
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4990              		.loc 1 4363 0
 4991 0024 032B     		cmp	r3, #3
 4992 0026 0FD8     		bhi	.L528
 4993 0028 DFE803F0 		tbb	[pc, r3]
 4994              	.L530:
 4995 002c 49       		.byte	(.L529-.L530)/2
 4996 002d 45       		.byte	(.L531-.L530)/2
 4997 002e 0D       		.byte	(.L544-.L530)/2
 4998 002f 0B       		.byte	(.L533-.L530)/2
 4999              	.LVL407:
 5000              		.p2align 1
 5001              	.L545:
 5002              	.LBB459:
 5003              	.LBB460:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5004              		.loc 2 237 0
 5005              		.syntax unified
 5006              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5007 0030 4FF05003 			mov r3, #80												
 5008 0034 83F31188 		msr basepri, r3											
 5009 0038 BFF36F8F 		isb														
 5010 003c BFF34F8F 		dsb														
 5011              	
 5012              	@ 0 "" 2
 5013              	.LVL408:
 5014              		.thumb
 5015              		.syntax unified
 5016              	.L526:
 5017 0040 FEE7     		b	.L526
 5018              	.LVL409:
 5019              	.L533:
 5020              	.LBE460:
 5021              	.LBE459:
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5022              		.loc 1 4378 0
 5023 0042 022D     		cmp	r5, #2
 5024 0044 07D0     		beq	.L539
 5025              	.L544:
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5026              		.loc 1 4380 0
 5027 0046 E764     		str	r7, [r4, #76]
 5028              	.LVL410:
 5029              	.L528:
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5030              		.loc 1 4399 0
 5031 0048 012D     		cmp	r5, #1
 5032 004a 06D0     		beq	.L535
 5033              	.L538:
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5034              		.loc 1 4344 0
 5035 004c 0125     		movs	r5, #1
 5036              	.LVL411:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 190


 5037              	.L534:
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5038              		.loc 1 4439 0
 5039 004e FFF7FEFF 		bl	vPortExitCritical
 5040              	.LVL412:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5041              		.loc 1 4442 0
 5042 0052 2846     		mov	r0, r5
 5043 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5044              	.LVL413:
 5045              	.L539:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5046              		.loc 1 4385 0
 5047 0056 0025     		movs	r5, #0
 5048              	.LVL414:
 5049 0058 F9E7     		b	.L534
 5050              	.LVL415:
 5051              	.L535:
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5052              		.loc 1 4401 0
 5053 005a 271D     		adds	r7, r4, #4
 5054 005c 3846     		mov	r0, r7
 5055 005e FFF7FEFF 		bl	uxListRemove
 5056              	.LVL416:
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5057              		.loc 1 4402 0
 5058 0062 194A     		ldr	r2, .L546
 5059 0064 E66A     		ldr	r6, [r4, #44]
 5060 0066 D2F800C0 		ldr	ip, [r2]
 5061 006a 1848     		ldr	r0, .L546+4
 5062 006c 3946     		mov	r1, r7
 5063 006e 05FA06F3 		lsl	r3, r5, r6
 5064 0072 1427     		movs	r7, #20
 5065 0074 43EA0C03 		orr	r3, r3, ip
 5066 0078 07FB0600 		mla	r0, r7, r6, r0
 5067 007c 1360     		str	r3, [r2]
 5068 007e FFF7FEFF 		bl	vListInsertEnd
 5069              	.LVL417:
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5070              		.loc 1 4405 0
 5071 0082 A36A     		ldr	r3, [r4, #40]
 5072 0084 43B1     		cbz	r3, .L536
 5073              	.LBB461:
 5074              	.LBB462:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5075              		.loc 2 237 0
 5076              		.syntax unified
 5077              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5078 0086 4FF05003 			mov r3, #80												
 5079 008a 83F31188 		msr basepri, r3											
 5080 008e BFF36F8F 		isb														
 5081 0092 BFF34F8F 		dsb														
 5082              	
 5083              	@ 0 "" 2
 5084              	.LVL418:
 5085              		.thumb
 5086              		.syntax unified
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 191


 5087              	.L537:
 5088 0096 FEE7     		b	.L537
 5089              	.L536:
 5090              	.LBE462:
 5091              	.LBE461:
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5092              		.loc 1 4423 0
 5093 0098 0D4B     		ldr	r3, .L546+8
 5094 009a E26A     		ldr	r2, [r4, #44]
 5095 009c 1B68     		ldr	r3, [r3]
 5096 009e DB6A     		ldr	r3, [r3, #44]
 5097 00a0 9A42     		cmp	r2, r3
 5098 00a2 D3D9     		bls	.L538
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5099              		.loc 1 4427 0
 5100 00a4 0B4B     		ldr	r3, .L546+12
 5101 00a6 4FF08052 		mov	r2, #268435456
 5102 00aa 1A60     		str	r2, [r3]
 5103              		.syntax unified
 5104              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5105 00ac BFF34F8F 		dsb
 5106              	@ 0 "" 2
 5107              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5108 00b0 BFF36F8F 		isb
 5109              	@ 0 "" 2
 5110              		.thumb
 5111              		.syntax unified
 5112 00b4 CBE7     		b	.L534
 5113              	.LVL419:
 5114              	.L531:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5115              		.loc 1 4370 0
 5116 00b6 E36C     		ldr	r3, [r4, #76]
 5117 00b8 0133     		adds	r3, r3, #1
 5118 00ba E364     		str	r3, [r4, #76]
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5119              		.loc 1 4371 0
 5120 00bc C4E7     		b	.L528
 5121              	.L529:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5122              		.loc 1 4366 0
 5123 00be E36C     		ldr	r3, [r4, #76]
 5124 00c0 1F43     		orrs	r7, r7, r3
 5125              	.LVL420:
 5126 00c2 E764     		str	r7, [r4, #76]
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5127              		.loc 1 4367 0
 5128 00c4 C0E7     		b	.L528
 5129              	.L547:
 5130 00c6 00BF     		.align	2
 5131              	.L546:
 5132 00c8 00000000 		.word	.LANCHOR2
 5133 00cc 00000000 		.word	.LANCHOR8
 5134 00d0 00000000 		.word	.LANCHOR1
 5135 00d4 04ED00E0 		.word	-536810236
 5136              		.cfi_endproc
 5137              	.LFE47:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 192


 5139              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5140              		.align	1
 5141              		.p2align 2,,3
 5142              		.global	xTaskGenericNotifyFromISR
 5143              		.syntax unified
 5144              		.thumb
 5145              		.thumb_func
 5146              		.fpu fpv4-sp-d16
 5148              	xTaskGenericNotifyFromISR:
 5149              	.LFB48:
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5150              		.loc 1 4450 0
 5151              		.cfi_startproc
 5152              		@ args = 4, pretend = 0, frame = 0
 5153              		@ frame_needed = 0, uses_anonymous_args = 0
 5154              	.LVL421:
 5155 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5156              	.LCFI46:
 5157              		.cfi_def_cfa_offset 32
 5158              		.cfi_offset 3, -32
 5159              		.cfi_offset 4, -28
 5160              		.cfi_offset 5, -24
 5161              		.cfi_offset 6, -20
 5162              		.cfi_offset 7, -16
 5163              		.cfi_offset 8, -12
 5164              		.cfi_offset 9, -8
 5165              		.cfi_offset 14, -4
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5166              		.loc 1 4450 0
 5167 0004 089F     		ldr	r7, [sp, #32]
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5168              		.loc 1 4456 0
 5169 0006 00B3     		cbz	r0, .L572
 5170 0008 0446     		mov	r4, r0
 5171 000a 1D46     		mov	r5, r3
 5172 000c 9046     		mov	r8, r2
 5173 000e 8946     		mov	r9, r1
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5174              		.loc 1 4474 0
 5175 0010 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5176              	.LVL422:
 5177              	.LBB463:
 5178              	.LBB464:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5179              		.loc 2 253 0
 5180              		.syntax unified
 5181              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5182 0014 EFF31186 			mrs r6, basepri											
 5183 0018 4FF05003 		mov r3, #80												
 5184 001c 83F31188 		msr basepri, r3											
 5185 0020 BFF36F8F 		isb														
 5186 0024 BFF34F8F 		dsb														
 5187              	
 5188              	@ 0 "" 2
 5189              		.thumb
 5190              		.syntax unified
 5191              	.LBE464:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 193


 5192              	.LBE463:
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5193              		.loc 1 4480 0
 5194 0028 0DB1     		cbz	r5, .L551
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5195              		.loc 1 4482 0
 5196 002a E36C     		ldr	r3, [r4, #76]
 5197 002c 2B60     		str	r3, [r5]
 5198              	.L551:
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5199              		.loc 1 4485 0
 5200 002e 94F85050 		ldrb	r5, [r4, #80]	@ zero_extendqisi2
 5201              	.LVL423:
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5202              		.loc 1 4486 0
 5203 0032 0222     		movs	r2, #2
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5204              		.loc 1 4488 0
 5205 0034 08F1FF33 		add	r3, r8, #-1
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5206              		.loc 1 4485 0
 5207 0038 EDB2     		uxtb	r5, r5
 5208              	.LVL424:
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5209              		.loc 1 4486 0
 5210 003a 84F85020 		strb	r2, [r4, #80]
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5211              		.loc 1 4488 0
 5212 003e 032B     		cmp	r3, #3
 5213 0040 10D8     		bhi	.L552
 5214 0042 DFE803F0 		tbb	[pc, r3]
 5215              	.L554:
 5216 0046 4A       		.byte	(.L553-.L554)/2
 5217 0047 46       		.byte	(.L555-.L554)/2
 5218 0048 0D       		.byte	(.L571-.L554)/2
 5219 0049 0B       		.byte	(.L557-.L554)/2
 5220              	.LVL425:
 5221              		.p2align 1
 5222              	.L572:
 5223              	.LBB465:
 5224              	.LBB466:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5225              		.loc 2 237 0
 5226              		.syntax unified
 5227              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5228 004a 4FF05003 			mov r3, #80												
 5229 004e 83F31188 		msr basepri, r3											
 5230 0052 BFF36F8F 		isb														
 5231 0056 BFF34F8F 		dsb														
 5232              	
 5233              	@ 0 "" 2
 5234              	.LVL426:
 5235              		.thumb
 5236              		.syntax unified
 5237              	.L550:
 5238 005a FEE7     		b	.L550
 5239              	.LVL427:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 194


 5240              	.L557:
 5241              	.LBE466:
 5242              	.LBE465:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5243              		.loc 1 4503 0
 5244 005c 022D     		cmp	r5, #2
 5245 005e 08D0     		beq	.L566
 5246              	.L571:
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5247              		.loc 1 4505 0
 5248 0060 C4F84C90 		str	r9, [r4, #76]
 5249              	.L552:
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5250              		.loc 1 4524 0
 5251 0064 012D     		cmp	r5, #1
 5252 0066 06D0     		beq	.L559
 5253              	.LVL428:
 5254              	.L564:
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5255              		.loc 1 4450 0
 5256 0068 0120     		movs	r0, #1
 5257              	.L558:
 5258              	.LVL429:
 5259              	.LBB467:
 5260              	.LBB468:
 5261              		.loc 2 271 0
 5262              		.syntax unified
 5263              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5264 006a 86F31188 			msr basepri, r6	
 5265              	@ 0 "" 2
 5266              	.LVL430:
 5267              		.thumb
 5268              		.syntax unified
 5269              	.LBE468:
 5270              	.LBE467:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5271              		.loc 1 4566 0
 5272 006e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5273              	.LVL431:
 5274              	.L566:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5275              		.loc 1 4510 0
 5276 0072 0020     		movs	r0, #0
 5277 0074 F9E7     		b	.L558
 5278              	.L559:
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5279              		.loc 1 4527 0
 5280 0076 A36A     		ldr	r3, [r4, #40]
 5281 0078 43B1     		cbz	r3, .L560
 5282              	.LBB469:
 5283              	.LBB470:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5284              		.loc 2 237 0
 5285              		.syntax unified
 5286              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5287 007a 4FF05003 			mov r3, #80												
 5288 007e 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 195


 5289 0082 BFF36F8F 		isb														
 5290 0086 BFF34F8F 		dsb														
 5291              	
 5292              	@ 0 "" 2
 5293              	.LVL432:
 5294              		.thumb
 5295              		.syntax unified
 5296              	.L561:
 5297 008a FEE7     		b	.L561
 5298              	.L560:
 5299              	.LBE470:
 5300              	.LBE469:
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5301              		.loc 1 4529 0
 5302 008c 1A4B     		ldr	r3, .L573
 5303 008e 1B68     		ldr	r3, [r3]
 5304 0090 63BB     		cbnz	r3, .L562
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5305              		.loc 1 4531 0
 5306 0092 04F10408 		add	r8, r4, #4
 5307 0096 4046     		mov	r0, r8
 5308 0098 FFF7FEFF 		bl	uxListRemove
 5309              	.LVL433:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5310              		.loc 1 4532 0
 5311 009c 174A     		ldr	r2, .L573+4
 5312 009e E06A     		ldr	r0, [r4, #44]
 5313 00a0 D2F800E0 		ldr	lr, [r2]
 5314 00a4 DFF864C0 		ldr	ip, .L573+20
 5315 00a8 05FA00F3 		lsl	r3, r5, r0
 5316 00ac 1425     		movs	r5, #20
 5317              	.LVL434:
 5318 00ae 43EA0E03 		orr	r3, r3, lr
 5319 00b2 4146     		mov	r1, r8
 5320 00b4 05FB00C0 		mla	r0, r5, r0, ip
 5321 00b8 1360     		str	r3, [r2]
 5322 00ba FFF7FEFF 		bl	vListInsertEnd
 5323              	.LVL435:
 5324              	.L563:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5325              		.loc 1 4541 0
 5326 00be 104B     		ldr	r3, .L573+8
 5327 00c0 E26A     		ldr	r2, [r4, #44]
 5328 00c2 1B68     		ldr	r3, [r3]
 5329 00c4 DB6A     		ldr	r3, [r3, #44]
 5330 00c6 9A42     		cmp	r2, r3
 5331 00c8 CED9     		bls	.L564
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5332              		.loc 1 4545 0
 5333 00ca 5FB1     		cbz	r7, .L565
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5334              		.loc 1 4547 0
 5335 00cc 0120     		movs	r0, #1
 5336 00ce 3860     		str	r0, [r7]
 5337 00d0 CBE7     		b	.L558
 5338              	.LVL436:
 5339              	.L555:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 196


4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5340              		.loc 1 4495 0
 5341 00d2 E36C     		ldr	r3, [r4, #76]
 5342 00d4 0133     		adds	r3, r3, #1
 5343 00d6 E364     		str	r3, [r4, #76]
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5344              		.loc 1 4496 0
 5345 00d8 C4E7     		b	.L552
 5346              	.L553:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5347              		.loc 1 4491 0
 5348 00da E36C     		ldr	r3, [r4, #76]
 5349 00dc 43EA0903 		orr	r3, r3, r9
 5350 00e0 E364     		str	r3, [r4, #76]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5351              		.loc 1 4492 0
 5352 00e2 BFE7     		b	.L552
 5353              	.LVL437:
 5354              	.L565:
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5355              		.loc 1 4554 0
 5356 00e4 074B     		ldr	r3, .L573+12
 5357 00e6 0120     		movs	r0, #1
 5358 00e8 1860     		str	r0, [r3]
 5359 00ea BEE7     		b	.L558
 5360              	.LVL438:
 5361              	.L562:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5362              		.loc 1 4538 0
 5363 00ec 04F11801 		add	r1, r4, #24
 5364 00f0 0548     		ldr	r0, .L573+16
 5365 00f2 FFF7FEFF 		bl	vListInsertEnd
 5366              	.LVL439:
 5367 00f6 E2E7     		b	.L563
 5368              	.L574:
 5369              		.align	2
 5370              	.L573:
 5371 00f8 00000000 		.word	.LANCHOR16
 5372 00fc 00000000 		.word	.LANCHOR2
 5373 0100 00000000 		.word	.LANCHOR1
 5374 0104 00000000 		.word	.LANCHOR17
 5375 0108 00000000 		.word	.LANCHOR11
 5376 010c 00000000 		.word	.LANCHOR8
 5377              		.cfi_endproc
 5378              	.LFE48:
 5380              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5381              		.align	1
 5382              		.p2align 2,,3
 5383              		.global	vTaskNotifyGiveFromISR
 5384              		.syntax unified
 5385              		.thumb
 5386              		.thumb_func
 5387              		.fpu fpv4-sp-d16
 5389              	vTaskNotifyGiveFromISR:
 5390              	.LFB49:
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5391              		.loc 1 4574 0
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 197


 5392              		.cfi_startproc
 5393              		@ args = 0, pretend = 0, frame = 0
 5394              		@ frame_needed = 0, uses_anonymous_args = 0
 5395              	.LVL440:
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5396              		.loc 1 4579 0
 5397 0000 F0B1     		cbz	r0, .L588
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5398              		.loc 1 4574 0
 5399 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 5400              	.LCFI47:
 5401              		.cfi_def_cfa_offset 24
 5402              		.cfi_offset 4, -24
 5403              		.cfi_offset 5, -20
 5404              		.cfi_offset 6, -16
 5405              		.cfi_offset 7, -12
 5406              		.cfi_offset 8, -8
 5407              		.cfi_offset 14, -4
 5408 0006 0446     		mov	r4, r0
 5409 0008 0E46     		mov	r6, r1
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5410              		.loc 1 4597 0
 5411 000a FFF7FEFF 		bl	vPortValidateInterruptPriority
 5412              	.LVL441:
 5413              	.LBB471:
 5414              	.LBB472:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5415              		.loc 2 253 0
 5416              		.syntax unified
 5417              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5418 000e EFF31187 			mrs r7, basepri											
 5419 0012 4FF05003 		mov r3, #80												
 5420 0016 83F31188 		msr basepri, r3											
 5421 001a BFF36F8F 		isb														
 5422 001e BFF34F8F 		dsb														
 5423              	
 5424              	@ 0 "" 2
 5425              		.thumb
 5426              		.syntax unified
 5427              	.LBE472:
 5428              	.LBE471:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5429              		.loc 1 4604 0
 5430 0022 0223     		movs	r3, #2
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5431              		.loc 1 4603 0
 5432 0024 94F85050 		ldrb	r5, [r4, #80]	@ zero_extendqisi2
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5433              		.loc 1 4604 0
 5434 0028 84F85030 		strb	r3, [r4, #80]
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5435              		.loc 1 4608 0
 5436 002c E36C     		ldr	r3, [r4, #76]
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5437              		.loc 1 4603 0
 5438 002e EDB2     		uxtb	r5, r5
 5439              	.LVL442:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 198


4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5440              		.loc 1 4608 0
 5441 0030 0133     		adds	r3, r3, #1
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5442              		.loc 1 4614 0
 5443 0032 012D     		cmp	r5, #1
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5444              		.loc 1 4608 0
 5445 0034 E364     		str	r3, [r4, #76]
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5446              		.loc 1 4614 0
 5447 0036 0CD0     		beq	.L589
 5448              	.LVL443:
 5449              	.L579:
 5450              	.LBB473:
 5451              	.LBB474:
 5452              		.loc 2 271 0
 5453              		.syntax unified
 5454              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5455 0038 87F31188 			msr basepri, r7	
 5456              	@ 0 "" 2
 5457              	.LVL444:
 5458              		.thumb
 5459              		.syntax unified
 5460              	.LBE474:
 5461              	.LBE473:
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5462              		.loc 1 4654 0
 5463 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 5464              	.LVL445:
 5465              	.L588:
 5466              	.LCFI48:
 5467              		.cfi_def_cfa_offset 0
 5468              		.cfi_restore 4
 5469              		.cfi_restore 5
 5470              		.cfi_restore 6
 5471              		.cfi_restore 7
 5472              		.cfi_restore 8
 5473              		.cfi_restore 14
 5474              	.LBB475:
 5475              	.LBB476:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5476              		.loc 2 237 0
 5477              		.syntax unified
 5478              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5479 0040 4FF05003 			mov r3, #80												
 5480 0044 83F31188 		msr basepri, r3											
 5481 0048 BFF36F8F 		isb														
 5482 004c BFF34F8F 		dsb														
 5483              	
 5484              	@ 0 "" 2
 5485              	.LVL446:
 5486              		.thumb
 5487              		.syntax unified
 5488              	.L577:
 5489 0050 FEE7     		b	.L577
 5490              	.LVL447:
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 199


 5491              	.L589:
 5492              	.LCFI49:
 5493              		.cfi_def_cfa_offset 24
 5494              		.cfi_offset 4, -24
 5495              		.cfi_offset 5, -20
 5496              		.cfi_offset 6, -16
 5497              		.cfi_offset 7, -12
 5498              		.cfi_offset 8, -8
 5499              		.cfi_offset 14, -4
 5500              	.LBE476:
 5501              	.LBE475:
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5502              		.loc 1 4617 0
 5503 0052 A36A     		ldr	r3, [r4, #40]
 5504 0054 43B1     		cbz	r3, .L580
 5505              	.LBB477:
 5506              	.LBB478:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5507              		.loc 2 237 0
 5508              		.syntax unified
 5509              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5510 0056 4FF05003 			mov r3, #80												
 5511 005a 83F31188 		msr basepri, r3											
 5512 005e BFF36F8F 		isb														
 5513 0062 BFF34F8F 		dsb														
 5514              	
 5515              	@ 0 "" 2
 5516              	.LVL448:
 5517              		.thumb
 5518              		.syntax unified
 5519              	.L581:
 5520 0066 FEE7     		b	.L581
 5521              	.L580:
 5522              	.LBE478:
 5523              	.LBE477:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5524              		.loc 1 4619 0
 5525 0068 164B     		ldr	r3, .L590
 5526 006a 1B68     		ldr	r3, [r3]
 5527 006c FBB9     		cbnz	r3, .L582
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5528              		.loc 1 4621 0
 5529 006e 04F10408 		add	r8, r4, #4
 5530 0072 4046     		mov	r0, r8
 5531 0074 FFF7FEFF 		bl	uxListRemove
 5532              	.LVL449:
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5533              		.loc 1 4622 0
 5534 0078 134A     		ldr	r2, .L590+4
 5535 007a E06A     		ldr	r0, [r4, #44]
 5536 007c D2F800E0 		ldr	lr, [r2]
 5537 0080 DFF854C0 		ldr	ip, .L590+20
 5538 0084 05FA00F3 		lsl	r3, r5, r0
 5539 0088 1425     		movs	r5, #20
 5540              	.LVL450:
 5541 008a 43EA0E03 		orr	r3, r3, lr
 5542 008e 4146     		mov	r1, r8
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 200


 5543 0090 05FB00C0 		mla	r0, r5, r0, ip
 5544 0094 1360     		str	r3, [r2]
 5545 0096 FFF7FEFF 		bl	vListInsertEnd
 5546              	.LVL451:
 5547              	.L583:
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5548              		.loc 1 4631 0
 5549 009a 0C4B     		ldr	r3, .L590+8
 5550 009c E26A     		ldr	r2, [r4, #44]
 5551 009e 1B68     		ldr	r3, [r3]
 5552 00a0 DB6A     		ldr	r3, [r3, #44]
 5553 00a2 9A42     		cmp	r2, r3
 5554 00a4 C8D9     		bls	.L579
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5555              		.loc 1 4635 0
 5556 00a6 46B1     		cbz	r6, .L585
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5557              		.loc 1 4637 0
 5558 00a8 0123     		movs	r3, #1
 5559 00aa 3360     		str	r3, [r6]
 5560 00ac C4E7     		b	.L579
 5561              	.LVL452:
 5562              	.L582:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5563              		.loc 1 4628 0
 5564 00ae 04F11801 		add	r1, r4, #24
 5565 00b2 0748     		ldr	r0, .L590+12
 5566 00b4 FFF7FEFF 		bl	vListInsertEnd
 5567              	.LVL453:
 5568 00b8 EFE7     		b	.L583
 5569              	.LVL454:
 5570              	.L585:
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5571              		.loc 1 4644 0
 5572 00ba 064B     		ldr	r3, .L590+16
 5573 00bc 0122     		movs	r2, #1
 5574 00be 1A60     		str	r2, [r3]
 5575 00c0 BAE7     		b	.L579
 5576              	.L591:
 5577 00c2 00BF     		.align	2
 5578              	.L590:
 5579 00c4 00000000 		.word	.LANCHOR16
 5580 00c8 00000000 		.word	.LANCHOR2
 5581 00cc 00000000 		.word	.LANCHOR1
 5582 00d0 00000000 		.word	.LANCHOR11
 5583 00d4 00000000 		.word	.LANCHOR17
 5584 00d8 00000000 		.word	.LANCHOR8
 5585              		.cfi_endproc
 5586              	.LFE49:
 5588              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5589              		.align	1
 5590              		.p2align 2,,3
 5591              		.global	xTaskNotifyStateClear
 5592              		.syntax unified
 5593              		.thumb
 5594              		.thumb_func
 5595              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 201


 5597              	xTaskNotifyStateClear:
 5598              	.LFB50:
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5599              		.loc 1 4663 0
 5600              		.cfi_startproc
 5601              		@ args = 0, pretend = 0, frame = 0
 5602              		@ frame_needed = 0, uses_anonymous_args = 0
 5603              	.LVL455:
 5604 0000 10B5     		push	{r4, lr}
 5605              	.LCFI50:
 5606              		.cfi_def_cfa_offset 8
 5607              		.cfi_offset 4, -8
 5608              		.cfi_offset 14, -4
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5609              		.loc 1 4669 0
 5610 0002 78B1     		cbz	r0, .L598
 5611 0004 0446     		mov	r4, r0
 5612              	.LVL456:
 5613              	.L593:
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5614              		.loc 1 4671 0 discriminator 4
 5615 0006 FFF7FEFF 		bl	vPortEnterCritical
 5616              	.LVL457:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5617              		.loc 1 4673 0 discriminator 4
 5618 000a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 5619 000e 022B     		cmp	r3, #2
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5620              		.loc 1 4675 0 discriminator 4
 5621 0010 05BF     		ittet	eq
 5622 0012 0023     		moveq	r3, #0
 5623 0014 84F85030 		strbeq	r3, [r4, #80]
 5624              	.LVL458:
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5625              		.loc 1 4680 0 discriminator 4
 5626 0018 0024     		movne	r4, #0
 5627              	.LVL459:
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5628              		.loc 1 4676 0 discriminator 4
 5629 001a 0124     		moveq	r4, #1
 5630              	.LVL460:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5631              		.loc 1 4683 0 discriminator 4
 5632 001c FFF7FEFF 		bl	vPortExitCritical
 5633              	.LVL461:
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5634              		.loc 1 4686 0 discriminator 4
 5635 0020 2046     		mov	r0, r4
 5636 0022 10BD     		pop	{r4, pc}
 5637              	.LVL462:
 5638              	.L598:
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5639              		.loc 1 4669 0 discriminator 1
 5640 0024 014B     		ldr	r3, .L599
 5641 0026 1C68     		ldr	r4, [r3]
 5642              	.LVL463:
 5643 0028 EDE7     		b	.L593
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 202


 5644              	.L600:
 5645 002a 00BF     		.align	2
 5646              	.L599:
 5647 002c 00000000 		.word	.LANCHOR1
 5648              		.cfi_endproc
 5649              	.LFE50:
 5651              		.global	pxCurrentTCB
 5652              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5653              		.align	2
 5654              		.set	.LANCHOR1,. + 0
 5657              	pxCurrentTCB:
 5658 0000 00000000 		.space	4
 5659              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5660              		.align	2
 5661              		.set	.LANCHOR5,. + 0
 5664              	pxDelayedTaskList:
 5665 0000 00000000 		.space	4
 5666              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5667              		.align	2
 5668              		.set	.LANCHOR4,. + 0
 5671              	pxOverflowDelayedTaskList:
 5672 0000 00000000 		.space	4
 5673              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5674              		.align	2
 5675              		.set	.LANCHOR8,. + 0
 5678              	pxReadyTasksLists:
 5679 0000 00000000 		.space	140
 5679      00000000 
 5679      00000000 
 5679      00000000 
 5679      00000000 
 5680              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5681              		.align	2
 5682              		.set	.LANCHOR7,. + 0
 5685              	uxCurrentNumberOfTasks:
 5686 0000 00000000 		.space	4
 5687              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5688              		.align	2
 5689              		.set	.LANCHOR15,. + 0
 5692              	uxDeletedTasksWaitingCleanUp:
 5693 0000 00000000 		.space	4
 5694              		.section	.bss.uxPendedTicks,"aw",%nobits
 5695              		.align	2
 5696              		.set	.LANCHOR20,. + 0
 5699              	uxPendedTicks:
 5700 0000 00000000 		.space	4
 5701              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5702              		.align	2
 5703              		.set	.LANCHOR16,. + 0
 5706              	uxSchedulerSuspended:
 5707 0000 00000000 		.space	4
 5708              		.section	.bss.uxTaskNumber,"aw",%nobits
 5709              		.align	2
 5710              		.set	.LANCHOR14,. + 0
 5713              	uxTaskNumber:
 5714 0000 00000000 		.space	4
 5715              		.section	.bss.uxTopReadyPriority,"aw",%nobits
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 203


 5716              		.align	2
 5717              		.set	.LANCHOR2,. + 0
 5720              	uxTopReadyPriority:
 5721 0000 00000000 		.space	4
 5722              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5723              		.align	2
 5724              		.set	.LANCHOR9,. + 0
 5727              	xDelayedTaskList1:
 5728 0000 00000000 		.space	20
 5728      00000000 
 5728      00000000 
 5728      00000000 
 5728      00000000 
 5729              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5730              		.align	2
 5731              		.set	.LANCHOR10,. + 0
 5734              	xDelayedTaskList2:
 5735 0000 00000000 		.space	20
 5735      00000000 
 5735      00000000 
 5735      00000000 
 5735      00000000 
 5736              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 5737              		.align	2
 5738              		.set	.LANCHOR18,. + 0
 5741              	xIdleTaskHandle:
 5742 0000 00000000 		.space	4
 5743              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5744              		.align	2
 5745              		.set	.LANCHOR6,. + 0
 5748              	xNextTaskUnblockTime:
 5749 0000 00000000 		.space	4
 5750              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5751              		.align	2
 5752              		.set	.LANCHOR19,. + 0
 5755              	xNumOfOverflows:
 5756 0000 00000000 		.space	4
 5757              		.section	.bss.xPendingReadyList,"aw",%nobits
 5758              		.align	2
 5759              		.set	.LANCHOR11,. + 0
 5762              	xPendingReadyList:
 5763 0000 00000000 		.space	20
 5763      00000000 
 5763      00000000 
 5763      00000000 
 5763      00000000 
 5764              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5765              		.align	2
 5766              		.set	.LANCHOR13,. + 0
 5769              	xSchedulerRunning:
 5770 0000 00000000 		.space	4
 5771              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5772              		.align	2
 5773              		.set	.LANCHOR3,. + 0
 5776              	xSuspendedTaskList:
 5777 0000 00000000 		.space	20
 5777      00000000 
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 204


 5777      00000000 
 5777      00000000 
 5777      00000000 
 5778              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5779              		.align	2
 5780              		.set	.LANCHOR12,. + 0
 5783              	xTasksWaitingTermination:
 5784 0000 00000000 		.space	20
 5784      00000000 
 5784      00000000 
 5784      00000000 
 5784      00000000 
 5785              		.section	.bss.xTickCount,"aw",%nobits
 5786              		.align	2
 5787              		.set	.LANCHOR0,. + 0
 5790              	xTickCount:
 5791 0000 00000000 		.space	4
 5792              		.section	.bss.xYieldPending,"aw",%nobits
 5793              		.align	2
 5794              		.set	.LANCHOR17,. + 0
 5797              	xYieldPending:
 5798 0000 00000000 		.space	4
 5799              		.text
 5800              	.Letext0:
 5801              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eab
 5802              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 5803              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 5804              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 5805              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 5806              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 5807              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 5808              		.file 10 "Inc/FreeRTOSConfig.h"
 5809              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5810              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5811              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5812              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 205


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:18     .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:25     .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:156    .text.prvAddCurrentTaskToDelayedList:00000070 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:167    .text.xTaskCreate:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:175    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:615    .text.xTaskCreate:00000228 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:633    .text.vTaskDelete:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:641    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:850    .text.vTaskDelete:000000d8 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:866    .text.uxTaskPriorityGet:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:874    .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:911    .text.uxTaskPriorityGet:00000018 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:916    .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:924    .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:983    .text.uxTaskPriorityGetFromISR:0000002c $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:988    .text.vTaskPrioritySet:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:996    .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:1180   .text.vTaskPrioritySet:000000c4 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:1188   .text.vTaskSuspend:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:1196   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:1488   .text.vTaskSuspend:00000130 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:1503   .text.vTaskResume:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:1511   .text.vTaskResume:00000000 vTaskResume
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:1645   .text.vTaskResume:00000088 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:1655   .text.xTaskResumeFromISR:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:1663   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:1815   .text.xTaskResumeFromISR:00000098 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:1825   .text.vTaskStartScheduler:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:1833   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2187   .text.vTaskStartScheduler:00000198 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3037   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2216   .text.vTaskEndScheduler:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2224   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2256   .text.vTaskEndScheduler:0000001c $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2261   .text.vTaskSuspendAll:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2269   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2286   .text.vTaskSuspendAll:0000000c $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2291   .text.xTaskGetTickCount:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2299   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2315   .text.xTaskGetTickCount:00000008 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2320   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2328   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2351   .text.xTaskGetTickCountFromISR:0000000c $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2356   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2364   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2379   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2384   .text.pcTaskGetName:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2392   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2436   .text.pcTaskGetName:00000020 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2443   .text.xTaskIncrementTick:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2451   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2686   .text.xTaskIncrementTick:0000012c $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2707   .text.xTaskResumeAll:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2715   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2923   .text.xTaskResumeAll:000000e8 $d
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 206


C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2942   .text.vTaskDelay:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:2950   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3024   .text.vTaskDelay:00000040 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3030   .text.prvIdleTask:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3151   .text.prvIdleTask:00000078 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3166   .text.vTaskSwitchContext:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3174   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3293   .text.vTaskSwitchContext:00000068 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3304   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3312   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3465   .text.vTaskPlaceOnEventList:00000084 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3480   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3488   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3580   .text.vTaskPlaceOnUnorderedEventList:00000050 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3586   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3594   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3696   .text.xTaskRemoveFromEventList:00000070 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3706   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3714   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3826   .text.xTaskRemoveFromUnorderedEventList:0000007c $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3837   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3845   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3888   .text.vTaskSetTimeOutState:00000024 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3897   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:3905   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4043   .text.xTaskCheckForTimeOut:00000078 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4050   .text.vTaskMissedYield:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4058   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4074   .text.vTaskMissedYield:00000008 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4079   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4087   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4103   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4108   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4116   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4144   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4150   .text.vTaskPriorityInherit:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4158   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4283   .text.vTaskPriorityInherit:00000088 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4290   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4298   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4465   .text.xTaskPriorityDisinherit:000000a4 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4472   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4480   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4505   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4510   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4518   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4542   .text.pvTaskIncrementMutexHeldCount:00000014 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4547   .text.ulTaskNotifyTake:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4555   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4718   .text.ulTaskNotifyTake:000000bc $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4734   .text.xTaskNotifyWait:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4742   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4922   .text.xTaskNotifyWait:000000e0 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4938   .text.xTaskGenericNotify:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4946   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:4995   .text.xTaskGenericNotify:0000002c $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5000   .text.xTaskGenericNotify:00000030 $t
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 207


C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5132   .text.xTaskGenericNotify:000000c8 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5140   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5148   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5216   .text.xTaskGenericNotifyFromISR:00000046 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5221   .text.xTaskGenericNotifyFromISR:0000004a $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5371   .text.xTaskGenericNotifyFromISR:000000f8 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5381   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5389   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5579   .text.vTaskNotifyGiveFromISR:000000c4 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5589   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5597   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5647   .text.xTaskNotifyStateClear:0000002c $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5657   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5653   .bss.pxCurrentTCB:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5660   .bss.pxDelayedTaskList:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5664   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5667   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5671   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5674   .bss.pxReadyTasksLists:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5678   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5681   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5685   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5688   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5692   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5695   .bss.uxPendedTicks:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5699   .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5702   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5706   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5709   .bss.uxTaskNumber:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5713   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5716   .bss.uxTopReadyPriority:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5720   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5723   .bss.xDelayedTaskList1:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5727   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5730   .bss.xDelayedTaskList2:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5734   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5737   .bss.xIdleTaskHandle:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5741   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5744   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5748   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5751   .bss.xNumOfOverflows:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5755   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5758   .bss.xPendingReadyList:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5762   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5765   .bss.xSchedulerRunning:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5769   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5772   .bss.xSuspendedTaskList:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5776   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5779   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5783   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5786   .bss.xTickCount:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5790   .bss.xTickCount:00000000 xTickCount
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5793   .bss.xYieldPending:00000000 $d
C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s:5797   .bss.xYieldPending:00000000 xYieldPending

UNDEFINED SYMBOLS
uxListRemove
ARM GAS  C:\Users\ALEX'S~1\AppData\Local\Temp\cc3t2lie.s 			page 208


vListInsert
vListInsertEnd
pvPortMalloc
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vPortExitCritical
vPortFree
vListInitialise
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
